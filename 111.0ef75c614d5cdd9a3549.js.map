{"version":3,"file":"111.0ef75c614d5cdd9a3549.js","mappings":"iJAAYA,E,oGAAZ,SAAYA,GACV,2CACA,oCACD,CAHD,CAAYA,IAAAA,EAAmB,K,maCqBxB,MAAM,EAQGC,uBACZ,OAAOC,KAAKC,iBACd,CAkBAC,YACYC,EACAC,EACAC,EACAC,EACAC,EACFC,EACEC,EACFC,EACAC,EACAC,EACEC,EACAC,GAXA,KAAAX,cAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,qBAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,uBAAAA,EACF,KAAAC,cAAAA,EACE,KAAAC,IAAAA,EACF,KAAAC,WAAAA,EACA,KAAAC,wBAAAA,EACA,KAAAC,YAAAA,EACE,KAAAC,oBAAAA,EACA,KAAAC,cAAAA,EAvCF,KAAAC,QAAU,IAAI,MAGxB,KAAAC,kBAA4B,KAEpB,KAAAf,mBAAoB,EAM5B,KAAAgB,WAAajB,KAAKY,YAAYM,MAAM,CAClCC,OAAQ,CAAC,QACTC,OAAQ,CAAC,IACTC,aAAc,CAAC,GAAI,KAAWC,UAC9BC,oBAAqB,CAAC,GAAI,KAAWD,UACrCE,mBAAoB,CAAC1B,EAAoB2B,oBAG3C,KAAAC,cAAgB,CACd,CAAEC,KAAM,QAASC,MAAO,QACxB,CAAED,KAAM,OAAQC,MAAO,OACvB,CAAED,KAAM,oBAAqBC,MAAO,mBAG9B,KAAAC,SAAW,IAAIC,EAAA,CAepB,CAEGC,W,yCACJ/B,KAAKQ,cACFwB,2BAA2B,KAAWC,4BACtCC,MAAK,EAAAC,EAAA,GAAUnC,KAAK6B,WACpBO,WAAWC,IACVrC,KAAKC,kBAAoBoC,EACrBrC,KAAKD,kBACPC,KAAKiB,WAAWqB,S,KAItB,EAAAC,EAAA,GACEvC,KAAKiB,WAAWuB,IAAI,UAAUC,aAC9BzC,KAAKiB,WAAWuB,IAAI,sBAAsBC,cAEzCP,MAAK,EAAAC,EAAA,GAAUnC,KAAK6B,WACpBK,MAAK,EAAAQ,EAAA,GAAU,IACfN,WAAU,IAAMpC,KAAK2C,oBAC1B,G,CAEAC,cACE5C,KAAK6B,SAASgB,MAChB,CAEIC,sBACF,MAAuB,mBAAhB9C,KAAKmB,MACd,CAEgB4B,W,yCACd,IACE/C,KAAKgD,YAAchD,KAAKiD,gBACxB,MAAMC,QAAalD,KAAKgD,YACxBhD,KAAKmD,aAAaD,GAClBlD,KAAKoD,cACCpD,KAAKqD,eACXrD,KAAKiB,WAAWuB,IAAI,UAAUc,SAAS,IACvCtD,KAAKiB,WAAWsC,iB,CAChB,MAAOC,GACPxD,KAAKU,WAAW+C,MAAMD,E,CAE1B,G,CAEME,S,yCACJ,GAAI1D,KAAKD,iBAMP,YALAC,KAAKK,qBAAqBsD,UACxB,QACA,KACA3D,KAAKI,YAAYwD,EAAE,sCAMvB,WAD8B5D,KAAK6D,iBAEjC,OAEF,MAAMzC,EAASpB,KAAKiB,WAAWuB,IAAI,UAAUZ,MAE7C,UACQ5B,KAAKW,wBAAwBmD,WAAW1C,E,CAC9C,MAAOoC,GAEP,YADAxD,KAAKK,qBAAqBsD,UAAU,QAAS3D,KAAKI,YAAYwD,EAAE,iBAAkBJ,EAAEO,Q,CAItF/D,KAAK+C,UACP,G,CAEMc,gB,yCACJ,OAAI7D,KAAK8C,sBACM9C,KAAKc,cAAckD,iBAAiB,CAC/CC,MAAO,CAAEC,IAAK,sBACdC,QACEnE,KAAKI,YAAYwD,EAAE,2BACnB,IACA5D,KAAKI,YAAYwD,EAAE,+BACrBQ,iBAAkB,CAAEF,IAAK,eACzBG,KAAM,kBAGKrE,KAAKc,cAAckD,iBAAiB,CAC/CC,MAAO,CAAEC,IAAK,sBACdC,QAAS,CAAED,IAAK,qBAChBE,iBAAkB,CAAEF,IAAK,eACzBG,KAAM,WAGZ,G,CAEUjB,QACRpD,KAAKe,QAAQuD,MACf,CAEUrB,gBACR,MACkB,mBAAhBjD,KAAKmB,QACLnB,KAAKwB,qBAAuB1B,EAAoByE,cAEzCvE,KAAKM,cAAckE,2BAA2BxE,KAAKqB,cAEnDrB,KAAKM,cAAcmE,UAAUzE,KAAKmB,OAAQ,KAErD,CAEUuD,YAAYC,GACpB,IAAIC,EAAY5E,KAAKmB,OASrB,MARoB,mBAAhBnB,KAAKmB,SAELwD,EADY,MAAVA,EACO,YAEA,aAAeA,EAE1BC,EAAY,QAEP5E,KAAKM,cAAcoE,YAAYC,EAAQC,EAChD,CAEgBvB,e,+CACRrD,KAAKO,uBAAuBsE,QAAQ,KAAUC,yBACtD,G,CAEI3D,aACF,OAAOnB,KAAKiB,WAAWuB,IAAI,UAAUZ,KACvC,CAEIP,mBACF,OAAOrB,KAAKiB,WAAWuB,IAAI,gBAAgBZ,KAC7C,CAEIL,0BACF,OAAOvB,KAAKiB,WAAWuB,IAAI,uBAAuBZ,KACpD,CAEIJ,yBACF,OAAOxB,KAAKiB,WAAWuB,IAAI,sBAAsBZ,KACnD,CAEAe,mBACE3C,KAAKiB,WAAWuB,IAAI,uBAAuBuC,QAC3C/E,KAAKiB,WAAWuB,IAAI,gBAAgBuC,QAEhC/E,KAAK8C,iBAAmB9C,KAAKwB,oBAAsB1B,EAAoByE,eACzEvE,KAAKiB,WAAW+D,SAAS3D,aAAa4D,SACtCjF,KAAKiB,WAAW+D,SAASzD,oBAAoB0D,WAE7CjF,KAAKiB,WAAW+D,SAAS3D,aAAaiB,UACtCtC,KAAKiB,WAAW+D,SAASzD,oBAAoBe,UAEjD,CAEQa,aAAa+B,GACnB,MAAMC,EAAWnF,KAAK0E,cACtB1E,KAAKa,oBAAoBuE,SAAS,CAChCD,SAAUA,EACVE,SAAUH,EACVI,YAAa,CAAEjB,KAAM,eAEzB,E,iCAxMW,GAAe,2I,mBAAf,EAAe,wB,GAAA,K,KAEf,IAAyB,G,0jBCVpC,0B,gBACE,S,gBACF,S,MAF0B,gDACxB,+E,yBAEF,uC,sBACE,wC,2BASM,qBAA0D,SAAY,S,yBAA9B,uBAAkB,sB,0CA6D5D,SACE,0CACE,oDACE,iDAAW,S,gBAA2B,QACtC,iDAOA,mDAKE,mGACD,QACD,kDAAU,U,iBAAwC,QACpD,mCACA,gEACA,mCACF,iCAEA,sDACE,iDAAW,U,iBAAkC,QAC7C,gDAOA,iDAKE,mGACD,QACH,iCACF,8B,0BAtCiB,0CAaT,6CAEQ,wDAEW,0CAAyB,eAKrC,mDAaT,4C,2BA5FR,SACE,wCACE,4CACE,S,gBACF,QAEA,4CACE,0CACE,kDASF,mCACA,2CACE,kDACE,U,iBACF,QACF,mCACF,iCAEA,8CACE,U,iBACF,QAEA,8CACE,2CACE,kDASF,mCACA,2CACE,kDAA2E,U,iBAEzE,QACJ,mCACF,iCAEA,8CACE,U,iBACF,QACF,+BACA,sCAEA,6DA0CF,8B,sBA7FM,gFAUI,+DAA8C,yEAO9C,yFAMJ,kGAUI,4DAA2C,sEAM8B,iDAO7E,kGAKW,gF,gFArFvB,oBAEE,6DAAY,QAAAX,SAAQ,IAKpB,iCACE,gCAAI,S,gBAA0B,QAChC,wBAEA,kDAGA,8DAKA,qCACE,qCACE,gDACE,+CAA2C,U,iBAAyB,QACpE,4CACE,qDACF,+BACF,6BACF,2BACF,yBACA,mCACE,sCACE,yDAkGA,6CAME,wC,iBACA,wCAAM,U,iBAA4B,QACpC,6BACF,2BACF,yBACF,sB,oCAzIE,oCAA4B,0BAKtB,0CAGgE,0CAKnE,2CAM8C,0CAEnB,0CAOX,oDAqGb,yDAA6C,0CAGT,+CAC9B,4C,ECnHP,MAAM6B,UAAwB,EAKnCrF,YACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAE,EACAC,EACAC,EACAC,EACAC,GAEA0E,MACErF,EACAC,EACAC,EACAC,EACAC,EACAC,EACAiF,OACA/E,EACAC,EACAC,EACAC,EACAC,GA5BJ,KAAA4E,oBAAsB5F,CA8BtB,CAEM4D,S,yCACJ,GAAI1D,KAAK2F,uBAAyB3F,KAAKqB,cAAgBrB,KAAKuB,oBAM1D,YALAvB,KAAKK,qBAAqBsD,UACxB,QACA3D,KAAKI,YAAYwD,EAAE,iBACnB5D,KAAKI,YAAYwD,EAAE,iDAMvB,GADA5D,KAAKiB,WAAW2E,oBACX5F,KAAKiB,WAAW4E,MACnB,OAGF,GAAI7F,KAAKD,iBAMP,YALAC,KAAKK,qBAAqBsD,UACxB,QACA,KACA3D,KAAKI,YAAYwD,EAAE,6CAKI5D,KAAK8D,eAKhC9D,KAAK+C,UACP,G,CAEUK,QACRoC,MAAMpC,QACNpD,KAAKK,qBAAqBsD,UAAU,UAAW,KAAM3D,KAAKI,YAAYwD,EAAE,iBAC1E,CAEQE,aACN,IAAIgC,EAAqB,oBACrB9F,KAAK2F,sBACPG,EAAqB,iCACZ9F,KAAK+F,2BACdD,EAAqB,2BAGvB,MAAME,GAAM,QAA2BhG,KAAKc,cAAe,CACzDoC,KAAM,CACJ4C,mBAAoBA,EACpBG,kBAAmB,cACnBC,WAAY,wBAIhB,GAAW,MAAPF,EAIJ,OAAO,EAAAG,EAAA,GAAeH,EAAII,OAC5B,CAEIT,4BACF,MACkB,mBAAhB3F,KAAKmB,QACLnB,KAAKwB,qBAAuB1B,EAAoByE,aAEpD,CAEIwB,+BACF,MACkB,mBAAhB/F,KAAKmB,QACLnB,KAAKwB,qBAAuB1B,EAAoB2B,gBAEpD,E,iCA1GW8D,GAAe,6H,mBAAfA,EAAe,kvDDtB5B,cACA,wCA6IA,e,MAxIG,oC,uMEFI,MAAMc,EAIXnG,YAAYoG,GAHZ,KAAAC,GAAkB,KAIhBvG,KAAKuG,GAAKD,EAAME,aAClB,CAEAzE,WACE/B,KAAKyG,QAAUC,MAAMC,KACnB3G,KAAKuG,GAAGK,iBAAiB,iDAE3B5G,KAAKyG,QAAQI,SAASC,IACpBA,EAAOC,iBACL,SACA,KACE/G,KAAKuG,GAAGS,UAAUC,IAAI,SAAS,IAEjC,GAGFH,EAAOC,iBACL,QACA,KACE/G,KAAKuG,GAAGS,UAAUE,OAAO,SAAS,IAEpC,EACD,GAEL,CAEmCC,QAAQC,GACzC,MAAMC,EAASD,EAAMC,OACrB,IACEA,IAAWrH,KAAKuG,IACfc,EAAOL,UAAUM,SAAS,aAC1BD,EAAOL,UAAUM,SAAS,kBAKzBtH,KAAKyG,QAAQc,OAAS,EAAG,CAC3B,MAAMT,EAAS9G,KAAKyG,QAAQ,GAC5B,GAAqC,UAAjCK,EAAOU,QAAQC,cAA2B,CAC5C,MAAMC,EAAUZ,EAChB,GAAoB,MAAhBY,EAAQrD,MAA+C,aAA/BqD,EAAQrD,KAAKoD,cAEvC,YADAC,EAAQC,O,CAIZb,EAAOc,O,CAEX,E,iCApDWvB,GAAe,e,mBAAfA,EAAe,gE,kCAAf,YAAe,G,2aCL5B,SACE,yC,gBACE,S,gBACF,QACF,uB,qBAH2B,+CAAApC,QACvB,kG,ECOG,MAAM4D,EAUX3H,YACY4H,EACAC,GADA,KAAAD,oBAAAA,EACA,KAAAC,aAAAA,EAXH,KAAAC,eAAyB,KAElC,KAAAC,MAAO,CAUJ,CAEGlG,W,yCACC/B,KAAK8H,oBAAoBI,qBAG9BlI,KAAKmI,YACoB,MAAvBnI,KAAKgI,eACD,CACE/D,MAAO,kCACPmE,YAAa,iCACbC,gBAAiBrI,KAAK8H,oBAAoBtF,IAAIxC,KAAKgI,gBAAgBrG,MAErE,CACEsC,MAAO,8BACPmE,YAAa,sCACbC,sBAAuBrI,KAAK+H,aAAaO,YAEjDtI,KAAKiI,MAAO,EACd,G,mCAhCWJ,GAA2B,yB,mBAA3BA,EAA2B,4KDTxC,gCAKA,e,KALe,oB","sources":["webpack://@bitwarden/web-vault/../../libs/common/src/tools/enums/encrypted-export-type.enum.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/vault-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/vault-export/export.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.ts"],"sourcesContent":["export enum EncryptedExportType {\n  AccountEncrypted = 0,\n  FileEncrypted = 1,\n}\n","import { Directive, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, startWith, Subject, takeUntil } from \"rxjs\";\n\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { EncryptedExportType } from \"@bitwarden/common/tools/enums/encrypted-export-type.enum\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { PasswordStrengthComponent } from \"../../../shared/components/password-strength/password-strength.component\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n  @ViewChild(PasswordStrengthComponent) passwordStrengthComponent: PasswordStrengthComponent;\n\n  filePasswordValue: string = null;\n  formPromise: Promise<string>;\n  private _disabledByPolicy = false;\n\n  protected get disabledByPolicy(): boolean {\n    return this._disabledByPolicy;\n  }\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: VaultExportServiceAbstraction,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService,\n    protected dialogService: DialogService,\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._disabledByPolicy = policyAppliesToActiveUser;\n        if (this.disabledByPolicy) {\n          this.exportForm.disable();\n        }\n      });\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges,\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\"),\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content:\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \" \" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        acceptButtonText: { key: \"exportVault\" },\n        type: \"warning\",\n      });\n    } else {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content: { key: \"exportWarningDesc\" },\n        acceptButtonText: { key: \"exportVault\" },\n        type: \"warning\",\n      });\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <div class=\"tw-mb-3\">\n            <bit-form-field>\n              <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n              <input\n                bitInput\n                type=\"password\"\n                id=\"filePassword\"\n                formControlName=\"filePassword\"\n                name=\"password\"\n              />\n              <button\n                type=\"button\"\n                bitSuffix\n                bitIconButton\n                bitPasswordInputToggle\n                [(toggled)]=\"showFilePassword\"\n              ></button>\n              <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n            </bit-form-field>\n            <app-password-strength [password]=\"filePassword\" [showText]=\"true\">\n            </app-password-strength>\n          </div>\n\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/tools/export/components/export.component\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { EncryptedExportType } from \"@bitwarden/common/tools/enums/encrypted-export-type.enum\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { openUserVerificationPrompt } from \"../../auth/shared/components/user-verification\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: VaultExportServiceAbstraction,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    dialogService: DialogService,\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService,\n      dialogService,\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\"),\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\"),\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = openUserVerificationPrompt(this.dialogService, {\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return firstValueFrom(ref.closed);\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea'),\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false,\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false,\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n: scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService,\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDesc\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingIndividualVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n"],"names":["EncryptedExportType","disabledByPolicy","this","_disabledByPolicy","constructor","cryptoService","i18nService","platformUtilsService","exportService","eventCollectionService","policyService","win","logService","userVerificationService","formBuilder","fileDownloadService","dialogService","onSaved","filePasswordValue","exportForm","group","format","secret","filePassword","required","confirmFilePassword","fileEncryptionType","AccountEncrypted","formatOptions","name","value","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","DisablePersonalVaultExport","pipe","takeUntil","subscribe","policyAppliesToActiveUser","disable","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","encryptedFormat","doExport","formPromise","getExportData","data","downloadFile","saved","collectEvent","setValue","clearValidators","e","error","submit","showToast","t","warningDialog","verifyUser","message","openSimpleDialog","title","key","content","acceptButtonText","type","emit","FileEncrypted","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","User_ClientExportedVault","reset","controls","enable","csv","fileName","download","blobData","blobOptions","ExportComponent","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","confirmDescription","isAccountEncryptedExport","ref","confirmButtonText","modalTitle","firstValueFrom","closed","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","event","target","contains","length","tagName","toLowerCase","inputEl","click","focus","ExportScopeCalloutComponent","organizationService","stateService","organizationId","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail"],"sourceRoot":""}