{"version":3,"file":"314.c0474222adf8fd591a1e.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/guards/org-redirect.guard.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/group-add-edit.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/group-add-edit.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/groups.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/groups.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/collection-access-restricted.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.service.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.module.ts","webpack://@bitwarden/web-vault/./src/app/vault/individual-vault/attachments.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/attachments.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/bulk-collections-dialog/bulk-collections-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/bulk-collections-dialog/bulk-collections-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/vault/individual-vault/collections.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/collections.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/individual-vault/vault-filter/components/vault-filter.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-header/vault-header.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-header/vault-header.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-routing.module.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/organization-routing.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/organization.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/shared-organization.module.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from \"@angular/router\";\n\nimport {\n  canAccessOrgAdmin,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class OrganizationRedirectGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private organizationService: OrganizationService,\n  ) {}\n\n  async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const org = this.organizationService.get(route.params.organizationId);\n\n    const customRedirect = route.data?.autoRedirectCallback;\n    if (customRedirect) {\n      let redirectPath = customRedirect(org);\n      if (typeof redirectPath === \"string\") {\n        redirectPath = [redirectPath];\n      }\n      return this.router.createUrlTree([state.url, ...redirectPath]);\n    }\n\n    if (canAccessOrgAdmin(org)) {\n      return this.router.createUrlTree([\"/organizations\", org.id]);\n    }\n    return this.router.createUrlTree([\"/\"]);\n  }\n}\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { ChangeDetectorRef, Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { catchError, combineLatest, from, map, of, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { ConfigServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { CollectionData } from \"@bitwarden/common/vault/models/data/collection.data\";\nimport { Collection } from \"@bitwarden/common/vault/models/domain/collection\";\nimport { CollectionDetailsResponse } from \"@bitwarden/common/vault/models/response/collection.response\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { InternalGroupService as GroupService, GroupView } from \"../core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  convertToPermission,\n  convertToSelectionView,\n  PermissionMode,\n} from \"../shared/components/access-selector\";\n\n/**\n * Indices for the available tabs in the dialog\n */\nexport enum GroupAddEditTabType {\n  Info = 0,\n  Members = 1,\n  Collections = 2,\n}\n\nexport interface GroupAddEditDialogParams {\n  /**\n   * ID of the organization the group belongs to\n   */\n  organizationId: string;\n\n  /**\n   * Optional ID of the group being modified\n   */\n  groupId?: string;\n\n  /**\n   * Tab to open when the dialog is open.\n   * Defaults to Group Info\n   */\n  initialTab?: GroupAddEditTabType;\n}\n\nexport enum GroupAddEditDialogResultType {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n  Deleted = \"deleted\",\n}\n\n/**\n * Strongly typed helper to open a groupAddEditDialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Configuration for the dialog\n */\nexport const openGroupAddEditDialog = (\n  dialogService: DialogService,\n  config: DialogConfig<GroupAddEditDialogParams>,\n) => {\n  return dialogService.open<GroupAddEditDialogResultType, GroupAddEditDialogParams>(\n    GroupAddEditComponent,\n    config,\n  );\n};\n\n@Component({\n  selector: \"app-group-add-edit\",\n  templateUrl: \"group-add-edit.component.html\",\n})\nexport class GroupAddEditComponent implements OnInit, OnDestroy {\n  protected flexibleCollectionsEnabled$ = this.configService.getFeatureFlag$(\n    FeatureFlag.FlexibleCollections,\n    false,\n  );\n\n  protected PermissionMode = PermissionMode;\n  protected ResultType = GroupAddEditDialogResultType;\n\n  tabIndex: GroupAddEditTabType;\n  loading = true;\n  editMode = false;\n  title: string;\n  collections: AccessItemView[] = [];\n  members: AccessItemView[] = [];\n  group: GroupView;\n\n  groupForm = this.formBuilder.group({\n    accessAll: [false],\n    name: [\"\", [Validators.required, Validators.maxLength(100)]],\n    externalId: this.formBuilder.control({ value: \"\", disabled: true }),\n    members: [[] as AccessItemValue[]],\n    collections: [[] as AccessItemValue[]],\n  });\n\n  get groupId(): string | undefined {\n    return this.params.groupId;\n  }\n\n  get organizationId(): string {\n    return this.params.organizationId;\n  }\n\n  private destroy$ = new Subject<void>();\n\n  private get orgCollections$() {\n    return from(this.apiService.getCollections(this.organizationId)).pipe(\n      switchMap((response) => {\n        return from(\n          this.collectionService.decryptMany(\n            response.data.map(\n              (r) => new Collection(new CollectionData(r as CollectionDetailsResponse)),\n            ),\n          ),\n        );\n      }),\n      map((collections) =>\n        collections.map<AccessItemView>((c) => ({\n          id: c.id,\n          type: AccessItemType.Collection,\n          labelName: c.name,\n          listName: c.name,\n        })),\n      ),\n    );\n  }\n\n  private get orgMembers$() {\n    return from(this.organizationUserService.getAllUsers(this.organizationId)).pipe(\n      map((response) =>\n        response.data.map((m) => ({\n          id: m.id,\n          type: AccessItemType.Member,\n          email: m.email,\n          role: m.type,\n          listName: m.name?.length > 0 ? `${m.name} (${m.email})` : m.email,\n          labelName: m.name || m.email,\n          status: m.status,\n        })),\n      ),\n    );\n  }\n\n  private get groupDetails$() {\n    if (!this.editMode) {\n      return of(undefined);\n    }\n\n    return combineLatest([\n      this.groupService.get(this.organizationId, this.groupId),\n      this.apiService.getGroupUsers(this.organizationId, this.groupId),\n    ]).pipe(\n      map(([groupView, users]) => {\n        groupView.members = users;\n        return groupView;\n      }),\n      catchError((e: unknown) => {\n        if (e instanceof ErrorResponse) {\n          this.logService.error(e.message);\n        } else {\n          this.logService.error(e.toString());\n        }\n        return of(undefined);\n      }),\n    );\n  }\n\n  constructor(\n    @Inject(DIALOG_DATA) private params: GroupAddEditDialogParams,\n    private dialogRef: DialogRef<GroupAddEditDialogResultType>,\n    private apiService: ApiService,\n    private organizationUserService: OrganizationUserService,\n    private groupService: GroupService,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private platformUtilsService: PlatformUtilsService,\n    private logService: LogService,\n    private formBuilder: FormBuilder,\n    private changeDetectorRef: ChangeDetectorRef,\n    private dialogService: DialogService,\n    private configService: ConfigServiceAbstraction,\n  ) {\n    this.tabIndex = params.initialTab ?? GroupAddEditTabType.Info;\n  }\n\n  ngOnInit() {\n    this.editMode = this.loading = this.groupId != null;\n    this.title = this.i18nService.t(this.editMode ? \"editGroup\" : \"newGroup\");\n\n    combineLatest([this.orgCollections$, this.orgMembers$, this.groupDetails$])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([collections, members, group]) => {\n        this.collections = collections;\n        this.members = members;\n        this.group = group;\n\n        if (this.group != undefined) {\n          // Must detect changes so that AccessSelector @Inputs() are aware of the latest\n          // collections/members set above, otherwise no selected values will be patched below\n          this.changeDetectorRef.detectChanges();\n\n          this.groupForm.patchValue({\n            name: this.group.name,\n            externalId: this.group.externalId,\n            accessAll: this.group.accessAll,\n            members: this.group.members.map((m) => ({\n              id: m,\n              type: AccessItemType.Member,\n            })),\n            collections: this.group.collections.map((gc) => ({\n              id: gc.id,\n              type: AccessItemType.Collection,\n              permission: convertToPermission(gc),\n            })),\n          });\n        }\n\n        this.loading = false;\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.groupForm.markAllAsTouched();\n\n    if (this.groupForm.invalid) {\n      if (this.tabIndex !== GroupAddEditTabType.Info) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          null,\n          this.i18nService.t(\"fieldOnTabRequiresAttention\", this.i18nService.t(\"groupInfo\")),\n        );\n      }\n      return;\n    }\n\n    const groupView = new GroupView();\n    groupView.id = this.groupId;\n    groupView.organizationId = this.organizationId;\n\n    const formValue = this.groupForm.value;\n    groupView.name = formValue.name;\n    groupView.accessAll = formValue.accessAll;\n    groupView.members = formValue.members?.map((m) => m.id) ?? [];\n\n    if (!groupView.accessAll) {\n      groupView.collections = formValue.collections.map((c) => convertToSelectionView(c));\n    }\n\n    await this.groupService.save(groupView);\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(this.editMode ? \"editedGroupId\" : \"createdGroupId\", formValue.name),\n    );\n\n    this.dialogRef.close(GroupAddEditDialogResultType.Saved);\n  };\n\n  delete = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: this.group.name,\n      content: { key: \"deleteGroupConfirmation\" },\n      type: \"warning\",\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    await this.groupService.delete(this.organizationId, this.groupId);\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"deletedGroupId\", this.group.name),\n    );\n    this.dialogRef.close(GroupAddEditDialogResultType.Deleted);\n  };\n}\n","<form [formGroup]=\"groupForm\" [bitSubmit]=\"submit\">\n  <bit-dialog [disablePadding]=\"!loading\" dialogSize=\"large\">\n    <span bitDialogTitle>\n      {{ title }}\n      <span *ngIf=\"editMode\" class=\"tw-text-sm tw-normal-case tw-text-muted\">{{\n        group?.name\n      }}</span>\n    </span>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\">\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n      </div>\n\n      <bit-tab-group *ngIf=\"!loading\" [(selectedIndex)]=\"tabIndex\">\n        <bit-tab label=\"{{ 'groupInfo' | i18n }}\">\n          <bit-form-field>\n            <bit-label>{{ \"name\" | i18n }}</bit-label>\n            <input bitInput appAutofocus type=\"text\" formControlName=\"name\" />\n            <bit-hint>{{ \"characterMaximum\" | i18n: 100 }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"externalId\" | i18n }}</bit-label>\n            <input bitInput type=\"text\" formControlName=\"externalId\" />\n            <bit-hint>{{ \"externalIdDesc\" | i18n }}</bit-hint>\n          </bit-form-field>\n        </bit-tab>\n\n        <bit-tab label=\"{{ 'members' | i18n }}\">\n          <p>{{ \"editGroupMembersDesc\" | i18n }}</p>\n          <bit-access-selector\n            formControlName=\"members\"\n            [items]=\"members\"\n            [showMemberRoles]=\"true\"\n            [permissionMode]=\"PermissionMode.Hidden\"\n            [columnHeader]=\"'member' | i18n\"\n            [selectorLabelText]=\"'selectMembers' | i18n\"\n            [emptySelectionText]=\"'noMembersAdded' | i18n\"\n            [flexibleCollectionsEnabled]=\"flexibleCollectionsEnabled$ | async\"\n          ></bit-access-selector>\n        </bit-tab>\n\n        <bit-tab label=\"{{ 'collections' | i18n }}\">\n          <p>{{ \"editGroupCollectionsDesc\" | i18n }}</p>\n          <div class=\"tw-my-3\">\n            <input type=\"checkbox\" formControlName=\"accessAll\" id=\"accessAll\" />\n            <label class=\"tw-mb-0 tw-text-lg\" for=\"accessAll\">{{\n              \"accessAllCollectionsDesc\" | i18n\n            }}</label>\n            <p class=\"tw-my-0 tw-text-muted\">{{ \"accessAllCollectionsHelp\" | i18n }}</p>\n          </div>\n          <ng-container *ngIf=\"!groupForm.value.accessAll\">\n            <bit-access-selector\n              formControlName=\"collections\"\n              [items]=\"collections\"\n              [permissionMode]=\"PermissionMode.Edit\"\n              [columnHeader]=\"'collection' | i18n\"\n              [selectorLabelText]=\"'selectCollections' | i18n\"\n              [emptySelectionText]=\"'noCollectionsAdded' | i18n\"\n              [flexibleCollectionsEnabled]=\"flexibleCollectionsEnabled$ | async\"\n            ></bit-access-selector>\n          </ng-container>\n        </bit-tab>\n      </bit-tab-group>\n    </div>\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" bitFormButton type=\"submit\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button bitButton buttonType=\"secondary\" type=\"button\" [bitDialogClose]=\"ResultType.Canceled\">\n        {{ \"cancel\" | i18n }}\n      </button>\n      <button\n        class=\"tw-ml-auto\"\n        type=\"button\"\n        buttonType=\"danger\"\n        bitIconButton=\"bwi-trash\"\n        bitFormButton\n        [bitAction]=\"delete\"\n        [appA11yTitle]=\"'delete' | i18n\"\n      ></button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<div class=\"container page-content\">\n  <div class=\"tw-mb-4 tw-flex\">\n    <h1>{{ \"groups\" | i18n }}</h1>\n    <div class=\"tw-ml-auto tw-flex tw-items-center\">\n      <div class=\"tw-mr-2\">\n        <label class=\"sr-only\">{{ \"search\" | i18n }}</label>\n        <div class=\"tw-flex tw-items-center\">\n          <i class=\"bwi bwi-search bwi-fw tw-z-20 -tw-mr-7 tw-text-muted\" aria-hidden=\"true\"></i>\n          <input\n            bitInput\n            type=\"search\"\n            placeholder=\"{{ 'searchGroups' | i18n }}\"\n            class=\"tw-rounded-l tw-pl-9\"\n            [(ngModel)]=\"searchText\"\n          />\n        </div>\n      </div>\n      <button bitButton type=\"button\" buttonType=\"primary\" (click)=\"add()\">\n        <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n        {{ \"newGroup\" | i18n }}\n      </button>\n    </div>\n  </div>\n  <ng-container *ngIf=\"loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n  </ng-container>\n  <ng-container *ngIf=\"!loading && visibleGroups\">\n    <p *ngIf=\"!visibleGroups.length\">{{ \"noGroupsInList\" | i18n }}</p>\n    <bit-table\n      *ngIf=\"visibleGroups.length\"\n      infinite-scroll\n      [infiniteScrollDistance]=\"1\"\n      [infiniteScrollDisabled]=\"!isPaging()\"\n      (scrolled)=\"loadMore()\"\n    >\n      <ng-container header>\n        <tr>\n          <th bitCell class=\"tw-w-20\">\n            <input\n              type=\"checkbox\"\n              bitCheckbox\n              class=\"tw-mr-2\"\n              (change)=\"toggleAllVisible($event)\"\n              id=\"selectAll\"\n            />\n            <label class=\"tw-mb-0 !tw-font-bold !tw-text-muted\" for=\"selectAll\">{{\n              \"all\" | i18n\n            }}</label>\n          </th>\n          <th bitCell>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"collections\" | i18n }}</th>\n          <th bitCell class=\"tw-w-10\">\n            <button\n              [bitMenuTriggerFor]=\"headerMenu\"\n              type=\"button\"\n              bitIconButton=\"bwi-ellipsis-v\"\n              size=\"small\"\n              appA11yTitle=\"{{ 'options' | i18n }}\"\n            ></button>\n\n            <bit-menu #headerMenu>\n              <button type=\"button\" bitMenuItem (click)=\"deleteAllSelected()\">\n                <span class=\"tw-text-danger\"\n                  ><i aria-hidden=\"true\" class=\"bwi bwi-trash\"></i> {{ \"delete\" | i18n }}</span\n                >\n              </button>\n            </bit-menu>\n          </th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let g of visibleGroups\">\n          <td bitCell (click)=\"check(g)\" class=\"tw-cursor-pointer\">\n            <input type=\"checkbox\" bitCheckbox [(ngModel)]=\"g.checked\" />\n          </td>\n          <td bitCell class=\"tw-cursor-pointer tw-font-bold\" (click)=\"edit(g)\">\n            <button type=\"button\" bitLink>\n              {{ g.details.name }}\n            </button>\n          </td>\n          <td bitCell (click)=\"edit(g, ModalTabType.Collections)\" class=\"tw-cursor-pointer\">\n            <bit-badge-list\n              *ngIf=\"!g.details.accessAll\"\n              [items]=\"g.collectionNames\"\n              [maxItems]=\"3\"\n              badgeType=\"secondary\"\n            ></bit-badge-list>\n            <span *ngIf=\"g.details.accessAll\">{{ \"all\" | i18n }}</span>\n          </td>\n          <td bitCell>\n            <button\n              [bitMenuTriggerFor]=\"rowMenu\"\n              type=\"button\"\n              bitIconButton=\"bwi-ellipsis-v\"\n              size=\"small\"\n              appA11yTitle=\"{{ 'options' | i18n }}\"\n            ></button>\n\n            <bit-menu #rowMenu>\n              <button type=\"button\" bitMenuItem (click)=\"edit(g)\">\n                <i aria-hidden=\"true\" class=\"bwi bwi-pencil-square\"></i> {{ \"editInfo\" | i18n }}\n              </button>\n              <button type=\"button\" bitMenuItem (click)=\"edit(g, ModalTabType.Members)\">\n                <i aria-hidden=\"true\" class=\"bwi bwi-user\"></i> {{ \"members\" | i18n }}\n              </button>\n              <button type=\"button\" bitMenuItem (click)=\"edit(g, ModalTabType.Collections)\">\n                <i aria-hidden=\"true\" class=\"bwi bwi-collection\"></i> {{ \"collections\" | i18n }}\n              </button>\n              <button type=\"button\" bitMenuItem (click)=\"delete(g)\">\n                <span class=\"tw-text-danger\"\n                  ><i aria-hidden=\"true\" class=\"bwi bwi-trash\"></i> {{ \"delete\" | i18n }}</span\n                >\n              </button>\n            </bit-menu>\n          </td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </ng-container>\n  <ng-template #addEdit></ng-template>\n</div>\n","import { Component, OnDestroy, OnInit, ViewChild, ViewContainerRef } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concatMap,\n  from,\n  lastValueFrom,\n  map,\n  Subject,\n  switchMap,\n  takeUntil,\n  tap,\n} from \"rxjs\";\nimport { first } from \"rxjs/operators\";\n\nimport { SearchPipe } from \"@bitwarden/angular/pipes/search.pipe\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { SearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { CollectionData } from \"@bitwarden/common/vault/models/data/collection.data\";\nimport { Collection } from \"@bitwarden/common/vault/models/domain/collection\";\nimport {\n  CollectionDetailsResponse,\n  CollectionResponse,\n} from \"@bitwarden/common/vault/models/response/collection.response\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { InternalGroupService as GroupService, GroupView } from \"../core\";\n\nimport {\n  GroupAddEditDialogResultType,\n  GroupAddEditTabType,\n  openGroupAddEditDialog,\n} from \"./group-add-edit.component\";\n\ntype CollectionViewMap = {\n  [id: string]: CollectionView;\n};\n\ntype GroupDetailsRow = {\n  /**\n   * Group Id (used for searching)\n   */\n  id: string;\n\n  /**\n   * Group name (used for searching)\n   */\n  name: string;\n\n  /**\n   * Details used for displaying group information\n   */\n  details: GroupView;\n\n  /**\n   * True if the group is selected in the table\n   */\n  checked?: boolean;\n\n  /**\n   * A list of collection names the group has access to\n   */\n  collectionNames?: string[];\n};\n\n@Component({\n  selector: \"app-org-groups\",\n  templateUrl: \"groups.component.html\",\n})\nexport class GroupsComponent implements OnInit, OnDestroy {\n  @ViewChild(\"addEdit\", { read: ViewContainerRef, static: true }) addEditModalRef: ViewContainerRef;\n  @ViewChild(\"usersTemplate\", { read: ViewContainerRef, static: true })\n  usersModalRef: ViewContainerRef;\n\n  loading = true;\n  organizationId: string;\n  groups: GroupDetailsRow[];\n\n  protected didScroll = false;\n  protected pageSize = 100;\n  protected ModalTabType = GroupAddEditTabType;\n\n  private pagedGroupsCount = 0;\n  private pagedGroups: GroupDetailsRow[];\n  private searchedGroups: GroupDetailsRow[];\n  private _searchText: string;\n  private destroy$ = new Subject<void>();\n  private refreshGroups$ = new BehaviorSubject<void>(null);\n\n  get searchText() {\n    return this._searchText;\n  }\n  set searchText(value: string) {\n    this._searchText = value;\n    // Manually update as we are not using the search pipe in the template\n    this.updateSearchedGroups();\n  }\n\n  /**\n   * The list of groups that should be visible in the table.\n   * This is needed as there are two modes (paging/searching) and\n   * we need a reference to the currently visible groups for\n   * the Select All checkbox\n   */\n  get visibleGroups(): GroupDetailsRow[] {\n    if (this.isPaging()) {\n      return this.pagedGroups;\n    }\n    if (this.isSearching()) {\n      return this.searchedGroups;\n    }\n    return this.groups;\n  }\n\n  constructor(\n    private apiService: ApiService,\n    private groupService: GroupService,\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private dialogService: DialogService,\n    private platformUtilsService: PlatformUtilsService,\n    private searchService: SearchService,\n    private logService: LogService,\n    private collectionService: CollectionService,\n    private searchPipe: SearchPipe,\n  ) {}\n\n  async ngOnInit() {\n    this.route.params\n      .pipe(\n        tap((params) => (this.organizationId = params.organizationId)),\n        switchMap(() =>\n          combineLatest([\n            // collectionMap\n            from(this.apiService.getCollections(this.organizationId)).pipe(\n              concatMap((response) => this.toCollectionMap(response)),\n            ),\n            // groups\n            this.refreshGroups$.pipe(\n              switchMap(() => this.groupService.getAll(this.organizationId)),\n            ),\n          ]),\n        ),\n        map(([collectionMap, groups]) => {\n          return groups\n            .sort(Utils.getSortFunction(this.i18nService, \"name\"))\n            .map<GroupDetailsRow>((g) => ({\n              id: g.id,\n              name: g.name,\n              details: g,\n              checked: false,\n              collectionNames: g.collections\n                .map((c) => collectionMap[c.id]?.name)\n                .sort(this.i18nService.collator?.compare),\n            }));\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((groups) => {\n        this.groups = groups;\n        this.resetPaging();\n        this.updateSearchedGroups();\n        this.loading = false;\n      });\n\n    this.route.queryParams\n      .pipe(\n        first(),\n        concatMap(async (qParams) => {\n          this.searchText = qParams.search;\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  loadMore() {\n    if (!this.groups || this.groups.length <= this.pageSize) {\n      return;\n    }\n    const pagedLength = this.pagedGroups.length;\n    let pagedSize = this.pageSize;\n    if (pagedLength === 0 && this.pagedGroupsCount > this.pageSize) {\n      pagedSize = this.pagedGroupsCount;\n    }\n    if (this.groups.length > pagedLength) {\n      this.pagedGroups = this.pagedGroups.concat(\n        this.groups.slice(pagedLength, pagedLength + pagedSize),\n      );\n    }\n    this.pagedGroupsCount = this.pagedGroups.length;\n    this.didScroll = this.pagedGroups.length > this.pageSize;\n  }\n\n  async edit(\n    group: GroupDetailsRow,\n    startingTabIndex: GroupAddEditTabType = GroupAddEditTabType.Info,\n  ) {\n    const dialogRef = openGroupAddEditDialog(this.dialogService, {\n      data: {\n        initialTab: startingTabIndex,\n        organizationId: this.organizationId,\n        groupId: group != null ? group.details.id : null,\n      },\n    });\n\n    const result = await lastValueFrom(dialogRef.closed);\n\n    if (result == GroupAddEditDialogResultType.Saved) {\n      this.refreshGroups$.next();\n    } else if (result == GroupAddEditDialogResultType.Deleted) {\n      this.removeGroup(group.details.id);\n    }\n  }\n\n  add() {\n    this.edit(null);\n  }\n\n  async delete(groupRow: GroupDetailsRow) {\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: groupRow.details.name,\n      content: { key: \"deleteGroupConfirmation\" },\n      type: \"warning\",\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.groupService.delete(this.organizationId, groupRow.details.id);\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"deletedGroupId\", groupRow.details.name),\n      );\n      this.removeGroup(groupRow.details.id);\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async deleteAllSelected() {\n    const groupsToDelete = this.groups.filter((g) => g.checked);\n\n    if (groupsToDelete.length == 0) {\n      return;\n    }\n\n    const deleteMessage = groupsToDelete.map((g) => g.details.name).join(\", \");\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: {\n        key: \"deleteMultipleGroupsConfirmation\",\n        placeholders: [groupsToDelete.length.toString()],\n      },\n      content: deleteMessage,\n      type: \"warning\",\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.groupService.deleteMany(\n        this.organizationId,\n        groupsToDelete.map((g) => g.details.id),\n      );\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"deletedManyGroups\", groupsToDelete.length.toString()),\n      );\n\n      groupsToDelete.forEach((g) => this.removeGroup(g.details.id));\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  resetPaging() {\n    this.pagedGroups = [];\n    this.loadMore();\n  }\n\n  isSearching() {\n    return this.searchService.isSearchable(this.searchText);\n  }\n\n  check(groupRow: GroupDetailsRow) {\n    groupRow.checked = !groupRow.checked;\n  }\n\n  toggleAllVisible(event: Event) {\n    this.visibleGroups.forEach((g) => (g.checked = (event.target as HTMLInputElement).checked));\n  }\n\n  isPaging() {\n    const searching = this.isSearching();\n    if (searching && this.didScroll) {\n      this.resetPaging();\n    }\n    return !searching && this.groups && this.groups.length > this.pageSize;\n  }\n\n  private removeGroup(id: string) {\n    const index = this.groups.findIndex((g) => g.details.id === id);\n    if (index > -1) {\n      this.groups.splice(index, 1);\n      this.resetPaging();\n      this.updateSearchedGroups();\n    }\n  }\n\n  private async toCollectionMap(response: ListResponse<CollectionResponse>) {\n    const collections = response.data.map(\n      (r) => new Collection(new CollectionData(r as CollectionDetailsResponse)),\n    );\n    const decryptedCollections = await this.collectionService.decryptMany(collections);\n\n    // Convert to an object using collection Ids as keys for faster name lookups\n    const collectionMap: CollectionViewMap = {};\n    decryptedCollections.forEach((c) => (collectionMap[c.id] = c));\n\n    return collectionMap;\n  }\n\n  private updateSearchedGroups() {\n    if (this.searchService.isSearchable(this.searchText)) {\n      // Making use of the pipe in the component as we need know which groups where filtered\n      this.searchedGroups = this.searchPipe.transform(\n        this.groups,\n        this.searchText,\n        (group) => group.details.name,\n        (group) => group.details.id,\n      );\n    }\n  }\n}\n","import { Component, EventEmitter, Output } from \"@angular/core\";\n\nimport { ButtonModule, NoItemsModule, svgIcon } from \"@bitwarden/components\";\n\nimport { SharedModule } from \"../../shared\";\n\nconst icon = svgIcon`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"140\" height=\"121\" fill=\"none\">\n  <rect class=\"tw-stroke-secondary-500\" width=\"134\" height=\"86\" x=\"3\" y=\"31.485\" stroke-width=\"6\" rx=\"11\"/>\n  <path class=\"tw-fill-secondary-500\" d=\"M123.987 20.15H14.779a3.114 3.114 0 0 1-2.083-.95 3.036 3.036 0 0 1 0-4.208 3.125 3.125 0 0 1 2.083-.951h109.208c.792.043 1.536.38 2.083.95a3.035 3.035 0 0 1 0 4.208 3.115 3.115 0 0 1-2.083.95Zm-6.649-14.041h-95.91a3.114 3.114 0 0 1-2.082-.95 3.036 3.036 0 0 1-.848-2.105c0-.782.306-1.538.848-2.104A3.125 3.125 0 0 1 21.43 0h95.909c.791.043 1.535.38 2.082.95.547.57.849 1.322.849 2.104a3.05 3.05 0 0 1-.849 2.104 3.115 3.115 0 0 1-2.082.95ZM95.132 74.407A42.317 42.317 0 0 0 83.59 65.43l8.799-8.657a1.59 1.59 0 0 0 .004-2.27 1.641 1.641 0 0 0-2.298-.004l-9.64 9.479a28.017 28.017 0 0 0-10.483-2.13c-14.323 0-24.814 12.342-25.298 12.89a2.431 2.431 0 0 0-.675 1.64c-.01.612.215 1.203.626 1.66a43.981 43.981 0 0 0 11.873 9.485l-8.806 8.658a1.601 1.601 0 0 0-.499 1.138 1.602 1.602 0 0 0 1.008 1.5 1.651 1.651 0 0 0 1.255-.009c.199-.085.379-.205.528-.359l9.634-9.443a27.16 27.16 0 0 0 10.359 2.158c14.323 0 24.753-12.086 25.23-12.63a2.983 2.983 0 0 0-.078-4.128h.002ZM49.204 77.82a1.82 1.82 0 0 1-.43-.6 1.767 1.767 0 0 1-.152-.72 1.778 1.778 0 0 1 .582-1.32c3.857-3.564 11.782-9.686 20.77-9.676 2.564.037 5.105.508 7.508 1.395l-3.291 3.235a7.793 7.793 0 0 0-5.02-1.226 7.746 7.746 0 0 0-4.676 2.18 7.528 7.528 0 0 0-1 9.563l-4.199 4.143a43.135 43.135 0 0 1-10.092-6.974Zm26.059-1.318a5.19 5.19 0 0 1-1.557 3.68 5.326 5.326 0 0 1-3.733 1.521c-.82-.005-1.63-.2-2.359-.57l7.067-6.952c.377.718.575 1.513.582 2.321Zm-10.58 0a5.136 5.136 0 0 1 .673-2.555 5.204 5.204 0 0 1 1.862-1.897 5.302 5.302 0 0 1 5.172-.146l-7.096 6.977a5.06 5.06 0 0 1-.61-2.379Zm26.053 1.331c-3.857 3.56-11.779 9.677-20.763 9.677a22.723 22.723 0 0 1-7.454-1.369l3.292-3.226a7.793 7.793 0 0 0 4.995 1.192 7.734 7.734 0 0 0 4.642-2.176 7.524 7.524 0 0 0 1.033-9.506l4.224-4.168a43.258 43.258 0 0 1 10.02 6.945 1.788 1.788 0 0 1 .585 1.313 1.788 1.788 0 0 1-.577 1.318h.003Z\"/>\n</svg>`;\n\n@Component({\n  selector: \"collection-access-restricted\",\n  standalone: true,\n  imports: [SharedModule, ButtonModule, NoItemsModule],\n  template: `<bit-no-items [icon]=\"icon\">\n    <span slot=\"title\" class=\"tw-mt-4 tw-block\">{{ \"collectionAccessRestricted\" | i18n }}</span>\n    <button\n      slot=\"button\"\n      bitButton\n      (click)=\"editInfoClicked.emit()\"\n      buttonType=\"secondary\"\n      type=\"button\"\n    >\n      <i aria-hidden=\"true\" class=\"bwi bwi-pencil-square\"></i> {{ \"editInfo\" | i18n }}\n    </button>\n  </bit-no-items>`,\n})\nexport class CollectionAccessRestrictedComponent {\n  protected icon = icon;\n\n  @Output() editInfoClicked = new EventEmitter<void>();\n}\n","import { Injectable, OnDestroy } from \"@angular/core\";\nimport { map, Observable, ReplaySubject, Subject } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\n\nimport { StateService } from \"../../../core\";\nimport { CollectionAdminView } from \"../../../vault/core/views/collection-admin.view\";\nimport { CollectionAdminService } from \"../../core/collection-admin.service\";\nimport { VaultFilterService as BaseVaultFilterService } from \"../../individual-vault/vault-filter/services/vault-filter.service\";\nimport { CollectionFilter } from \"../../individual-vault/vault-filter/shared/models/vault-filter.type\";\n\n@Injectable()\nexport class VaultFilterService extends BaseVaultFilterService implements OnDestroy {\n  private destroy$ = new Subject<void>();\n  private _collections = new ReplaySubject<CollectionAdminView[]>(1);\n\n  filteredCollections$: Observable<CollectionAdminView[]> = this._collections.asObservable();\n\n  collectionTree$: Observable<TreeNode<CollectionFilter>> = this.filteredCollections$.pipe(\n    map((collections) => this.buildCollectionTree(collections)),\n  );\n\n  constructor(\n    stateService: StateService,\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    policyService: PolicyService,\n    i18nService: I18nService,\n    protected collectionAdminService: CollectionAdminService,\n  ) {\n    super(\n      stateService,\n      organizationService,\n      folderService,\n      cipherService,\n      policyService,\n      i18nService,\n    );\n  }\n\n  async reloadCollections(collections: CollectionAdminView[]) {\n    this._collections.next(collections);\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { VaultFilterService as VaultFilterServiceAbstraction } from \"../../individual-vault/vault-filter/services/abstractions/vault-filter.service\";\nimport { VaultFilterSharedModule } from \"../../individual-vault/vault-filter/shared/vault-filter-shared.module\";\n\nimport { VaultFilterComponent } from \"./vault-filter.component\";\nimport { VaultFilterService } from \"./vault-filter.service\";\n\n@NgModule({\n  imports: [VaultFilterSharedModule],\n  declarations: [VaultFilterComponent],\n  exports: [VaultFilterComponent],\n  providers: [\n    {\n      provide: VaultFilterServiceAbstraction,\n      useClass: VaultFilterService,\n    },\n  ],\n})\nexport class VaultFilterModule {}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"attachmentsTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form\n      class=\"modal-content\"\n      #form\n      (ngSubmit)=\"submit()\"\n      [appApiAction]=\"formPromise\"\n      ngNativeValidate\n    >\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"attachmentsTitle\">\n          {{ \"attachments\" | i18n }}\n          <small *ngIf=\"cipher\">{{ cipher.name }}</small>\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <table class=\"table table-hover table-list\" *ngIf=\"cipher && cipher.hasAttachments\">\n          <tbody>\n            <tr *ngFor=\"let a of cipher.attachments\">\n              <td class=\"table-list-icon\">\n                <i\n                  class=\"bwi bwi-fw bwi-lg bwi-file\"\n                  *ngIf=\"!$any(a).downloading\"\n                  aria-hidden=\"true\"\n                ></i>\n                <i\n                  class=\"bwi bwi-spinner bwi-lg bwi-fw bwi-spin\"\n                  *ngIf=\"$any(a).downloading\"\n                  aria-hidden=\"true\"\n                ></i>\n              </td>\n              <td class=\"wrap\">\n                <div class=\"d-flex\">\n                  <a href=\"#\" appStopClick (click)=\"download(a)\">{{ a.fileName }}</a>\n                  <div *ngIf=\"showFixOldAttachments(a)\" class=\"ml-2\">\n                    <a\n                      href=\"https://bitwarden.com/help/attachments/#fixing-old-attachments\"\n                      target=\"_blank\"\n                      rel=\"noopener\"\n                    >\n                      <i\n                        class=\"bwi bwi-exclamation-triangle text-warning\"\n                        title=\"{{ 'attachmentFixDescription' | i18n }}\"\n                        aria-hidden=\"true\"\n                      ></i>\n                      <span class=\"sr-only\">{{ \"attachmentFixDescription\" | i18n }}</span></a\n                    >\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-outline-primary btn-sm m-0 py-0 px-2\"\n                      (click)=\"reupload(a)\"\n                      #reuploadBtn\n                      [appApiAction]=\"reuploadPromises[a.id]\"\n                      [disabled]=\"$any(reuploadBtn).loading\"\n                    >\n                      {{ \"fix\" | i18n }}\n                    </button>\n                  </div>\n                </div>\n                <small>{{ a.sizeName }}</small>\n              </td>\n              <td class=\"table-list-options\" *ngIf=\"!viewOnly\">\n                <button\n                  class=\"btn btn-outline-danger\"\n                  type=\"button\"\n                  appStopClick\n                  appA11yTitle=\"{{ 'delete' | i18n }}\"\n                  (click)=\"delete(a)\"\n                  #deleteBtn\n                  [appApiAction]=\"deletePromises[a.id]\"\n                  [disabled]=\"$any(deleteBtn).loading\"\n                >\n                  <i\n                    class=\"bwi bwi-trash bwi-lg bwi-fw\"\n                    [hidden]=\"$any(deleteBtn).loading\"\n                    aria-hidden=\"true\"\n                  ></i>\n                  <i\n                    class=\"bwi bwi-spinner bwi-spin bwi-lg bwi-fw\"\n                    [hidden]=\"!$any(deleteBtn).loading\"\n                    title=\"{{ 'loading' | i18n }}\"\n                    aria-hidden=\"true\"\n                  ></i>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <div *ngIf=\"!viewOnly\">\n          <h3>{{ \"newAttachment\" | i18n }}</h3>\n          <label for=\"file\" class=\"sr-only\">{{ \"file\" | i18n }}</label>\n          <input type=\"file\" id=\"file\" class=\"form-control-file\" name=\"file\" required />\n          <small class=\"form-text text-muted\">{{ \"maxFileSize\" | i18n }}</small>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary btn-submit\"\n          [disabled]=\"form.loading\"\n          *ngIf=\"!viewOnly\"\n        >\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ \"save\" | i18n }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"close\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Component } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherData } from \"@bitwarden/common/vault/models/data/cipher.data\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { AttachmentView } from \"@bitwarden/common/vault/models/view/attachment.view\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { AttachmentsComponent as BaseAttachmentsComponent } from \"../individual-vault/attachments.component\";\n\n@Component({\n  selector: \"app-org-vault-attachments\",\n  templateUrl: \"../individual-vault/attachments.component.html\",\n})\nexport class AttachmentsComponent extends BaseAttachmentsComponent {\n  viewOnly = false;\n  organization: Organization;\n\n  constructor(\n    cipherService: CipherService,\n    i18nService: I18nService,\n    cryptoService: CryptoService,\n    stateService: StateService,\n    platformUtilsService: PlatformUtilsService,\n    apiService: ApiService,\n    logService: LogService,\n    fileDownloadService: FileDownloadService,\n    dialogService: DialogService,\n  ) {\n    super(\n      cipherService,\n      i18nService,\n      cryptoService,\n      stateService,\n      platformUtilsService,\n      apiService,\n      logService,\n      fileDownloadService,\n      dialogService,\n    );\n  }\n\n  protected async reupload(attachment: AttachmentView) {\n    if (this.organization.canEditAnyCollection && this.showFixOldAttachments(attachment)) {\n      await super.reuploadCipherAttachment(attachment, true);\n    }\n  }\n\n  protected async loadCipher() {\n    if (!this.organization.canEditAnyCollection) {\n      return await super.loadCipher();\n    }\n    const response = await this.apiService.getCipherAdmin(this.cipherId);\n    return new Cipher(new CipherData(response));\n  }\n\n  protected saveCipherAttachment(file: File) {\n    return this.cipherService.saveAttachmentWithServer(\n      this.cipherDomain,\n      file,\n      this.organization.canEditAnyCollection,\n    );\n  }\n\n  protected deleteCipherAttachment(attachmentId: string) {\n    if (!this.organization.canEditAnyCollection) {\n      return super.deleteCipherAttachment(attachmentId);\n    }\n    return this.apiService.deleteCipherAttachmentAdmin(this.cipherId, attachmentId);\n  }\n\n  protected showFixOldAttachments(attachment: AttachmentView) {\n    return attachment.key == null && this.organization.canEditAnyCollection;\n  }\n}\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnDestroy } from \"@angular/core\";\nimport { FormBuilder } from \"@angular/forms\";\nimport { combineLatest, of, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationUserService } from \"@bitwarden/common/admin-console/abstractions/organization-user/organization-user.service\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { GroupService, GroupView } from \"../../../admin-console/organizations/core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  AccessSelectorModule,\n  convertToSelectionView,\n  mapGroupToAccessItemView,\n  mapUserToAccessItemView,\n  PermissionMode,\n} from \"../../../admin-console/organizations/shared/components/access-selector\";\nimport { SharedModule } from \"../../../shared\";\nimport { CollectionAdminService } from \"../../core/collection-admin.service\";\n\nexport interface BulkCollectionsDialogParams {\n  organizationId: string;\n  collections: CollectionView[];\n}\n\nexport enum BulkCollectionsDialogResult {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n}\n\n@Component({\n  imports: [SharedModule, AccessSelectorModule],\n  selector: \"app-bulk-collections-dialog\",\n  templateUrl: \"bulk-collections-dialog.component.html\",\n  standalone: true,\n})\nexport class BulkCollectionsDialogComponent implements OnDestroy {\n  protected flexibleCollectionsEnabled$ = this.configService.getFeatureFlag$(\n    FeatureFlag.FlexibleCollections,\n    false,\n  );\n\n  protected readonly PermissionMode = PermissionMode;\n\n  protected formGroup = this.formBuilder.group({\n    access: [[] as AccessItemValue[]],\n  });\n  protected loading = true;\n  protected organization: Organization;\n  protected accessItems: AccessItemView[] = [];\n  protected numCollections: number;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    @Inject(DIALOG_DATA) private params: BulkCollectionsDialogParams,\n    private dialogRef: DialogRef<BulkCollectionsDialogResult>,\n    private formBuilder: FormBuilder,\n    private organizationService: OrganizationService,\n    private groupService: GroupService,\n    private organizationUserService: OrganizationUserService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private collectionAdminService: CollectionAdminService,\n    private configService: ConfigServiceAbstraction,\n  ) {\n    this.numCollections = this.params.collections.length;\n    const organization$ = this.organizationService.get$(this.params.organizationId);\n    const groups$ = organization$.pipe(\n      switchMap((organization) => {\n        if (!organization.useGroups) {\n          return of([] as GroupView[]);\n        }\n        return this.groupService.getAll(organization.id);\n      }),\n    );\n\n    combineLatest([\n      organization$,\n      groups$,\n      this.organizationUserService.getAllUsers(this.params.organizationId),\n    ])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([organization, groups, users]) => {\n        this.organization = organization;\n\n        this.accessItems = [].concat(\n          groups.map(mapGroupToAccessItemView),\n          users.data.map(mapUserToAccessItemView),\n        );\n\n        this.loading = false;\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    const users = this.formGroup.controls.access.value\n      .filter((v) => v.type === AccessItemType.Member)\n      .map(convertToSelectionView);\n\n    const groups = this.formGroup.controls.access.value\n      .filter((v) => v.type === AccessItemType.Group)\n      .map(convertToSelectionView);\n\n    await this.collectionAdminService.bulkAssignAccess(\n      this.organization.id,\n      this.params.collections.map((c) => c.id),\n      users,\n      groups,\n    );\n\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"editedCollections\"));\n\n    this.dialogRef.close(BulkCollectionsDialogResult.Saved);\n  };\n\n  static open(dialogService: DialogService, config: DialogConfig<BulkCollectionsDialogParams>) {\n    return dialogService.open<BulkCollectionsDialogResult, BulkCollectionsDialogParams>(\n      BulkCollectionsDialogComponent,\n      config,\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog [loading]=\"loading\" dialogSize=\"large\">\n    <span bitDialogTitle>\n      {{ \"assignCollectionAccess\" | i18n }}\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        {{ numCollections }} {{ (numCollections == 1 ? \"collection\" : \"collections\") | i18n }}\n      </span>\n    </span>\n\n    <div bitDialogContent>\n      <bit-access-selector\n        *ngIf=\"organization?.useGroups\"\n        [permissionMode]=\"PermissionMode.Edit\"\n        formControlName=\"access\"\n        [items]=\"accessItems\"\n        [columnHeader]=\"'groupAndMemberColumnHeader' | i18n\"\n        [selectorLabelText]=\"'selectGroupsAndMembers' | i18n\"\n        [selectorHelpText]=\"'userPermissionOverrideHelper' | i18n\"\n        [emptySelectionText]=\"'noMembersOrGroupsAdded' | i18n\"\n        [flexibleCollectionsEnabled]=\"flexibleCollectionsEnabled$ | async\"\n      ></bit-access-selector>\n      <bit-access-selector\n        *ngIf=\"!organization?.useGroups\"\n        [permissionMode]=\"PermissionMode.Edit\"\n        formControlName=\"access\"\n        [items]=\"accessItems\"\n        [columnHeader]=\"'memberColumnHeader' | i18n\"\n        [selectorLabelText]=\"'selectMembers' | i18n\"\n        [emptySelectionText]=\"'noMembersAdded' | i18n\"\n        [flexibleCollectionsEnabled]=\"flexibleCollectionsEnabled$ | async\"\n      ></bit-access-selector>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton bitFormButton buttonType=\"primary\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton bitFormButton buttonType=\"secondary\" bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"collectionsTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\" [appApiAction]=\"formPromise\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"collectionsTitle\">\n          {{ \"collections\" | i18n }}\n          <small *ngIf=\"cipher\">{{ cipher.name }}</small>\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <p>{{ \"collectionsDesc\" | i18n }}</p>\n        <div class=\"d-flex\">\n          <h3>{{ \"collections\" | i18n }}</h3>\n          <div class=\"ml-auto d-flex\" *ngIf=\"collections && collections.length\">\n            <button type=\"button\" (click)=\"selectAll(true)\" class=\"btn btn-link btn-sm py-0\">\n              {{ \"selectAll\" | i18n }}\n            </button>\n            <button type=\"button\" (click)=\"selectAll(false)\" class=\"btn btn-link btn-sm py-0\">\n              {{ \"unselectAll\" | i18n }}\n            </button>\n          </div>\n        </div>\n        <div *ngIf=\"!collections || !collections.length\">\n          {{ \"noCollectionsInList\" | i18n }}\n        </div>\n        <table class=\"table table-hover table-list mb-0\" *ngIf=\"collections && collections.length\">\n          <tbody>\n            <tr *ngFor=\"let c of collections; let i = index\" (click)=\"check(c)\">\n              <td class=\"table-list-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [(ngModel)]=\"$any(c).checked\"\n                  name=\"Collection[{{ i }}].Checked\"\n                  appStopProp\n                />\n              </td>\n              <td>\n                {{ c.name }}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary btn-submit\" [disabled]=\"form.loading\">\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ \"save\" | i18n }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Component } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { CipherData } from \"@bitwarden/common/vault/models/data/cipher.data\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { CipherCollectionsRequest } from \"@bitwarden/common/vault/models/request/cipher-collections.request\";\n\nimport { CollectionsComponent as BaseCollectionsComponent } from \"../individual-vault/collections.component\";\n\n@Component({\n  selector: \"app-org-vault-collections\",\n  templateUrl: \"../../vault/individual-vault/collections.component.html\",\n})\nexport class CollectionsComponent extends BaseCollectionsComponent {\n  organization: Organization;\n\n  constructor(\n    collectionService: CollectionService,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService,\n    cipherService: CipherService,\n    private apiService: ApiService,\n    logService: LogService,\n  ) {\n    super(collectionService, platformUtilsService, i18nService, cipherService, logService);\n    this.allowSelectNone = true;\n  }\n\n  protected async loadCipher() {\n    if (!this.organization.canViewAllCollections) {\n      return await super.loadCipher();\n    }\n    const response = await this.apiService.getCipherAdmin(this.cipherId);\n    return new Cipher(new CipherData(response));\n  }\n\n  protected loadCipherCollections() {\n    if (!this.organization.canViewAllCollections) {\n      return super.loadCipherCollections();\n    }\n    return this.collectionIds;\n  }\n\n  protected loadCollections() {\n    if (!this.organization.canViewAllCollections) {\n      return super.loadCollections();\n    }\n    return Promise.resolve(this.collections);\n  }\n\n  protected saveCollections() {\n    if (this.organization.canEditAnyCollection) {\n      const request = new CipherCollectionsRequest(this.cipherDomain.collectionIds);\n      return this.apiService.putCipherCollectionsAdmin(this.cipherId, request);\n    } else {\n      return super.saveCollections();\n    }\n  }\n}\n","<div class=\"card vault-filters\">\n  <div class=\"container loading-spinner\" *ngIf=\"!isLoaded\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\" aria-hidden=\"true\"></i>\n  </div>\n  <div *ngIf=\"isLoaded\">\n    <div class=\"card-header d-flex\">\n      {{ \"filters\" | i18n }}\n      <a\n        class=\"ml-auto\"\n        href=\"https://bitwarden.com/help/searching-vault/\"\n        target=\"_blank\"\n        rel=\"noopener\"\n        appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n      >\n        <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n      </a>\n    </div>\n    <div class=\"card-body\">\n      <input\n        type=\"search\"\n        placeholder=\"{{ searchPlaceholder | i18n }}\"\n        id=\"search\"\n        class=\"form-control\"\n        [ngModel]=\"searchText\"\n        (ngModelChange)=\"onSearchTextChanged($event)\"\n        autocomplete=\"off\"\n        appAutofocus\n      />\n      <ng-container *ngFor=\"let f of filtersList\">\n        <div class=\"filter\">\n          <app-filter-section [activeFilter]=\"activeFilter\" [section]=\"f\"> </app-filter-section>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport { firstValueFrom, Subject } from \"rxjs\";\n\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\n\nimport { VaultFilterComponent as BaseVaultFilterComponent } from \"../../individual-vault/vault-filter/components/vault-filter.component\"; //../../vault/vault-filter/components/vault-filter.component\";\nimport {\n  VaultFilterList,\n  VaultFilterType,\n} from \"../../individual-vault/vault-filter/shared/models/vault-filter-section.type\";\nimport { CollectionFilter } from \"../../individual-vault/vault-filter/shared/models/vault-filter.type\";\n\n@Component({\n  selector: \"app-organization-vault-filter\",\n  templateUrl: \"../../individual-vault/vault-filter/components/vault-filter.component.html\",\n})\nexport class VaultFilterComponent extends BaseVaultFilterComponent implements OnInit, OnDestroy {\n  @Input() set organization(value: Organization) {\n    if (value && value !== this._organization) {\n      this._organization = value;\n      this.vaultFilterService.setOrganizationFilter(this._organization);\n    }\n  }\n  _organization: Organization;\n  protected destroy$: Subject<void>;\n\n  async ngOnInit() {\n    this.filters = await this.buildAllFilters();\n    if (!this.activeFilter.selectedCipherTypeNode) {\n      this.activeFilter.resetFilter();\n      this.activeFilter.selectedCollectionNode =\n        (await this.getDefaultFilter()) as TreeNode<CollectionFilter>;\n    }\n    this.isLoaded = true;\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async buildAllFilters(): Promise<VaultFilterList> {\n    const builderFilter = {} as VaultFilterList;\n    builderFilter.typeFilter = await this.addTypeFilter([\"favorites\"]);\n    builderFilter.collectionFilter = await this.addCollectionFilter();\n    builderFilter.trashFilter = await this.addTrashFilter();\n    return builderFilter;\n  }\n\n  async getDefaultFilter(): Promise<TreeNode<VaultFilterType>> {\n    return await firstValueFrom(this.filters?.collectionFilter.data$);\n  }\n}\n","<div class=\"tw-mb-4 tw-flex tw-items-start tw-justify-between\">\n  <div>\n    <bit-breadcrumbs *ngIf=\"showBreadcrumbs\">\n      <bit-breadcrumb\n        [route]=\"[]\"\n        [queryParams]=\"{ organizationId: organization.id, collectionId: null }\"\n        queryParamsHandling=\"merge\"\n      >\n        {{ organization.name }} {{ \"vault\" | i18n | lowercase }}\n      </bit-breadcrumb>\n      <ng-container>\n        <bit-breadcrumb\n          *ngFor=\"let collection of collections\"\n          icon=\"bwi-collection\"\n          [route]=\"[]\"\n          [queryParams]=\"{ collectionId: collection.id }\"\n          queryParamsHandling=\"merge\"\n        >\n          {{ collection.name }}\n        </bit-breadcrumb>\n      </ng-container>\n    </bit-breadcrumbs>\n    <h1 class=\"tw-mb-0 tw-mt-1 tw-flex tw-items-center tw-space-x-2\">\n      <i\n        *ngIf=\"filter.collectionId !== undefined\"\n        class=\"bwi bwi-collection\"\n        aria-hidden=\"true\"\n      ></i>\n      <span>{{ title }}</span>\n      <ng-container *ngIf=\"collection !== undefined && (canEditCollection || canDeleteCollection)\">\n        <button\n          bitIconButton=\"bwi-angle-down\"\n          [bitMenuTriggerFor]=\"editCollectionMenu\"\n          size=\"small\"\n          type=\"button\"\n          aria-haspopup\n        ></button>\n        <bit-menu #editCollectionMenu>\n          <button\n            type=\"button\"\n            *ngIf=\"canEditCollection\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Info)\"\n          >\n            <i class=\"bwi bwi-fw bwi-pencil-square\" aria-hidden=\"true\"></i>\n            {{ \"editInfo\" | i18n }}\n          </button>\n          <button\n            type=\"button\"\n            *ngIf=\"canEditCollection\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Access)\"\n          >\n            <i class=\"bwi bwi-fw bwi-users\" aria-hidden=\"true\"></i>\n            {{ \"access\" | i18n }}\n          </button>\n          <button\n            type=\"button\"\n            *ngIf=\"canDeleteCollection\"\n            bitMenuItem\n            (click)=\"deleteCollection()\"\n          >\n            <span class=\"tw-text-danger\">\n              <i class=\"bwi bwi-fw bwi-trash\" aria-hidden=\"true\"></i>\n              {{ \"delete\" | i18n }}\n            </span>\n          </button>\n        </bit-menu>\n      </ng-container>\n      <small *ngIf=\"loading\">\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n      </small>\n    </h1>\n  </div>\n\n  <div *ngIf=\"filter.type !== 'trash' && filter.collectionId !== Unassigned\" class=\"tw-shrink-0\">\n    <div *ngIf=\"organization.canCreateNewCollections\" appListDropdown>\n      <button\n        bitButton\n        buttonType=\"primary\"\n        type=\"button\"\n        [bitMenuTriggerFor]=\"addOptions\"\n        id=\"newItemDropdown\"\n        appA11yTitle=\"{{ 'new' | i18n }}\"\n      >\n        {{ \"new\" | i18n }}<i class=\"bwi bwi-angle-down tw-ml-2\" aria-hidden=\"true\"></i>\n      </button>\n      <bit-menu #addOptions aria-labelledby=\"newItemDropdown\">\n        <button type=\"button\" bitMenuItem (click)=\"addCipher()\">\n          <i class=\"bwi bwi-fw bwi-globe\" aria-hidden=\"true\"></i>\n          {{ \"item\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"addCollection()\">\n          <i class=\"bwi bwi-fw bwi-collection\" aria-hidden=\"true\"></i>\n          {{ \"collection\" | i18n }}\n        </button>\n      </bit-menu>\n    </div>\n    <button\n      *ngIf=\"!organization.canCreateNewCollections\"\n      type=\"button\"\n      bitButton\n      buttonType=\"primary\"\n      (click)=\"addCipher()\"\n    >\n      <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n      {{ \"newItem\" | i18n }}\n    </button>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ProductType } from \"@bitwarden/common/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\nimport { DialogService, SimpleDialogOptions } from \"@bitwarden/components\";\n\nimport { CollectionAdminView } from \"../../../vault/core/views/collection-admin.view\";\nimport { CollectionDialogTabType } from \"../../components/collection-dialog\";\nimport { CollectionAdminService } from \"../../core/collection-admin.service\";\nimport {\n  All,\n  RoutedVaultFilterModel,\n  Unassigned,\n} from \"../../individual-vault/vault-filter/shared/models/routed-vault-filter.model\";\n\n@Component({\n  selector: \"app-org-vault-header\",\n  templateUrl: \"./vault-header.component.html\",\n})\nexport class VaultHeaderComponent {\n  protected All = All;\n  protected Unassigned = Unassigned;\n\n  /**\n   * Boolean to determine the loading state of the header.\n   * Shows a loading spinner if set to true\n   */\n  @Input() loading: boolean;\n\n  /** Current active fitler */\n  @Input() filter: RoutedVaultFilterModel;\n\n  /** The organization currently being viewed */\n  @Input() organization: Organization;\n\n  /** Currently selected collection */\n  @Input() collection?: TreeNode<CollectionAdminView>;\n\n  /** Emits an event when the new item button is clicked in the header */\n  @Output() onAddCipher = new EventEmitter<void>();\n\n  /** Emits an event when the new collection button is clicked in the header */\n  @Output() onAddCollection = new EventEmitter<void>();\n\n  /** Emits an event when the edit collection button is clicked in the header */\n  @Output() onEditCollection = new EventEmitter<{ tab: CollectionDialogTabType }>();\n\n  /** Emits an event when the delete collection button is clicked in the header */\n  @Output() onDeleteCollection = new EventEmitter<void>();\n\n  protected CollectionDialogTabType = CollectionDialogTabType;\n  protected organizations$ = this.organizationService.organizations$;\n\n  private flexibleCollectionsEnabled: boolean;\n\n  constructor(\n    private organizationService: OrganizationService,\n    private i18nService: I18nService,\n    private dialogService: DialogService,\n    private collectionAdminService: CollectionAdminService,\n    private router: Router,\n    private configService: ConfigServiceAbstraction,\n  ) {}\n\n  async ngOnInit() {\n    this.flexibleCollectionsEnabled = await this.configService.getFeatureFlag(\n      FeatureFlag.FlexibleCollections,\n    );\n  }\n\n  get title() {\n    if (this.collection !== undefined) {\n      return this.collection.node.name;\n    }\n\n    if (this.filter.collectionId === Unassigned) {\n      return this.i18nService.t(\"unassigned\");\n    }\n\n    return `${this.organization.name} ${this.i18nService.t(\"vault\").toLowerCase()}`;\n  }\n\n  protected get showBreadcrumbs() {\n    return this.filter.collectionId !== undefined && this.filter.collectionId !== All;\n  }\n\n  /**\n   * A list of collection filters that form a chain from the organization root to currently selected collection.\n   * Begins from the organization root and excludes the currently selected collection.\n   */\n  protected get collections() {\n    if (this.collection == undefined) {\n      return [];\n    }\n\n    const collections = [this.collection];\n    while (collections[collections.length - 1].parent != undefined) {\n      collections.push(collections[collections.length - 1].parent);\n    }\n\n    return collections\n      .slice(1)\n      .reverse()\n      .map((treeNode) => treeNode.node);\n  }\n\n  private showFreeOrgUpgradeDialog(): void {\n    const orgUpgradeSimpleDialogOpts: SimpleDialogOptions = {\n      title: this.i18nService.t(\"upgradeOrganization\"),\n      content: this.i18nService.t(\n        this.organization.canEditSubscription\n          ? \"freeOrgMaxCollectionReachedManageBilling\"\n          : \"freeOrgMaxCollectionReachedNoManageBilling\",\n        this.organization.maxCollections,\n      ),\n      type: \"primary\",\n    };\n\n    if (this.organization.canEditSubscription) {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"upgrade\");\n    } else {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"ok\");\n      orgUpgradeSimpleDialogOpts.cancelButtonText = null; // hide secondary btn\n    }\n\n    const simpleDialog = this.dialogService.openSimpleDialogRef(orgUpgradeSimpleDialogOpts);\n\n    firstValueFrom(simpleDialog.closed).then((result: boolean | undefined) => {\n      if (!result) {\n        return;\n      }\n\n      if (result && this.organization.canEditSubscription) {\n        this.router.navigate([\"/organizations\", this.organization.id, \"billing\", \"subscription\"], {\n          queryParams: { upgrade: true },\n        });\n      }\n    });\n  }\n\n  get canEditCollection(): boolean {\n    // Only edit collections if not editing \"Unassigned\"\n    if (this.collection === undefined) {\n      return false;\n    }\n\n    // Otherwise, check if we can edit the specified collection\n    return this.collection.node.canEdit(this.organization);\n  }\n\n  addCipher() {\n    this.onAddCipher.emit();\n  }\n\n  async addCollection() {\n    if (this.organization.planProductType === ProductType.Free) {\n      const collections = await this.collectionAdminService.getAll(this.organization.id);\n      if (collections.length === this.organization.maxCollections) {\n        this.showFreeOrgUpgradeDialog();\n        return;\n      }\n    }\n\n    this.onAddCollection.emit();\n  }\n\n  async editCollection(tab: CollectionDialogTabType): Promise<void> {\n    this.onEditCollection.emit({ tab });\n  }\n\n  get canDeleteCollection(): boolean {\n    // Only delete collections if not deleting \"Unassigned\"\n    if (this.collection === undefined) {\n      return false;\n    }\n\n    // Otherwise, check if we can delete the specified collection\n    return this.collection.node.canDelete(this.organization, this.flexibleCollectionsEnabled);\n  }\n\n  deleteCollection() {\n    this.onDeleteCollection.emit();\n  }\n}\n","<div class=\"container page-content\">\n  <div class=\"row\">\n    <div class=\"col-3\">\n      <div class=\"groupings\">\n        <div class=\"content\">\n          <div class=\"inner-content\">\n            <app-organization-vault-filter\n              #vaultFilter\n              [organization]=\"organization\"\n              [activeFilter]=\"activeFilter\"\n              [searchText]=\"currentSearchText$ | async\"\n              (searchTextChanged)=\"filterSearchText($event)\"\n            ></app-organization-vault-filter>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-9\">\n      <app-org-vault-header\n        [filter]=\"filter\"\n        [loading]=\"refreshing\"\n        [organization]=\"organization\"\n        [collection]=\"selectedCollection\"\n        (onAddCipher)=\"addCipher()\"\n        (onAddCollection)=\"addCollection()\"\n        (onEditCollection)=\"editCollection(selectedCollection.node, $event.tab)\"\n        (onDeleteCollection)=\"deleteCollection(selectedCollection.node)\"\n      ></app-org-vault-header>\n      <app-callout\n        type=\"warning\"\n        *ngIf=\"activeFilter.isDeleted\"\n        icon=\"bwi bwi-exclamation-triangle\"\n      >\n        {{ trashCleanupWarning }}\n      </app-callout>\n      <app-vault-items\n        [ciphers]=\"ciphers\"\n        [collections]=\"collections\"\n        [allCollections]=\"allCollections\"\n        [allOrganizations]=\"organization ? [organization] : []\"\n        [allGroups]=\"allGroups\"\n        [disabled]=\"loading\"\n        [showOwner]=\"false\"\n        [showCollections]=\"filter.type !== undefined\"\n        [showGroups]=\"\n          organization?.useGroups &&\n          ((filter.type === undefined && filter.collectionId === undefined) ||\n            filter.collectionId !== undefined)\n        \"\n        [showPremiumFeatures]=\"organization?.useTotp\"\n        [showBulkMove]=\"false\"\n        [showBulkTrashOptions]=\"filter.type === 'trash'\"\n        [useEvents]=\"organization?.useEvents\"\n        [cloneableOrganizationCiphers]=\"true\"\n        [showAdminActions]=\"true\"\n        (onEvent)=\"onVaultItemsEvent($event)\"\n        [showBulkEditCollectionAccess]=\"showBulkEditCollectionAccess$ | async\"\n      >\n      </app-vault-items>\n      <div\n        class=\"tw-mt-6 tw-flex tw-h-full tw-flex-col tw-items-center tw-justify-start\"\n        *ngIf=\"showMissingCollectionPermissionMessage\"\n      >\n        <bit-icon [icon]=\"noItemIcon\" aria-hidden=\"true\"></bit-icon>\n        <p>{{ \"noPermissionToViewAllCollectionItems\" | i18n }}</p>\n      </div>\n      <div\n        class=\"tw-mt-6 tw-flex tw-h-full tw-flex-col tw-items-center tw-justify-start\"\n        *ngIf=\"isEmpty && !showMissingCollectionPermissionMessage && !performingInitialLoad\"\n      >\n        <bit-icon [icon]=\"noItemIcon\" aria-hidden=\"true\"></bit-icon>\n        <p>{{ \"noItemsInList\" | i18n }}</p>\n        <button\n          type=\"button\"\n          buttonType=\"primary\"\n          bitButton\n          (click)=\"addCipher()\"\n          *ngIf=\"filter.type !== 'trash' && filter.collectionId !== Unassigned\"\n        >\n          <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n          {{ \"newItem\" | i18n }}\n        </button>\n      </div>\n      <div\n        class=\"tw-mt-6 tw-flex tw-h-full tw-flex-col tw-items-center tw-justify-start\"\n        *ngIf=\"performingInitialLoad\"\n      >\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n      </div>\n    </div>\n  </div>\n  <ng-template #attachments></ng-template>\n  <ng-template #cipherAddEdit></ng-template>\n  <ng-template #collectionsModal></ng-template>\n</div>\n","import {\n  ChangeDetectorRef,\n  Component,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from \"@angular/core\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\nimport {\n  BehaviorSubject,\n  combineLatest,\n  firstValueFrom,\n  lastValueFrom,\n  Observable,\n  Subject,\n} from \"rxjs\";\nimport {\n  concatMap,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  shareReplay,\n  switchMap,\n  takeUntil,\n  tap,\n} from \"rxjs/operators\";\n\nimport { SearchPipe } from \"@bitwarden/angular/pipes/search.pipe\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { SearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { BroadcasterService } from \"@bitwarden/common/platform/abstractions/broadcaster.service\";\nimport { ConfigServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { TotpService } from \"@bitwarden/common/vault/abstractions/totp.service\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { ServiceUtils } from \"@bitwarden/common/vault/service-utils\";\nimport { DialogService, Icons } from \"@bitwarden/components\";\nimport { PasswordRepromptService } from \"@bitwarden/vault\";\n\nimport { GroupService, GroupView } from \"../../admin-console/organizations/core\";\nimport { openEntityEventsDialog } from \"../../admin-console/organizations/manage/entity-events.component\";\nimport { VaultFilterService } from \"../../vault/individual-vault/vault-filter/services/abstractions/vault-filter.service\";\nimport { VaultFilter } from \"../../vault/individual-vault/vault-filter/shared/models/vault-filter.model\";\nimport {\n  CollectionDialogAction,\n  CollectionDialogTabType,\n  openCollectionDialog,\n} from \"../components/collection-dialog\";\nimport { VaultItemEvent } from \"../components/vault-items/vault-item-event\";\nimport { CollectionAdminService } from \"../core/collection-admin.service\";\nimport { CollectionAdminView } from \"../core/views/collection-admin.view\";\nimport {\n  BulkDeleteDialogResult,\n  openBulkDeleteDialog,\n} from \"../individual-vault/bulk-action-dialogs/bulk-delete-dialog/bulk-delete-dialog.component\";\nimport { RoutedVaultFilterBridgeService } from \"../individual-vault/vault-filter/services/routed-vault-filter-bridge.service\";\nimport { RoutedVaultFilterService } from \"../individual-vault/vault-filter/services/routed-vault-filter.service\";\nimport { createFilterFunction } from \"../individual-vault/vault-filter/shared/models/filter-function\";\nimport {\n  All,\n  RoutedVaultFilterModel,\n  Unassigned,\n} from \"../individual-vault/vault-filter/shared/models/routed-vault-filter.model\";\nimport { getNestedCollectionTree } from \"../utils/collection-utils\";\n\nimport { AddEditComponent } from \"./add-edit.component\";\nimport { AttachmentsComponent } from \"./attachments.component\";\nimport {\n  BulkCollectionsDialogComponent,\n  BulkCollectionsDialogResult,\n} from \"./bulk-collections-dialog\";\nimport { CollectionsComponent } from \"./collections.component\";\nimport { VaultFilterComponent } from \"./vault-filter/vault-filter.component\";\n\nconst BroadcasterSubscriptionId = \"OrgVaultComponent\";\nconst SearchTextDebounceInterval = 200;\n\n@Component({\n  selector: \"app-org-vault\",\n  templateUrl: \"vault.component.html\",\n  providers: [RoutedVaultFilterService, RoutedVaultFilterBridgeService],\n})\nexport class VaultComponent implements OnInit, OnDestroy {\n  protected Unassigned = Unassigned;\n\n  @ViewChild(\"vaultFilter\", { static: true })\n  vaultFilterComponent: VaultFilterComponent;\n  @ViewChild(\"attachments\", { read: ViewContainerRef, static: true })\n  attachmentsModalRef: ViewContainerRef;\n  @ViewChild(\"cipherAddEdit\", { read: ViewContainerRef, static: true })\n  cipherAddEditModalRef: ViewContainerRef;\n  @ViewChild(\"collectionsModal\", { read: ViewContainerRef, static: true })\n  collectionsModalRef: ViewContainerRef;\n\n  trashCleanupWarning: string = null;\n  activeFilter: VaultFilter = new VaultFilter();\n\n  protected noItemIcon = Icons.Search;\n  protected performingInitialLoad = true;\n  protected refreshing = false;\n  protected processingEvent = false;\n  protected filter: RoutedVaultFilterModel = {};\n  protected organization: Organization;\n  protected allCollections: CollectionAdminView[];\n  protected allGroups: GroupView[];\n  protected ciphers: CipherView[];\n  protected collections: CollectionAdminView[];\n  protected selectedCollection: TreeNode<CollectionAdminView> | undefined;\n  protected isEmpty: boolean;\n  protected showMissingCollectionPermissionMessage: boolean;\n  protected currentSearchText$: Observable<string>;\n  protected showBulkEditCollectionAccess$ = this.configService.getFeatureFlag$(\n    FeatureFlag.BulkCollectionAccess,\n    false,\n  );\n\n  private searchText$ = new Subject<string>();\n  private refresh$ = new BehaviorSubject<void>(null);\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private route: ActivatedRoute,\n    private organizationService: OrganizationService,\n    protected vaultFilterService: VaultFilterService,\n    private routedVaultFilterBridgeService: RoutedVaultFilterBridgeService,\n    private routedVaultFilterService: RoutedVaultFilterService,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private syncService: SyncService,\n    private i18nService: I18nService,\n    private modalService: ModalService,\n    private dialogService: DialogService,\n    private messagingService: MessagingService,\n    private broadcasterService: BroadcasterService,\n    private ngZone: NgZone,\n    private platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private passwordRepromptService: PasswordRepromptService,\n    private collectionAdminService: CollectionAdminService,\n    private searchService: SearchService,\n    private searchPipe: SearchPipe,\n    private groupService: GroupService,\n    private logService: LogService,\n    private eventCollectionService: EventCollectionService,\n    private totpService: TotpService,\n    private apiService: ApiService,\n    protected configService: ConfigServiceAbstraction,\n  ) {}\n\n  async ngOnInit() {\n    this.trashCleanupWarning = this.i18nService.t(\n      this.platformUtilsService.isSelfHost()\n        ? \"trashCleanupWarningSelfHosted\"\n        : \"trashCleanupWarning\",\n    );\n\n    const filter$ = this.routedVaultFilterService.filter$;\n    const organizationId$ = filter$.pipe(\n      map((filter) => filter.organizationId),\n      filter((filter) => filter !== undefined),\n      distinctUntilChanged(),\n    );\n\n    const organization$ = organizationId$.pipe(\n      switchMap((organizationId) => this.organizationService.get$(organizationId)),\n      takeUntil(this.destroy$),\n      shareReplay({ refCount: false, bufferSize: 1 }),\n    );\n\n    const firstSetup$ = combineLatest([organization$, this.route.queryParams]).pipe(\n      first(),\n      switchMap(async ([organization]) => {\n        this.organization = organization;\n\n        if (!organization.canUseAdminCollections) {\n          await this.syncService.fullSync(false);\n        }\n\n        return undefined;\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    this.broadcasterService.subscribe(BroadcasterSubscriptionId, (message: any) => {\n      this.ngZone.run(async () => {\n        switch (message.command) {\n          case \"syncCompleted\":\n            if (message.successfully) {\n              this.refresh();\n              this.changeDetectorRef.detectChanges();\n            }\n            break;\n        }\n      });\n    });\n\n    this.routedVaultFilterBridgeService.activeFilter$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((activeFilter) => {\n        this.activeFilter = activeFilter;\n      });\n\n    this.searchText$\n      .pipe(debounceTime(SearchTextDebounceInterval), takeUntil(this.destroy$))\n      .subscribe((searchText) =>\n        this.router.navigate([], {\n          queryParams: { search: Utils.isNullOrEmpty(searchText) ? null : searchText },\n          queryParamsHandling: \"merge\",\n          replaceUrl: true,\n        }),\n      );\n\n    this.currentSearchText$ = this.route.queryParams.pipe(map((queryParams) => queryParams.search));\n\n    const allCollectionsWithoutUnassigned$ = organizationId$.pipe(\n      switchMap((orgId) => this.collectionAdminService.getAll(orgId)),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const allCollections$ = combineLatest([organizationId$, allCollectionsWithoutUnassigned$]).pipe(\n      map(([organizationId, allCollections]) => {\n        const noneCollection = new CollectionAdminView();\n        noneCollection.name = this.i18nService.t(\"unassigned\");\n        noneCollection.id = Unassigned;\n        noneCollection.organizationId = organizationId;\n        return allCollections.concat(noneCollection);\n      }),\n    );\n\n    const allGroups$ = organizationId$.pipe(\n      switchMap((organizationId) => this.groupService.getAll(organizationId)),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const allCiphers$ = organization$.pipe(\n      concatMap(async (organization) => {\n        let ciphers;\n        if (organization.canEditAnyCollection) {\n          ciphers = await this.cipherService.getAllFromApiForOrganization(organization.id);\n        } else {\n          ciphers = (await this.cipherService.getAllDecrypted()).filter(\n            (c) => c.organizationId === organization.id,\n          );\n        }\n        await this.searchService.indexCiphers(ciphers, organization.id);\n        return ciphers;\n      }),\n    );\n\n    const ciphers$ = combineLatest([allCiphers$, filter$, this.currentSearchText$]).pipe(\n      filter(([ciphers, filter]) => ciphers != undefined && filter != undefined),\n      concatMap(async ([ciphers, filter, searchText]) => {\n        if (filter.collectionId === undefined && filter.type === undefined) {\n          return [];\n        }\n\n        const filterFunction = createFilterFunction(filter);\n\n        if (this.searchService.isSearchable(searchText)) {\n          return await this.searchService.searchCiphers(searchText, [filterFunction], ciphers);\n        }\n\n        return ciphers.filter(filterFunction);\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const nestedCollections$ = allCollections$.pipe(\n      map((collections) => getNestedCollectionTree(collections)),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const collections$ = combineLatest([nestedCollections$, filter$, this.currentSearchText$]).pipe(\n      filter(([collections, filter]) => collections != undefined && filter != undefined),\n      map(([collections, filter, searchText]) => {\n        if (\n          filter.collectionId === Unassigned ||\n          (filter.collectionId === undefined && filter.type !== undefined)\n        ) {\n          return [];\n        }\n\n        let collectionsToReturn = [];\n        if (filter.collectionId === undefined || filter.collectionId === All) {\n          collectionsToReturn = collections.map((c) => c.node);\n        } else {\n          const selectedCollection = ServiceUtils.getTreeNodeObjectFromList(\n            collections,\n            filter.collectionId,\n          );\n          collectionsToReturn = selectedCollection?.children.map((c) => c.node) ?? [];\n        }\n\n        if (this.searchService.isSearchable(searchText)) {\n          collectionsToReturn = this.searchPipe.transform(\n            collectionsToReturn,\n            searchText,\n            (collection) => collection.name,\n            (collection) => collection.id,\n          );\n        }\n\n        return collectionsToReturn;\n      }),\n      takeUntil(this.destroy$),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const selectedCollection$ = combineLatest([nestedCollections$, filter$]).pipe(\n      filter(([collections, filter]) => collections != undefined && filter != undefined),\n      map(([collections, filter]) => {\n        if (\n          filter.collectionId === undefined ||\n          filter.collectionId === All ||\n          filter.collectionId === Unassigned\n        ) {\n          return undefined;\n        }\n\n        return ServiceUtils.getTreeNodeObjectFromList(collections, filter.collectionId);\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    const showMissingCollectionPermissionMessage$ = combineLatest([\n      filter$,\n      selectedCollection$,\n      organization$,\n    ]).pipe(\n      map(([filter, collection, organization]) => {\n        return (\n          // Filtering by unassigned, show message if not admin\n          (filter.collectionId === Unassigned && !organization.canUseAdminCollections) ||\n          // Filtering by a collection, so show message if user is not assigned\n          (collection != undefined &&\n            !collection.node.assigned &&\n            !organization.canUseAdminCollections)\n        );\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    firstSetup$\n      .pipe(\n        switchMap(() => combineLatest([this.route.queryParams, organization$])),\n        switchMap(async ([qParams, organization]) => {\n          const cipherId = getCipherIdFromParams(qParams);\n          if (!cipherId) {\n            return;\n          }\n          if (\n            // Handle users with implicit collection access since they use the admin endpoint\n            organization.canUseAdminCollections ||\n            (await this.cipherService.get(cipherId)) != null\n          ) {\n            this.editCipherId(cipherId);\n          } else {\n            this.platformUtilsService.showToast(\n              \"error\",\n              this.i18nService.t(\"errorOccurred\"),\n              this.i18nService.t(\"unknownCipher\"),\n            );\n            this.router.navigate([], {\n              queryParams: { cipherId: null, itemId: null },\n              queryParamsHandling: \"merge\",\n            });\n          }\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe();\n\n    firstSetup$\n      .pipe(\n        switchMap(() => combineLatest([this.route.queryParams, organization$, allCiphers$])),\n        switchMap(async ([qParams, organization, allCiphers$]) => {\n          const cipherId = qParams.viewEvents;\n          if (!cipherId) {\n            return;\n          }\n          const cipher = allCiphers$.find((c) => c.id === cipherId);\n          if (organization.useEvents && cipher != undefined) {\n            this.viewEvents(cipher);\n          } else {\n            this.platformUtilsService.showToast(\n              \"error\",\n              this.i18nService.t(\"errorOccurred\"),\n              this.i18nService.t(\"unknownCipher\"),\n            );\n            this.router.navigate([], {\n              queryParams: { viewEvents: null },\n              queryParamsHandling: \"merge\",\n            });\n          }\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe();\n\n    firstSetup$\n      .pipe(\n        switchMap(() => this.refresh$),\n        tap(() => (this.refreshing = true)),\n        switchMap(() =>\n          combineLatest([\n            organization$,\n            filter$,\n            allCollections$,\n            allGroups$,\n            ciphers$,\n            collections$,\n            selectedCollection$,\n            showMissingCollectionPermissionMessage$,\n          ]),\n        ),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(\n        ([\n          organization,\n          filter,\n          allCollections,\n          allGroups,\n          ciphers,\n          collections,\n          selectedCollection,\n          showMissingCollectionPermissionMessage,\n        ]) => {\n          this.organization = organization;\n          this.filter = filter;\n          this.allCollections = allCollections;\n          this.allGroups = allGroups;\n          this.ciphers = ciphers;\n          this.collections = collections;\n          this.selectedCollection = selectedCollection;\n          this.showMissingCollectionPermissionMessage = showMissingCollectionPermissionMessage;\n\n          this.isEmpty = collections?.length === 0 && ciphers?.length === 0;\n\n          // This is a temporary fix to avoid double fetching collections.\n          // TODO: Remove when implementing new VVR menu\n          this.vaultFilterService.reloadCollections(allCollections);\n\n          this.refreshing = false;\n          this.performingInitialLoad = false;\n        },\n      );\n  }\n\n  get loading() {\n    return this.refreshing || this.processingEvent;\n  }\n\n  ngOnDestroy() {\n    this.broadcasterService.unsubscribe(BroadcasterSubscriptionId);\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async onVaultItemsEvent(event: VaultItemEvent) {\n    this.processingEvent = true;\n\n    try {\n      if (event.type === \"viewAttachments\") {\n        await this.editCipherAttachments(event.item);\n      } else if (event.type === \"viewCollections\") {\n        await this.editCipherCollections(event.item);\n      } else if (event.type === \"clone\") {\n        await this.cloneCipher(event.item);\n      } else if (event.type === \"restore\") {\n        if (event.items.length === 1) {\n          await this.restore(event.items[0]);\n        } else {\n          await this.bulkRestore(event.items);\n        }\n      } else if (event.type === \"delete\") {\n        const ciphers = event.items.filter((i) => i.collection === undefined).map((i) => i.cipher);\n        const collections = event.items\n          .filter((i) => i.cipher === undefined)\n          .map((i) => i.collection);\n        if (ciphers.length === 1 && collections.length === 0) {\n          await this.deleteCipher(ciphers[0]);\n        } else if (ciphers.length === 0 && collections.length === 1) {\n          await this.deleteCollection(collections[0]);\n        } else {\n          await this.bulkDelete(ciphers, collections, this.organization);\n        }\n      } else if (event.type === \"copyField\") {\n        await this.copy(event.item, event.field);\n      } else if (event.type === \"editCollection\") {\n        await this.editCollection(event.item, CollectionDialogTabType.Info);\n      } else if (event.type === \"viewCollectionAccess\") {\n        await this.editCollection(event.item, CollectionDialogTabType.Access);\n      } else if (event.type === \"bulkEditCollectionAccess\") {\n        await this.bulkEditCollectionAccess(event.items);\n      } else if (event.type === \"viewEvents\") {\n        await this.viewEvents(event.item);\n      }\n    } finally {\n      this.processingEvent = false;\n    }\n  }\n\n  filterSearchText(searchText: string) {\n    this.searchText$.next(searchText);\n  }\n\n  async editCipherAttachments(cipher: CipherView) {\n    if (cipher?.reprompt !== 0 && !(await this.passwordRepromptService.showPasswordPrompt())) {\n      this.go({ cipherId: null, itemId: null });\n      return;\n    }\n\n    if (this.organization.maxStorageGb == null || this.organization.maxStorageGb === 0) {\n      this.messagingService.send(\"upgradeOrganization\", { organizationId: cipher.organizationId });\n      return;\n    }\n\n    let madeAttachmentChanges = false;\n\n    const [modal] = await this.modalService.openViewRef(\n      AttachmentsComponent,\n      this.attachmentsModalRef,\n      (comp) => {\n        comp.organization = this.organization;\n        comp.cipherId = cipher.id;\n        comp.onUploadedAttachment\n          .pipe(takeUntil(this.destroy$))\n          .subscribe(() => (madeAttachmentChanges = true));\n        comp.onDeletedAttachment\n          .pipe(takeUntil(this.destroy$))\n          .subscribe(() => (madeAttachmentChanges = true));\n      },\n    );\n\n    modal.onClosed.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (madeAttachmentChanges) {\n        this.refresh();\n      }\n      madeAttachmentChanges = false;\n    });\n  }\n\n  async editCipherCollections(cipher: CipherView) {\n    const currCollections = await firstValueFrom(this.vaultFilterService.filteredCollections$);\n    const [modal] = await this.modalService.openViewRef(\n      CollectionsComponent,\n      this.collectionsModalRef,\n      (comp) => {\n        comp.collectionIds = cipher.collectionIds;\n        comp.collections = currCollections.filter((c) => !c.readOnly && c.id != Unassigned);\n        comp.organization = this.organization;\n        comp.cipherId = cipher.id;\n        comp.onSavedCollections.pipe(takeUntil(this.destroy$)).subscribe(() => {\n          modal.close();\n          this.refresh();\n        });\n      },\n    );\n  }\n\n  async addCipher() {\n    const collections = (await firstValueFrom(this.vaultFilterService.filteredCollections$)).filter(\n      (c) => !c.readOnly && c.id != Unassigned,\n    );\n\n    await this.editCipher(null, (comp) => {\n      comp.type = this.activeFilter.cipherType;\n      comp.collections = collections;\n      if (this.activeFilter.collectionId) {\n        comp.collectionIds = [this.activeFilter.collectionId];\n      }\n    });\n  }\n\n  async navigateToCipher(cipher: CipherView) {\n    this.go({ itemId: cipher?.id });\n  }\n\n  async editCipher(\n    cipher: CipherView,\n    additionalComponentParameters?: (comp: AddEditComponent) => void,\n  ) {\n    return this.editCipherId(cipher?.id, additionalComponentParameters);\n  }\n\n  async editCipherId(\n    cipherId: string,\n    additionalComponentParameters?: (comp: AddEditComponent) => void,\n  ) {\n    const cipher = await this.cipherService.get(cipherId);\n    // if cipher exists (cipher is null when new) and MP reprompt\n    // is on for this cipher, then show password reprompt\n    if (\n      cipher &&\n      cipher.reprompt !== 0 &&\n      !(await this.passwordRepromptService.showPasswordPrompt())\n    ) {\n      // didn't pass password prompt, so don't open add / edit modal\n      this.go({ cipherId: null, itemId: null });\n      return;\n    }\n\n    const defaultComponentParameters = (comp: AddEditComponent) => {\n      comp.organization = this.organization;\n      comp.organizationId = this.organization.id;\n      comp.cipherId = cipherId;\n      comp.onSavedCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n      comp.onDeletedCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n      comp.onRestoredCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n    };\n\n    const [modal, childComponent] = await this.modalService.openViewRef(\n      AddEditComponent,\n      this.cipherAddEditModalRef,\n      additionalComponentParameters == null\n        ? defaultComponentParameters\n        : (comp) => {\n            defaultComponentParameters(comp);\n            additionalComponentParameters(comp);\n          },\n    );\n\n    modal.onClosedPromise().then(() => {\n      this.go({ cipherId: null, itemId: null });\n    });\n\n    return childComponent;\n  }\n\n  async cloneCipher(cipher: CipherView) {\n    if (cipher.login?.hasFido2Credentials) {\n      const confirmed = await this.dialogService.openSimpleDialog({\n        title: { key: \"passkeyNotCopied\" },\n        content: { key: \"passkeyNotCopiedAlert\" },\n        type: \"info\",\n      });\n\n      if (!confirmed) {\n        return false;\n      }\n    }\n\n    const collections = (await firstValueFrom(this.vaultFilterService.filteredCollections$)).filter(\n      (c) => !c.readOnly && c.id != Unassigned,\n    );\n\n    await this.editCipher(cipher, (comp) => {\n      comp.cloneMode = true;\n      comp.collections = collections;\n      comp.collectionIds = cipher.collectionIds;\n    });\n  }\n\n  async restore(c: CipherView): Promise<boolean> {\n    if (!(await this.repromptCipher([c]))) {\n      return;\n    }\n\n    if (!c.isDeleted) {\n      return;\n    }\n\n    try {\n      const asAdmin = this.organization?.canEditAnyCollection;\n      await this.cipherService.restoreWithServer(c.id, asAdmin);\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"restoredItem\"));\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async bulkRestore(ciphers: CipherView[]) {\n    if (!(await this.repromptCipher(ciphers))) {\n      return;\n    }\n\n    const selectedCipherIds = ciphers.map((cipher) => cipher.id);\n    if (selectedCipherIds.length === 0) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\"),\n      );\n      return;\n    }\n\n    await this.cipherService.restoreManyWithServer(selectedCipherIds);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"restoredItems\"));\n    this.refresh();\n  }\n\n  async deleteCipher(c: CipherView): Promise<boolean> {\n    if (!(await this.repromptCipher([c]))) {\n      return;\n    }\n\n    const permanent = c.isDeleted;\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: permanent ? \"permanentlyDeleteItem\" : \"deleteItem\" },\n      content: { key: permanent ? \"permanentlyDeleteItemConfirmation\" : \"deleteItemConfirmation\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.deleteCipherWithServer(c.id, permanent);\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(permanent ? \"permanentlyDeletedItem\" : \"deletedItem\"),\n      );\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async deleteCollection(collection: CollectionView): Promise<void> {\n    if (\n      !this.organization.canDeleteAssignedCollections &&\n      !this.organization.canDeleteAnyCollection\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"missingPermissions\"),\n      );\n      return;\n    }\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: collection.name,\n      content: { key: \"deleteCollectionConfirmation\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return;\n    }\n    try {\n      await this.apiService.deleteCollection(this.organization?.id, collection.id);\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"deletedCollectionId\", collection.name),\n      );\n\n      // Navigate away if we deleted the colletion we were viewing\n      if (this.selectedCollection?.node.id === collection.id) {\n        this.router.navigate([], {\n          queryParams: { collectionId: this.selectedCollection.parent?.node.id ?? null },\n          queryParamsHandling: \"merge\",\n          replaceUrl: true,\n        });\n      }\n\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async bulkDelete(\n    ciphers: CipherView[],\n    collections: CollectionView[],\n    organization: Organization,\n  ) {\n    if (!(await this.repromptCipher(ciphers))) {\n      return;\n    }\n\n    if (ciphers.length === 0 && collections.length === 0) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\"),\n      );\n      return;\n    }\n    const dialog = openBulkDeleteDialog(this.dialogService, {\n      data: {\n        permanent: this.filter.type === \"trash\",\n        cipherIds: ciphers.map((c) => c.id),\n        collectionIds: collections.map((c) => c.id),\n        organization,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === BulkDeleteDialogResult.Deleted) {\n      this.refresh();\n    }\n  }\n\n  async copy(cipher: CipherView, field: \"username\" | \"password\" | \"totp\") {\n    let aType;\n    let value;\n    let typeI18nKey;\n\n    if (field === \"username\") {\n      aType = \"Username\";\n      value = cipher.login.username;\n      typeI18nKey = \"username\";\n    } else if (field === \"password\") {\n      aType = \"Password\";\n      value = cipher.login.password;\n      typeI18nKey = \"password\";\n    } else if (field === \"totp\") {\n      aType = \"TOTP\";\n      value = await this.totpService.getCode(cipher.login.totp);\n      typeI18nKey = \"verificationCodeTotp\";\n    } else {\n      this.platformUtilsService.showToast(\"info\", null, this.i18nService.t(\"unexpectedError\"));\n      return;\n    }\n\n    if (\n      this.passwordRepromptService.protectedFields().includes(aType) &&\n      !(await this.repromptCipher([cipher]))\n    ) {\n      return;\n    }\n\n    if (!cipher.viewPassword) {\n      return;\n    }\n\n    this.platformUtilsService.copyToClipboard(value, { window: window });\n    this.platformUtilsService.showToast(\n      \"info\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(typeI18nKey)),\n    );\n\n    if (field === \"password\") {\n      this.eventCollectionService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n    } else if (field === \"totp\") {\n      this.eventCollectionService.collect(EventType.Cipher_ClientCopiedHiddenField, cipher.id);\n    }\n  }\n\n  async addCollection(): Promise<void> {\n    const dialog = openCollectionDialog(this.dialogService, {\n      data: {\n        organizationId: this.organization?.id,\n        parentCollectionId: this.selectedCollection?.node.id,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (\n      result.action === CollectionDialogAction.Saved ||\n      result.action === CollectionDialogAction.Deleted\n    ) {\n      this.refresh();\n    }\n  }\n\n  async editCollection(c: CollectionView, tab: CollectionDialogTabType): Promise<void> {\n    const dialog = openCollectionDialog(this.dialogService, {\n      data: { collectionId: c?.id, organizationId: this.organization?.id, initialTab: tab },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (\n      result.action === CollectionDialogAction.Saved ||\n      result.action === CollectionDialogAction.Deleted\n    ) {\n      this.refresh();\n    }\n  }\n\n  async bulkEditCollectionAccess(collections: CollectionView[]): Promise<void> {\n    if (collections.length === 0) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\"),\n      );\n      return;\n    }\n\n    const dialog = BulkCollectionsDialogComponent.open(this.dialogService, {\n      data: {\n        collections,\n        organizationId: this.organization?.id,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === BulkCollectionsDialogResult.Saved) {\n      this.refresh();\n    }\n  }\n\n  async viewEvents(cipher: CipherView) {\n    await openEntityEventsDialog(this.dialogService, {\n      data: {\n        name: cipher.name,\n        organizationId: this.organization.id,\n        entityId: cipher.id,\n        showUser: true,\n        entity: \"cipher\",\n      },\n    });\n  }\n\n  protected deleteCipherWithServer(id: string, permanent: boolean) {\n    const asAdmin = this.organization?.canEditAnyCollection;\n    return permanent\n      ? this.cipherService.deleteWithServer(id, asAdmin)\n      : this.cipherService.softDeleteWithServer(id, asAdmin);\n  }\n\n  protected async repromptCipher(ciphers: CipherView[]) {\n    const notProtected = !ciphers.find((cipher) => cipher.reprompt !== CipherRepromptType.None);\n\n    return notProtected || (await this.passwordRepromptService.showPasswordPrompt());\n  }\n\n  private refresh() {\n    this.refresh$.next();\n  }\n\n  private go(queryParams: any = null) {\n    if (queryParams == null) {\n      queryParams = {\n        type: this.activeFilter.cipherType,\n        collectionId: this.activeFilter.collectionId,\n        deleted: this.activeFilter.isDeleted || null,\n      };\n    }\n\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: queryParams,\n      queryParamsHandling: \"merge\",\n      replaceUrl: true,\n    });\n  }\n}\n\n/**\n * Allows backwards compatibility with\n * old links that used the original `cipherId` param\n */\nconst getCipherIdFromParams = (params: Params): string => {\n  return params[\"itemId\"] || params[\"cipherId\"];\n};\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { canAccessVaultTab } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\nimport { OrganizationPermissionsGuard } from \"../../admin-console/organizations/guards/org-permissions.guard\";\n\nimport { VaultComponent } from \"./vault.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: VaultComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: { titleId: \"vaults\", organizationPermissions: canAccessVaultTab },\n  },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class VaultRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { LooseComponentsModule } from \"../../shared/loose-components.module\";\nimport { SharedModule } from \"../../shared/shared.module\";\nimport { OrganizationBadgeModule } from \"../../vault/individual-vault/organization-badge/organization-badge.module\";\nimport { PipesModule } from \"../../vault/individual-vault/pipes/pipes.module\";\nimport { CollectionDialogModule } from \"../components/collection-dialog\";\nimport { VaultItemsModule } from \"../components/vault-items/vault-items.module\";\n\nimport { CollectionAccessRestrictedComponent } from \"./collection-access-restricted.component\";\nimport { CollectionBadgeModule } from \"./collection-badge/collection-badge.module\";\nimport { GroupBadgeModule } from \"./group-badge/group-badge.module\";\nimport { VaultFilterModule } from \"./vault-filter/vault-filter.module\";\nimport { VaultHeaderComponent } from \"./vault-header/vault-header.component\";\nimport { VaultRoutingModule } from \"./vault-routing.module\";\nimport { VaultComponent } from \"./vault.component\";\n\n@NgModule({\n  imports: [\n    VaultRoutingModule,\n    VaultFilterModule,\n    SharedModule,\n    LooseComponentsModule,\n    GroupBadgeModule,\n    CollectionBadgeModule,\n    OrganizationBadgeModule,\n    PipesModule,\n    BreadcrumbsModule,\n    VaultItemsModule,\n    CollectionDialogModule,\n    CollectionAccessRestrictedComponent,\n  ],\n  declarations: [VaultComponent, VaultHeaderComponent],\n  exports: [VaultComponent],\n})\nexport class VaultModule {}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AuthGuard } from \"@bitwarden/angular/auth/guards\";\nimport {\n  canAccessOrgAdmin,\n  canAccessGroupsTab,\n  canAccessMembersTab,\n  canAccessVaultTab,\n  canAccessReportingTab,\n  canAccessSettingsTab,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\nimport { OrganizationPermissionsGuard } from \"../../admin-console/organizations/guards/org-permissions.guard\";\nimport { OrganizationRedirectGuard } from \"../../admin-console/organizations/guards/org-redirect.guard\";\nimport { OrganizationLayoutComponent } from \"../../admin-console/organizations/layouts/organization-layout.component\";\nimport { GroupsComponent } from \"../../admin-console/organizations/manage/groups.component\";\nimport { deepLinkGuard } from \"../../auth/guards/deep-link.guard\";\nimport { VaultModule } from \"../../vault/org-vault/vault.module\";\n\nconst routes: Routes = [\n  {\n    path: \":organizationId\",\n    component: OrganizationLayoutComponent,\n    canActivate: [deepLinkGuard(), AuthGuard, OrganizationPermissionsGuard],\n    data: {\n      organizationPermissions: canAccessOrgAdmin,\n    },\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        canActivate: [OrganizationRedirectGuard],\n        data: {\n          autoRedirectCallback: getOrganizationRoute,\n        },\n        children: [], // This is required to make the auto redirect work, },\n      },\n      {\n        path: \"vault\",\n        loadChildren: () => VaultModule,\n      },\n      {\n        path: \"settings\",\n        loadChildren: () =>\n          import(\"./settings/organization-settings.module\").then(\n            (m) => m.OrganizationSettingsModule,\n          ),\n      },\n      {\n        path: \"members\",\n        loadChildren: () => import(\"./members\").then((m) => m.MembersModule),\n      },\n      {\n        path: \"groups\",\n        component: GroupsComponent,\n        canActivate: [OrganizationPermissionsGuard],\n        data: {\n          titleId: \"groups\",\n          organizationPermissions: canAccessGroupsTab,\n        },\n      },\n      {\n        path: \"reporting\",\n        loadChildren: () =>\n          import(\"../organizations/reporting/organization-reporting.module\").then(\n            (m) => m.OrganizationReportingModule,\n          ),\n      },\n      {\n        path: \"billing\",\n        loadChildren: () =>\n          import(\"../../billing/organizations/organization-billing.module\").then(\n            (m) => m.OrganizationBillingModule,\n          ),\n      },\n    ],\n  },\n];\n\nfunction getOrganizationRoute(organization: Organization): string {\n  if (canAccessVaultTab(organization)) {\n    return \"vault\";\n  }\n  if (canAccessMembersTab(organization)) {\n    return \"members\";\n  }\n  if (canAccessGroupsTab(organization)) {\n    return \"groups\";\n  }\n  if (canAccessReportingTab(organization)) {\n    return \"reporting\";\n  }\n  if (canAccessSettingsTab(organization)) {\n    return \"settings\";\n  }\n  return undefined;\n}\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OrganizationsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { CoreOrganizationModule } from \"./core\";\nimport { GroupAddEditComponent } from \"./manage/group-add-edit.component\";\nimport { GroupsComponent } from \"./manage/groups.component\";\nimport { OrganizationsRoutingModule } from \"./organization-routing.module\";\nimport { SharedOrganizationModule } from \"./shared\";\nimport { AccessSelectorModule } from \"./shared/components/access-selector\";\n\n@NgModule({\n  imports: [\n    SharedOrganizationModule,\n    AccessSelectorModule,\n    CoreOrganizationModule,\n    OrganizationsRoutingModule,\n  ],\n  declarations: [GroupsComponent, GroupAddEditComponent],\n})\nexport class OrganizationModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SearchModule } from \"@bitwarden/components\";\n\nimport { SharedModule } from \"../../../shared/shared.module\";\n\nimport { AccessSelectorModule } from \"./components/access-selector/access-selector.module\";\n\n@NgModule({\n  imports: [SharedModule, AccessSelectorModule, SearchModule],\n  declarations: [],\n  exports: [SharedModule, AccessSelectorModule, SearchModule],\n})\nexport class SharedOrganizationModule {}\n"],"names":["OrganizationRedirectGuard","constructor","router","organizationService","canActivate","route","state","org","this","get","params","organizationId","customRedirect","data","autoRedirectCallback","redirectPath","createUrlTree","url","id","GroupAddEditTabType","GroupAddEditDialogResultType","GroupAddEditComponent","groupId","orgCollections$","from","apiService","getCollections","pipe","switchMap","response","collectionService","decryptMany","map","r","collections","c","type","Collection","labelName","name","listName","orgMembers$","organizationUserService","getAllUsers","m","Member","email","role","length","status","groupDetails$","editMode","combineLatest","groupService","getGroupUsers","groupView","users","members","catchError","e","logService","error","message","toString","of","undefined","dialogRef","i18nService","platformUtilsService","formBuilder","changeDetectorRef","dialogService","configService","flexibleCollectionsEnabled$","getFeatureFlag$","FlexibleCollections","PermissionMode","ResultType","loading","groupForm","group","accessAll","required","maxLength","externalId","control","value","disabled","destroy$","Subject","submit","markAllAsTouched","invalid","tabIndex","Info","showToast","t","formValue","save","close","Saved","delete","openSimpleDialog","title","content","key","Deleted","initialTab","ngOnInit","takeUntil","subscribe","detectChanges","patchValue","gc","permission","ngOnDestroy","next","complete","check","edit","loadMore","toggleAllVisible","deleteAllSelected","GroupsComponent","searchText","_searchText","updateSearchedGroups","visibleGroups","isPaging","pagedGroups","isSearching","searchedGroups","groups","searchService","searchPipe","didScroll","pageSize","ModalTabType","pagedGroupsCount","refreshGroups$","BehaviorSubject","tap","concatMap","toCollectionMap","getAll","collectionMap","sort","getSortFunction","g","details","checked","collectionNames","collator","compare","resetPaging","queryParams","first","qParams","search","pagedLength","pagedSize","concat","slice","startingTabIndex","config","open","result","lastValueFrom","closed","removeGroup","add","groupRow","groupsToDelete","filter","deleteMessage","join","placeholders","deleteMany","forEach","isSearchable","event","target","searching","index","findIndex","splice","decryptedCollections","transform","CollectionAccessRestrictedComponent","icon","editInfoClicked","VaultFilterService","stateService","folderService","cipherService","policyService","collectionAdminService","super","_collections","ReplaySubject","filteredCollections$","asObservable","collectionTree$","buildCollectionTree","reloadCollections","VaultFilterModule","provide","useClass","reupload","download","AttachmentsComponent","cryptoService","fileDownloadService","viewOnly","attachment","organization","canEditAnyCollection","showFixOldAttachments","reuploadCipherAttachment","loadCipher","getCipherAdmin","cipherId","saveCipherAttachment","file","saveAttachmentWithServer","cipherDomain","deleteCipherAttachment","attachmentId","deleteCipherAttachmentAdmin","BulkCollectionsDialogResult","BulkCollectionsDialogComponent","formGroup","access","accessItems","controls","v","Group","bulkAssignAccess","numCollections","organization$","get$","groups$","useGroups","static","selectAll","CollectionsComponent","allowSelectNone","canViewAllCollections","loadCipherCollections","collectionIds","loadCollections","Promise","resolve","saveCollections","request","putCipherCollectionsAdmin","onSearchTextChanged","VaultFilterComponent","_organization","vaultFilterService","setOrganizationFilter","filters","buildAllFilters","activeFilter","selectedCipherTypeNode","resetFilter","selectedCollectionNode","getDefaultFilter","isLoaded","builderFilter","typeFilter","addTypeFilter","collectionFilter","addCollectionFilter","trashFilter","addTrashFilter","firstValueFrom","data$","editCollection","deleteCollection","addCipher","addCollection","VaultHeaderComponent","All","Unassigned","onAddCipher","onAddCollection","onEditCollection","onDeleteCollection","CollectionDialogTabType","organizations$","flexibleCollectionsEnabled","getFeatureFlag","collection","node","collectionId","toLowerCase","showBreadcrumbs","parent","push","reverse","treeNode","showFreeOrgUpgradeDialog","orgUpgradeSimpleDialogOpts","canEditSubscription","maxCollections","acceptButtonText","cancelButtonText","simpleDialog","openSimpleDialogRef","then","navigate","upgrade","canEditCollection","canEdit","emit","planProductType","Free","tab","canDeleteCollection","canDelete","BroadcasterSubscriptionId","VaultComponent","routedVaultFilterBridgeService","routedVaultFilterService","syncService","modalService","messagingService","broadcasterService","ngZone","passwordRepromptService","eventCollectionService","totpService","trashCleanupWarning","noItemIcon","performingInitialLoad","refreshing","processingEvent","showBulkEditCollectionAccess$","BulkCollectionAccess","searchText$","refresh$","isSelfHost","filter$","organizationId$","distinctUntilChanged","shareReplay","refCount","bufferSize","firstSetup$","canUseAdminCollections","fullSync","run","command","successfully","refresh","activeFilter$","debounceTime","isNullOrEmpty","queryParamsHandling","replaceUrl","currentSearchText$","allCollectionsWithoutUnassigned$","orgId","allCollections$","allCollections","noneCollection","allGroups$","allCiphers$","ciphers","getAllFromApiForOrganization","getAllDecrypted","indexCiphers","ciphers$","filterFunction","searchCiphers","nestedCollections$","collections$","collectionsToReturn","selectedCollection","getTreeNodeObjectFromList","children","selectedCollection$","showMissingCollectionPermissionMessage$","assigned","getCipherIdFromParams","editCipherId","itemId","viewEvents","cipher","find","useEvents","allGroups","showMissingCollectionPermissionMessage","isEmpty","unsubscribe","onVaultItemsEvent","editCipherAttachments","item","editCipherCollections","cloneCipher","items","restore","bulkRestore","i","deleteCipher","bulkDelete","copy","field","Access","bulkEditCollectionAccess","filterSearchText","reprompt","showPasswordPrompt","go","maxStorageGb","send","madeAttachmentChanges","modal","openViewRef","attachmentsModalRef","comp","onUploadedAttachment","onDeletedAttachment","onClosed","currCollections","collectionsModalRef","readOnly","onSavedCollections","editCipher","cipherType","navigateToCipher","additionalComponentParameters","defaultComponentParameters","onSavedCipher","onDeletedCipher","onRestoredCipher","childComponent","cipherAddEditModalRef","onClosedPromise","login","hasFido2Credentials","cloneMode","repromptCipher","isDeleted","asAdmin","restoreWithServer","selectedCipherIds","restoreManyWithServer","permanent","deleteCipherWithServer","canDeleteAssignedCollections","canDeleteAnyCollection","dialog","cipherIds","aType","typeI18nKey","username","password","getCode","totp","protectedFields","includes","viewPassword","copyToClipboard","window","collect","Cipher_ClientCopiedPassword","Cipher_ClientCopiedHiddenField","parentCollectionId","action","entityId","showUser","entity","deleteWithServer","softDeleteWithServer","notProtected","None","deleted","relativeTo","routes","path","component","titleId","organizationPermissions","VaultRoutingModule","forChild","VaultModule","pathMatch","loadChildren","OrganizationSettingsModule","MembersModule","OrganizationReportingModule","OrganizationBillingModule","OrganizationsRoutingModule","OrganizationModule","SharedOrganizationModule"],"sourceRoot":""}