{"version":3,"file":"677.27f96ed792bfcd1773a5.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/import-error-dialog.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/import-error-dialog.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/import-success-dialog.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/import-success-dialog.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/file-password-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/enums/idp-provider.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/enums/lastpass-login-type.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/enums/otp-method.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/enums/platform.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/models/account.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/models/chunk.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/models/client-info.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/models/exported-account.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/models/federated-user-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/models/oob-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/models/otp-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/models/parser-options.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/models/session.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/models/shared-folder.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/models/user-type-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/services/binary-reader.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/services/rest-client.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/services/client.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/services/crypto-utils.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/services/parser.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass/access/vault.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/lastpass/dialog/lastpass-await-sso-dialog.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/lastpass/dialog/lastpass-await-sso-dialog.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/components/lastpass/dialog/lastpass-password-prompt.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/lastpass/dialog/lastpass-password-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/components/lastpass/dialog/lastpass-multifactor-prompt.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/lastpass/dialog/lastpass-multifactor-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/components/lastpass/lastpass-direct-import-ui.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/lastpass/lastpass-direct-import.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/lastpass/import-lastpass.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/lastpass/import-lastpass.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/components/import.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/components/import.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import/import-web.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import/import-web.component.html"],"sourcesContent":["<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importError\" | i18n }}\n  </span>\n\n  <span bitDialogContent>\n    <div>{{ \"resolveTheErrorsBelowAndTryAgain\" | i18n }}</div>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>{{ r.type }}</td>\n          <td bitCell>{{ r.message }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n\n  <div bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { CommonModule } from \"@angular/common\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { ButtonModule, DialogModule, TableDataSource, TableModule } from \"@bitwarden/components\";\n\nexport interface ErrorListItem {\n  type: string;\n  message: string;\n}\n\n@Component({\n  templateUrl: \"./import-error-dialog.component.html\",\n  standalone: true,\n  imports: [CommonModule, JslibModule, DialogModule, TableModule, ButtonModule],\n})\nexport class ImportErrorDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ErrorListItem>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: Error) {}\n\n  ngOnInit(): void {\n    const split = this.data.message.split(\"\\n\\n\");\n    if (split.length == 1) {\n      this.dataSource.data = [{ type: \"\", message: this.data.message }];\n      return;\n    }\n\n    const data: ErrorListItem[] = [];\n    split.forEach((line) => {\n      data.push({ type: \"\", message: line });\n    });\n    this.dataSource.data = data;\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importSuccess\" | i18n }}\n  </span>\n\n  <div bitDialogContent>\n    <span>{{ \"importSuccessNumberOfItems\" | i18n : this.data.ciphers.length }}</span>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"type\" | i18n }}</th>\n          <th bitCell>{{ \"total\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>\n            <i class=\"bwi bwi-fw bwi-{{ r.icon }}\" aria-hidden=\"true\"></i>\n            {{ r.type | i18n }}\n          </td>\n          <td bitCell>{{ r.count }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { CommonModule } from \"@angular/common\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { ButtonModule, DialogModule, TableDataSource, TableModule } from \"@bitwarden/components\";\n\nimport { ImportResult } from \"../../models\";\n\nexport interface ResultList {\n  icon: string;\n  type: string;\n  count: number;\n}\n\n@Component({\n  templateUrl: \"./import-success-dialog.component.html\",\n  standalone: true,\n  imports: [CommonModule, JslibModule, DialogModule, TableModule, ButtonModule],\n})\nexport class ImportSuccessDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ResultList>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: ImportResult) {}\n\n  ngOnInit(): void {\n    if (this.data != null) {\n      this.dataSource.data = this.buildResultList();\n    }\n  }\n\n  private buildResultList(): ResultList[] {\n    let logins = 0;\n    let cards = 0;\n    let identities = 0;\n    let secureNotes = 0;\n    this.data.ciphers.map((c) => {\n      switch (c.type) {\n        case CipherType.Login:\n          logins++;\n          break;\n        case CipherType.Card:\n          cards++;\n          break;\n        case CipherType.SecureNote:\n          secureNotes++;\n          break;\n        case CipherType.Identity:\n          identities++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    const list: ResultList[] = [];\n    if (logins > 0) {\n      list.push({ icon: \"globe\", type: \"typeLogin\", count: logins });\n    }\n    if (cards > 0) {\n      list.push({ icon: \"credit-card\", type: \"typeCard\", count: cards });\n    }\n    if (identities > 0) {\n      list.push({ icon: \"id-card\", type: \"typeIdentity\", count: identities });\n    }\n    if (secureNotes > 0) {\n      list.push({ icon: \"sticky-note\", type: \"typeSecureNote\", count: secureNotes });\n    }\n    if (this.data.folders.length > 0) {\n      list.push({ icon: \"folder\", type: \"folders\", count: this.data.folders.length });\n    }\n    if (this.data.collections.length > 0) {\n      list.push({\n        icon: \"collection\",\n        type: \"collections\",\n        count: this.data.collections.length,\n      });\n    }\n    return list;\n  }\n}\n","import { DialogRef } from \"@angular/cdk/dialog\";\nimport { CommonModule } from \"@angular/common\";\nimport { Component } from \"@angular/core\";\nimport { FormBuilder, ReactiveFormsModule, Validators } from \"@angular/forms\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport {\n  AsyncActionsModule,\n  ButtonModule,\n  DialogModule,\n  FormFieldModule,\n  IconButtonModule,\n} from \"@bitwarden/components\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    JslibModule,\n    DialogModule,\n    FormFieldModule,\n    AsyncActionsModule,\n    ButtonModule,\n    IconButtonModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class FilePasswordPromptComponent {\n  protected formGroup = this.formBuilder.group({\n    filePassword: [\"\", Validators.required],\n  });\n\n  constructor(public dialogRef: DialogRef, protected formBuilder: FormBuilder) {}\n\n  submit = () => {\n    this.formGroup.markAsTouched();\n    if (!this.formGroup.valid) {\n      return;\n    }\n    this.dialogRef.close(this.formGroup.value.filePassword);\n  };\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog>\n    <span bitDialogTitle>\n      {{ \"confirmVaultImport\" | i18n }}\n    </span>\n\n    <div bitDialogContent>\n      {{ \"confirmVaultImportDesc\" | i18n }}\n      <bit-form-field class=\"tw-mt-6\">\n        <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n        <input\n          bitInput\n          type=\"password\"\n          formControlName=\"filePassword\"\n          appAutofocus\n          appInputVerbatim\n        />\n        <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" type=\"submit\">\n        <span>{{ \"importData\" | i18n }}</span>\n      </button>\n      <button bitButton bitDialogClose buttonType=\"secondary\" type=\"button\">\n        <span>{{ \"cancel\" | i18n }}</span>\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","export enum IdpProvider {\n  Azure = 0,\n  OktaAuthServer = 1,\n  OktaNoAuthServer = 2,\n  Google = 3,\n  PingOne = 4,\n  OneLogin = 5,\n}\n","export enum LastpassLoginType {\n  MasterPassword = 0,\n  // Not sure what Types 1 and 2 are?\n  Federated = 3,\n}\n","export enum OtpMethod {\n  GoogleAuth,\n  MicrosoftAuth,\n  Yubikey,\n}\n","export enum Platform {\n  Desktop,\n  Mobile,\n}\n","export class Account {\n  id: string;\n  name: string;\n  username: string;\n  password: string;\n  url: string;\n  path: string;\n  notes: string;\n  totp: string;\n  isFavorite: boolean;\n  isShared: boolean;\n}\n","export class Chunk {\n  id: string;\n  payload: Uint8Array;\n}\n","import { Platform } from \"../enums\";\n\nexport class ClientInfo {\n  platform: Platform;\n  id: string;\n  description: string;\n\n  static createClientInfo(id: string): ClientInfo {\n    return { platform: Platform.Desktop, id, description: \"Importer\" };\n  }\n}\n","import { Account } from \"./account\";\n\nexport class ExportedAccount {\n  url: string;\n  username: string;\n  password: string;\n  totp: string;\n  extra: string;\n  name: string;\n  grouping: string;\n  fav: number;\n\n  constructor(account: Account) {\n    this.url = account.url;\n    this.username = account.username;\n    this.password = account.password;\n    this.totp = account.totp;\n    this.extra = account.notes;\n    this.name = account.name;\n    this.grouping = account.path === \"(none)\" ? null : account.path;\n    this.fav = account.isFavorite ? 1 : 0;\n  }\n}\n","export class FederatedUserContext {\n  username: string;\n  idpUserInfo: any;\n  accessToken: string;\n  idToken: string;\n}\n","export class OobResult {\n  static cancel = new OobResult(false, \"cancel\", false);\n\n  constructor(\n    public waitForOutOfBand: boolean,\n    public passcode: string,\n    public rememberMe: boolean\n  ) {}\n\n  waitForApproval(rememberMe: boolean) {\n    return new OobResult(true, \"\", rememberMe);\n  }\n\n  continueWithPasscode(passcode: string, rememberMe: boolean) {\n    return new OobResult(false, passcode, rememberMe);\n  }\n}\n","export class OtpResult {\n  static cancel = new OtpResult(\"cancel\", false);\n\n  constructor(public passcode: string, public rememberMe: boolean) {}\n}\n","export class ParserOptions {\n  static default: ParserOptions = new ParserOptions();\n  parseSecureNotesToAccount = true;\n}\n","import { Platform } from \"../enums\";\n\nexport class Session {\n  id: string;\n  keyIterationCount: number;\n  token: string;\n  platform: Platform;\n  encryptedPrivateKey: string;\n}\n","export class SharedFolder {\n  id: string;\n  name: string;\n  encryptionKey: Uint8Array;\n}\n","import { IdpProvider, LastpassLoginType } from \"../enums\";\n\nexport class UserTypeContext {\n  type: LastpassLoginType;\n  identityProviderGUID: string;\n  identityProviderURL: string;\n  openIDConnectAuthority: string;\n  openIDConnectClientId: string;\n  companyId: number;\n  provider: IdpProvider;\n  pkceEnabled: boolean;\n  isPasswordlessEnabled: boolean;\n\n  isFederated(): boolean {\n    return (\n      this.type === LastpassLoginType.Federated &&\n      this.hasValue(this.identityProviderURL) &&\n      this.hasValue(this.openIDConnectAuthority) &&\n      this.hasValue(this.openIDConnectClientId)\n    );\n  }\n\n  get oidcScope(): string {\n    let scope = \"openid profile email\";\n    if (this.provider === IdpProvider.PingOne) {\n      scope += \" lastpass\";\n    }\n    return scope;\n  }\n\n  get openIDConnectAuthorityBase(): string {\n    return this.openIDConnectAuthority.replace(\"/.well-known/openid-configuration\", \"\");\n  }\n\n  private hasValue(str: string) {\n    return str != null && str.trim() !== \"\";\n  }\n}\n","export class BinaryReader {\n  private position: number;\n  private isLittleEndian: boolean;\n\n  constructor(public arr: Uint8Array) {\n    this.position = 0;\n\n    const uInt32 = new Uint32Array([0x11223344]);\n    const uInt8 = new Uint8Array(uInt32.buffer);\n    this.isLittleEndian = uInt8[0] === 0x44;\n  }\n\n  readBytes(count: number): Uint8Array {\n    if (this.position + count > this.arr.length) {\n      throw new Error(\"End of array reached\");\n    }\n    const slice = this.arr.subarray(this.position, this.position + count);\n    this.position += count;\n    return slice;\n  }\n\n  readUInt16(): number {\n    const slice = this.readBytes(2);\n    const int = slice[0] | (slice[1] << 8);\n    // Convert to unsigned int\n    return int >>> 0;\n  }\n\n  readUInt32(): number {\n    const slice = this.readBytes(4);\n    const int = slice[0] | (slice[1] << 8) | (slice[2] << 16) | (slice[3] << 24);\n    // Convert to unsigned int\n    return int >>> 0;\n  }\n\n  readUInt16BigEndian(): number {\n    let result = this.readUInt16();\n    if (this.isLittleEndian) {\n      // Extract the two bytes\n      const byte1 = result & 0xff;\n      const byte2 = (result >> 8) & 0xff;\n      // Create a big-endian value by swapping the bytes\n      result = (byte1 << 8) | byte2;\n    }\n    return result;\n  }\n\n  readUInt32BigEndian(): number {\n    let result = this.readUInt32();\n    if (this.isLittleEndian) {\n      // Extract individual bytes\n      const byte1 = (result >> 24) & 0xff;\n      const byte2 = (result >> 16) & 0xff;\n      const byte3 = (result >> 8) & 0xff;\n      const byte4 = result & 0xff;\n      // Create a big-endian value by reordering the bytes\n      result = (byte4 << 24) | (byte3 << 16) | (byte2 << 8) | byte1;\n    }\n    return result;\n  }\n\n  seekFromCurrentPosition(offset: number) {\n    const newPosition = this.position + offset;\n    if (newPosition < 0) {\n      throw new Error(\"Position cannot be negative\");\n    }\n    if (newPosition > this.arr.length) {\n      throw new Error(\"Array not large enough to seek to this position\");\n    }\n    this.position = newPosition;\n  }\n\n  atEnd(): boolean {\n    return this.position >= this.arr.length - 1;\n  }\n}\n","export class RestClient {\n  baseUrl: string;\n  isBrowser = true;\n\n  async get(\n    endpoint: string,\n    headers: Map<string, string> = null,\n    cookies: Map<string, string> = null\n  ): Promise<Response> {\n    const requestInit: RequestInit = {\n      method: \"GET\",\n      credentials: \"include\",\n    };\n    this.setHeaders(requestInit, headers, cookies);\n    const request = new Request(this.baseUrl + \"/\" + endpoint, requestInit);\n    const response = await fetch(request);\n    return response;\n  }\n\n  async postForm(\n    endpoint: string,\n    parameters: Map<string, any> = null,\n    headers: Map<string, string> = null,\n    cookies: Map<string, string> = null\n  ): Promise<Response> {\n    const setBody = (requestInit: RequestInit, headerMap: Map<string, string>) => {\n      if (parameters != null && parameters.size > 0) {\n        const form = new FormData();\n        for (const [key, value] of parameters) {\n          form.set(key, value);\n        }\n        requestInit.body = form;\n      }\n    };\n    return await this.post(endpoint, setBody, headers, cookies);\n  }\n\n  async postJson(\n    endpoint: string,\n    body: any,\n    headers: Map<string, string> = null,\n    cookies: Map<string, string> = null\n  ): Promise<Response> {\n    const setBody = (requestInit: RequestInit, headerMap: Map<string, string>) => {\n      if (body != null) {\n        headerMap.set(\"Content-Type\", \"application/json; charset=utf-8\");\n        requestInit.body = JSON.stringify(body);\n      }\n    };\n    return await this.post(endpoint, setBody, headers, cookies);\n  }\n\n  private async post(\n    endpoint: string,\n    setBody: (requestInit: RequestInit, headers: Map<string, string>) => void,\n    headers: Map<string, string> = null,\n    cookies: Map<string, string> = null\n  ) {\n    const requestInit: RequestInit = {\n      method: \"POST\",\n      credentials: \"include\",\n    };\n    if (headers == null) {\n      headers = new Map<string, string>();\n    }\n    setBody(requestInit, headers);\n    this.setHeaders(requestInit, headers, cookies);\n    const request = new Request(this.baseUrl + \"/\" + endpoint, requestInit);\n    const response = await fetch(request);\n    return response;\n  }\n\n  private setHeaders(\n    requestInit: RequestInit,\n    headers: Map<string, string> = null,\n    cookies: Map<string, string> = null\n  ) {\n    const requestHeaders = new Headers();\n    let setHeaders = false;\n    if (headers != null && headers.size > 0) {\n      setHeaders = true;\n      for (const [key, value] of headers) {\n        requestHeaders.set(key, value);\n      }\n    }\n    // Cookies should be already automatically set for this origin by the browser\n    // TODO: set cookies for non-browser scenarios?\n    if (!this.isBrowser && cookies != null && cookies.size > 0) {\n      setHeaders = true;\n      const cookieString = Array.from(cookies.keys())\n        .map((key) => `${key}=${cookies.get(key)}`)\n        .join(\"; \");\n      requestHeaders.set(\"cookie\", cookieString);\n    }\n    if (setHeaders) {\n      requestInit.headers = requestHeaders;\n    }\n  }\n}\n","import { HttpStatusCode } from \"@bitwarden/common/enums\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nimport { OtpMethod, Platform } from \"../enums\";\nimport {\n  Account,\n  Chunk,\n  ClientInfo,\n  OobResult,\n  OtpResult,\n  ParserOptions,\n  Session,\n  SharedFolder,\n} from \"../models\";\nimport { Ui } from \"../ui\";\n\nimport { BinaryReader } from \"./binary-reader\";\nimport { CryptoUtils } from \"./crypto-utils\";\nimport { Parser } from \"./parser\";\nimport { RestClient } from \"./rest-client\";\n\nconst PlatformToUserAgent = new Map<Platform, string>([\n  [Platform.Desktop, \"cli\"],\n  [Platform.Mobile, \"android\"],\n]);\n\nconst KnownOtpMethods = new Map<string, OtpMethod>([\n  [\"googleauthrequired\", OtpMethod.GoogleAuth],\n  [\"microsoftauthrequired\", OtpMethod.MicrosoftAuth],\n  [\"otprequired\", OtpMethod.Yubikey],\n]);\n\nexport class Client {\n  constructor(private parser: Parser, private cryptoUtils: CryptoUtils) {}\n\n  async openVault(\n    username: string,\n    password: string,\n    clientInfo: ClientInfo,\n    ui: Ui,\n    options: ParserOptions\n  ): Promise<Account[]> {\n    const lowercaseUsername = username.toLowerCase();\n    const [session, rest] = await this.login(lowercaseUsername, password, clientInfo, ui);\n    try {\n      const blob = await this.downloadVault(session, rest);\n      const key = await this.cryptoUtils.deriveKey(\n        lowercaseUsername,\n        password,\n        session.keyIterationCount\n      );\n\n      let privateKey: Uint8Array = null;\n      if (session.encryptedPrivateKey != null && session.encryptedPrivateKey != \"\") {\n        privateKey = await this.parser.parseEncryptedPrivateKey(session.encryptedPrivateKey, key);\n      }\n\n      return this.parseVault(blob, key, privateKey, options);\n    } finally {\n      await this.logout(session, rest);\n    }\n  }\n\n  private async parseVault(\n    blob: Uint8Array,\n    encryptionKey: Uint8Array,\n    privateKey: Uint8Array,\n    options: ParserOptions\n  ): Promise<Account[]> {\n    const reader = new BinaryReader(blob);\n    const chunks = this.parser.extractChunks(reader);\n    if (!this.isComplete(chunks)) {\n      throw new Error(\"Blob is truncated or corrupted\");\n    }\n    return await this.parseAccounts(chunks, encryptionKey, privateKey, options);\n  }\n\n  private async parseAccounts(\n    chunks: Chunk[],\n    encryptionKey: Uint8Array,\n    privateKey: Uint8Array,\n    options: ParserOptions\n  ): Promise<Account[]> {\n    const accounts = new Array<Account>();\n    let folder: SharedFolder = null;\n    for (const chunk of chunks) {\n      if (chunk.id === \"ACCT\") {\n        const key = folder == null ? encryptionKey : folder.encryptionKey;\n        const account = await this.parser.parseAcct(chunk, key, folder, options);\n        if (account != null) {\n          accounts.push(account);\n        }\n      } else if (chunk.id === \"SHAR\") {\n        folder = await this.parser.parseShar(chunk, encryptionKey, privateKey);\n      }\n    }\n    return accounts;\n  }\n\n  private isComplete(chunks: Chunk[]): boolean {\n    if (chunks.length > 0 && chunks[chunks.length - 1].id === \"ENDM\") {\n      const okChunk = Utils.fromBufferToUtf8(chunks[chunks.length - 1].payload);\n      return okChunk === \"OK\";\n    }\n    return false;\n  }\n\n  private async login(\n    username: string,\n    password: string,\n    clientInfo: ClientInfo,\n    ui: Ui\n  ): Promise<[Session, RestClient]> {\n    const rest = new RestClient();\n    rest.baseUrl = \"https://lastpass.com\";\n\n    /*\n    1. First we need to request PBKDF2 key iteration count.\n    \n    We no longer request the iteration count from the server in a separate request because it\n    started to fail in weird ways. It seems there's a special combination or the UA and cookies\n    that returns the correct result. And that is not 100% reliable. After two or three attempts\n    it starts to fail again with an incorrect result.\n    \n    So we just went back a few years to the original way LastPass used to handle the iterations.\n    Namely, submit the default value and if it fails, the error would contain the correct value:\n    <response><error iterations=\"5000\" /></response>\n    */\n    let keyIterationCount = 100_100;\n\n    let response: Document = null;\n    let session: Session = null;\n\n    // We have a maximum of 3 retries in case we need to try again with the correct domain and/or\n    // the number of KDF iterations the second/third time around.\n    for (let i = 0; i < 3; i++) {\n      // 2. Knowing the iterations count we can hash the password and log in.\n      // On the first attempt simply with the username and password.\n      response = await this.performSingleLoginRequest(\n        username,\n        password,\n        keyIterationCount,\n        new Map<string, any>(),\n        clientInfo,\n        rest\n      );\n\n      session = this.extractSessionFromLoginResponse(response, keyIterationCount, clientInfo);\n      if (session != null) {\n        return [session, rest];\n      }\n\n      // It's possible we're being redirected to another region.\n      const server = this.getOptionalErrorAttribute(response, \"server\");\n      if (server != null && server.trim() != \"\") {\n        rest.baseUrl = \"https://\" + server;\n        continue;\n      }\n\n      // It's possible for the request above to come back with the correct iteration count.\n      // In this case we have to parse and repeat.\n      const correctIterationCount = this.getOptionalErrorAttribute(response, \"iterations\");\n      if (correctIterationCount == null) {\n        break;\n      }\n\n      try {\n        keyIterationCount = parseInt(correctIterationCount);\n      } catch {\n        throw (\n          \"Failed to parse the iteration count, expected an integer value '\" +\n          correctIterationCount +\n          \"'\"\n        );\n      }\n    }\n\n    // 3. The simple login failed. This is usually due to some error, invalid credentials or\n    // a multifactor authentication being enabled.\n    const cause = this.getOptionalErrorAttribute(response, \"cause\");\n    if (cause == null) {\n      throw this.makeLoginError(response);\n    }\n\n    const optMethod = KnownOtpMethods.get(cause);\n    if (optMethod != null) {\n      // 3.1. One-time-password is required\n      session = await this.loginWithOtp(\n        username,\n        password,\n        keyIterationCount,\n        optMethod,\n        clientInfo,\n        ui,\n        rest\n      );\n    } else if (cause === \"outofbandrequired\") {\n      // 3.2. Some out-of-bound authentication is enabled. This does not require any\n      // additional input from the user.\n      session = await this.loginWithOob(\n        username,\n        password,\n        keyIterationCount,\n        this.getAllErrorAttributes(response),\n        clientInfo,\n        ui,\n        rest\n      );\n    }\n\n    // Nothing worked\n    if (session == null) {\n      throw this.makeLoginError(response);\n    }\n\n    // All good\n    return [session, rest];\n  }\n\n  private async loginWithOtp(\n    username: string,\n    password: string,\n    keyIterationCount: number,\n    method: OtpMethod,\n    clientInfo: ClientInfo,\n    ui: Ui,\n    rest: RestClient\n  ): Promise<Session> {\n    let passcode: OtpResult = null;\n    switch (method) {\n      case OtpMethod.GoogleAuth:\n        passcode = await ui.provideGoogleAuthPasscode();\n        break;\n      case OtpMethod.MicrosoftAuth:\n        passcode = await ui.provideMicrosoftAuthPasscode();\n        break;\n      case OtpMethod.Yubikey:\n        passcode = await ui.provideYubikeyPasscode();\n        break;\n      default:\n        throw new Error(\"Invalid OTP method\");\n    }\n\n    if (passcode == OtpResult.cancel) {\n      throw new Error(\"Second factor step is canceled by the user\");\n    }\n\n    const response = await this.performSingleLoginRequest(\n      username,\n      password,\n      keyIterationCount,\n      new Map<string, string>([[\"otp\", passcode.passcode]]),\n      clientInfo,\n      rest\n    );\n\n    const session = this.extractSessionFromLoginResponse(response, keyIterationCount, clientInfo);\n    if (session == null) {\n      throw this.makeLoginError(response);\n    }\n    if (passcode.rememberMe) {\n      await this.markDeviceAsTrusted(session, clientInfo, rest);\n    }\n    return session;\n  }\n\n  private async loginWithOob(\n    username: string,\n    password: string,\n    keyIterationCount: number,\n    parameters: Map<string, string>,\n    clientInfo: ClientInfo,\n    ui: Ui,\n    rest: RestClient\n  ): Promise<Session> {\n    // In case of the OOB auth the server doesn't respond instantly. This works more like a long poll.\n    // The server times out in about 10 seconds so there's no need to back off.\n    const attemptLogin = async (extraParameters: Map<string, any>): Promise<Session> => {\n      const response = await this.performSingleLoginRequest(\n        username,\n        password,\n        keyIterationCount,\n        extraParameters,\n        clientInfo,\n        rest\n      );\n\n      const session = this.extractSessionFromLoginResponse(response, keyIterationCount, clientInfo);\n      if (session != null) {\n        return session;\n      }\n\n      if (this.getOptionalErrorAttribute(response, \"cause\") != \"outofbandrequired\") {\n        throw this.makeLoginError(response);\n      }\n\n      // Retry\n      extraParameters.set(\"outofbandretry\", \"1\");\n      extraParameters.set(\"outofbandretryid\", this.getErrorAttribute(response, \"retryid\"));\n\n      return attemptLogin(extraParameters);\n    };\n\n    const pollingLoginSession = () => {\n      const extraParameters = new Map<string, any>();\n      extraParameters.set(\"outofbandrequest\", 1);\n      return attemptLogin(extraParameters);\n    };\n\n    const passcodeLoginSession = async () => {\n      const answer = await this.approveOob(username, parameters, ui, rest);\n\n      if (answer == OobResult.cancel) {\n        throw new Error(\"Out of band step is canceled by the user\");\n      }\n      const extraParameters = new Map<string, any>();\n      extraParameters.set(\"otp\", answer.passcode);\n      const session = await attemptLogin(extraParameters);\n      if (answer.rememberMe) {\n        await this.markDeviceAsTrusted(session, clientInfo, rest);\n      }\n      return session;\n    };\n\n    const session: Session = await Promise.race([\n      pollingLoginSession(),\n      passcodeLoginSession(),\n    ]).finally(() => {\n      ui.closeMFADialog();\n    });\n    return session;\n  }\n\n  private async approveOob(\n    username: string,\n    parameters: Map<string, string>,\n    ui: Ui,\n    rest: RestClient\n  ): Promise<OobResult> {\n    const method = parameters.get(\"outofbandtype\");\n    if (method == null) {\n      throw new Error(\"Out of band method is not specified\");\n    }\n    switch (method) {\n      case \"lastpassauth\":\n        return ui.approveLastPassAuth();\n      case \"duo\":\n        return this.approveDuo(username, parameters, ui, rest);\n      case \"salesforcehash\":\n        return ui.approveSalesforceAuth();\n      default:\n        throw new Error(\"Out of band method \" + method + \" is not supported\");\n    }\n  }\n\n  private async approveDuo(\n    username: string,\n    parameters: Map<string, string>,\n    ui: Ui,\n    rest: RestClient\n  ): Promise<OobResult> {\n    return parameters.get(\"preferduowebsdk\") == \"1\"\n      ? this.approveDuoWebSdk(username, parameters, ui, rest)\n      : ui.approveDuo();\n  }\n\n  private approveDuoWebSdk(\n    username: string,\n    parameters: Map<string, string>,\n    ui: Ui,\n    rest: RestClient\n  ): Promise<OobResult> {\n    // TODO: implement this instead of calling `approveDuo`\n    return ui.approveDuo();\n  }\n\n  private async markDeviceAsTrusted(session: Session, clientInfo: ClientInfo, rest: RestClient) {\n    const parameters = new Map<string, string>([\n      [\"uuid\", clientInfo.id],\n      [\"trustlabel\", clientInfo.description],\n      [\"token\", session.token],\n    ]);\n    const response = await rest.postForm(\n      \"trust.php\",\n      parameters,\n      null,\n      this.getSessionCookies(session)\n    );\n    if (response.status == HttpStatusCode.Ok) {\n      return;\n    }\n    this.makeError(response);\n  }\n\n  private async logout(session: Session, rest: RestClient) {\n    const parameters = new Map<string, any>([\n      [\"method\", PlatformToUserAgent.get(session.platform)],\n      [\"noredirect\", 1],\n    ]);\n    const response = await rest.postForm(\n      \"logout.php\",\n      parameters,\n      null,\n      this.getSessionCookies(session)\n    );\n    if (response.status == HttpStatusCode.Ok) {\n      return;\n    }\n    this.makeError(response);\n  }\n\n  private async downloadVault(session: Session, rest: RestClient): Promise<Uint8Array> {\n    const endpoint =\n      \"getaccts.php?mobile=1&b64=1&hash=0.0&hasplugin=3.0.23&requestsrc=\" +\n      PlatformToUserAgent.get(session.platform);\n    const response = await rest.get(endpoint, null, this.getSessionCookies(session));\n    if (response.status == HttpStatusCode.Ok) {\n      const b64 = await response.text();\n      return Utils.fromB64ToArray(b64);\n    }\n    this.makeError(response);\n  }\n\n  private getSessionCookies(session: Session) {\n    return new Map<string, string>([[\"PHPSESSID\", encodeURIComponent(session.id)]]);\n  }\n\n  private getErrorAttribute(response: Document, name: string): string {\n    const attr = this.getOptionalErrorAttribute(response, name);\n    if (attr != null) {\n      return attr;\n    }\n    throw new Error(\"Unknown response schema: attribute \" + name + \" is missing\");\n  }\n\n  private getOptionalErrorAttribute(response: Document, name: string): string {\n    const error = response.querySelector(\"response > error\");\n    if (error == null) {\n      return null;\n    }\n    const attr = error.attributes.getNamedItem(name);\n    if (attr == null) {\n      return null;\n    }\n    return attr.value;\n  }\n\n  private getAllErrorAttributes(response: Document): Map<string, string> {\n    const error = response.querySelector(\"response > error\");\n    if (error == null) {\n      return null;\n    }\n    const map = new Map<string, string>();\n    for (const attr of Array.from(error.attributes)) {\n      map.set(attr.name, attr.value);\n    }\n    return map;\n  }\n\n  private extractSessionFromLoginResponse(\n    response: Document,\n    keyIterationCount: number,\n    clientInfo: ClientInfo\n  ): Session {\n    const ok = response.querySelector(\"response > ok\");\n    if (ok == null) {\n      return null;\n    }\n    const sessionId = ok.attributes.getNamedItem(\"sessionid\");\n    if (sessionId == null) {\n      return null;\n    }\n    const token = ok.attributes.getNamedItem(\"token\");\n    if (token == null) {\n      return null;\n    }\n\n    const session = new Session();\n    session.id = sessionId.value;\n    session.keyIterationCount = keyIterationCount;\n    session.token = token.value;\n    session.platform = clientInfo.platform;\n    const privateKey = ok.attributes.getNamedItem(\"privatekeyenc\");\n    if (privateKey != null && privateKey.value != null && privateKey.value.trim() != \"\") {\n      session.encryptedPrivateKey = privateKey.value;\n    }\n\n    return session;\n  }\n\n  private async performSingleLoginRequest(\n    username: string,\n    password: string,\n    keyIterationCount: number,\n    extraParameters: Map<string, any>,\n    clientInfo: ClientInfo,\n    rest: RestClient\n  ) {\n    const hash = await this.cryptoUtils.deriveKeyHash(username, password, keyIterationCount);\n\n    const parameters = new Map<string, any>([\n      [\"method\", PlatformToUserAgent.get(clientInfo.platform)],\n      [\"xml\", \"2\"],\n      [\"username\", username],\n      [\"hash\", Utils.fromBufferToHex(hash.buffer)],\n      [\"iterations\", keyIterationCount],\n      [\"includeprivatekeyenc\", \"1\"],\n      [\"outofbandsupported\", \"1\"],\n      [\"uuid\", clientInfo.id],\n      // TODO: Test against the real server if it's ok to send this every time!\n      [\"trustlabel\", clientInfo.description],\n    ]);\n    for (const [key, value] of extraParameters) {\n      parameters.set(key, value);\n    }\n\n    const response = await rest.postForm(\"login.php\", parameters);\n    if (response.status == HttpStatusCode.Ok) {\n      const text = await response.text();\n      const domParser = new window.DOMParser();\n      return domParser.parseFromString(text, \"text/xml\");\n    }\n    this.makeError(response);\n  }\n\n  private makeError(response: Response) {\n    // TODO: error parsing\n    throw new Error(\n      \"HTTP request to \" + response.url + \" failed with status \" + response.status + \".\"\n    );\n  }\n\n  private makeLoginError(response: Document): string {\n    const error = response.querySelector(\"response > error\");\n    if (error == null) {\n      return \"Unknown response schema\";\n    }\n\n    const cause = error.attributes.getNamedItem(\"cause\");\n    const message = error.attributes.getNamedItem(\"message\");\n\n    if (cause != null) {\n      switch (cause.value) {\n        case \"unknownemail\":\n          return \"Invalid username\";\n        case \"password_invalid\":\n        case \"unknownpassword\":\n          return \"Invalid password\";\n        case \"googleauthfailed\":\n        case \"microsoftauthfailed\":\n        case \"otpfailed\":\n          return \"Second factor code is incorrect\";\n        case \"multifactorresponsefailed\":\n          return \"Out of band authentication failed\";\n        case \"unifiedloginresult\":\n          return \"unifiedloginresult\";\n        default:\n          return message?.value ?? cause.value;\n      }\n    }\n\n    // No cause, maybe at least a message\n    if (message != null) {\n      return message.value;\n    }\n\n    // Nothing we know, just the error element\n    return \"Unknown error\";\n  }\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nexport class CryptoUtils {\n  constructor(private cryptoFunctionService: CryptoFunctionService) {}\n\n  async deriveKey(username: string, password: string, iterationCount: number) {\n    if (iterationCount < 0) {\n      throw new Error(\"Iteration count should be positive\");\n    }\n    if (iterationCount == 1) {\n      return await this.cryptoFunctionService.hash(username + password, \"sha256\");\n    }\n    return await this.cryptoFunctionService.pbkdf2(password, username, \"sha256\", iterationCount);\n  }\n\n  async deriveKeyHash(username: string, password: string, iterationCount: number) {\n    const key = await this.deriveKey(username, password, iterationCount);\n    if (iterationCount == 1) {\n      return await this.cryptoFunctionService.hash(\n        Utils.fromBufferToHex(key.buffer) + password,\n        \"sha256\"\n      );\n    }\n    return await this.cryptoFunctionService.pbkdf2(key, password, \"sha256\", 1);\n  }\n\n  ExclusiveOr(arr1: Uint8Array, arr2: Uint8Array) {\n    if (arr1.length !== arr2.length) {\n      throw new Error(\"Arrays must be the same length.\");\n    }\n    const result = new Uint8Array(arr1.length);\n    for (let i = 0; i < arr1.length; i++) {\n      result[i] = arr1[i] ^ arr2[i];\n    }\n    return result;\n  }\n\n  async decryptAes256PlainWithDefault(\n    data: Uint8Array,\n    encryptionKey: Uint8Array,\n    defaultValue: string\n  ) {\n    try {\n      return this.decryptAes256Plain(data, encryptionKey);\n    } catch {\n      return defaultValue;\n    }\n  }\n\n  async decryptAes256Base64WithDefault(\n    data: Uint8Array,\n    encryptionKey: Uint8Array,\n    defaultValue: string\n  ) {\n    try {\n      return this.decryptAes256Base64(data, encryptionKey);\n    } catch {\n      return defaultValue;\n    }\n  }\n\n  async decryptAes256Plain(data: Uint8Array, encryptionKey: Uint8Array) {\n    if (data.length === 0) {\n      return \"\";\n    }\n    // Byte 33 == character '!'\n    if (data[0] === 33 && data.length % 16 === 1 && data.length > 32) {\n      return this.decryptAes256CbcPlain(data, encryptionKey);\n    }\n    return this.decryptAes256EcbPlain(data, encryptionKey);\n  }\n\n  async decryptAes256Base64(data: Uint8Array, encryptionKey: Uint8Array) {\n    if (data.length === 0) {\n      return \"\";\n    }\n    // Byte 33 == character '!'\n    if (data[0] === 33) {\n      return this.decryptAes256CbcBase64(data, encryptionKey);\n    }\n    return this.decryptAes256EcbBase64(data, encryptionKey);\n  }\n\n  async decryptAes256(\n    data: Uint8Array,\n    encryptionKey: Uint8Array,\n    mode: \"cbc\" | \"ecb\",\n    iv: Uint8Array = new Uint8Array(16)\n  ): Promise<string> {\n    if (data.length === 0) {\n      return \"\";\n    }\n    const plain = await this.cryptoFunctionService.aesDecrypt(data, iv, encryptionKey, mode);\n    return Utils.fromBufferToUtf8(plain);\n  }\n\n  private async decryptAes256EcbPlain(data: Uint8Array, encryptionKey: Uint8Array) {\n    return this.decryptAes256(data, encryptionKey, \"ecb\");\n  }\n\n  private async decryptAes256EcbBase64(data: Uint8Array, encryptionKey: Uint8Array) {\n    const d = Utils.fromB64ToArray(Utils.fromBufferToUtf8(data));\n    return this.decryptAes256(d, encryptionKey, \"ecb\");\n  }\n\n  private async decryptAes256CbcPlain(data: Uint8Array, encryptionKey: Uint8Array) {\n    const d = data.subarray(17);\n    const iv = data.subarray(1, 17);\n    return this.decryptAes256(d, encryptionKey, \"cbc\", iv);\n  }\n\n  private async decryptAes256CbcBase64(data: Uint8Array, encryptionKey: Uint8Array) {\n    const d = Utils.fromB64ToArray(Utils.fromBufferToUtf8(data.subarray(26)));\n    const iv = Utils.fromB64ToArray(Utils.fromBufferToUtf8(data.subarray(1, 25)));\n    return this.decryptAes256(d, encryptionKey, \"cbc\", iv);\n  }\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nimport { Account, Chunk, ParserOptions, SharedFolder } from \"../models\";\n\nimport { BinaryReader } from \"./binary-reader\";\nimport { CryptoUtils } from \"./crypto-utils\";\n\nconst AllowedSecureNoteTypes = new Set<string>([\n  \"Server\",\n  \"Email Account\",\n  \"Database\",\n  \"Instant Messenger\",\n]);\n\nexport class Parser {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private cryptoUtils: CryptoUtils\n  ) {}\n\n  /*\n  May return null when the chunk does not represent an account.\n  All secure notes are ACCTs but not all of them store account information.\n  \n  TODO: Add a test for the folder case!\n  TODO: Add a test case that covers secure note account!\n  */\n  async parseAcct(\n    chunk: Chunk,\n    encryptionKey: Uint8Array,\n    folder: SharedFolder,\n    options: ParserOptions\n  ): Promise<Account> {\n    const placeholder = \"decryption failed\";\n    const reader = new BinaryReader(chunk.payload);\n\n    // Read all items\n    // 0: id\n    const id = Utils.fromBufferToUtf8(this.readItem(reader));\n\n    // 1: name\n    const name = await this.cryptoUtils.decryptAes256PlainWithDefault(\n      this.readItem(reader),\n      encryptionKey,\n      placeholder\n    );\n\n    // 2: group\n    const group = await this.cryptoUtils.decryptAes256PlainWithDefault(\n      this.readItem(reader),\n      encryptionKey,\n      placeholder\n    );\n\n    // 3: url\n    let url = Utils.fromBufferToUtf8(\n      Utils.fromHexToArray(Utils.fromBufferToUtf8(this.readItem(reader)))\n    );\n\n    // Ignore \"group\" accounts. They have no credentials.\n    if (url == \"http://group\") {\n      return null;\n    }\n\n    // 4: extra (notes)\n    const notes = await this.cryptoUtils.decryptAes256PlainWithDefault(\n      this.readItem(reader),\n      encryptionKey,\n      placeholder\n    );\n\n    // 5: fav (is favorite)\n    const isFavorite = Utils.fromBufferToUtf8(this.readItem(reader)) === \"1\";\n\n    // 6: sharedfromaid (?)\n    this.skipItem(reader);\n\n    // 7: username\n    let username = await this.cryptoUtils.decryptAes256PlainWithDefault(\n      this.readItem(reader),\n      encryptionKey,\n      placeholder\n    );\n\n    // 8: password\n    let password = await this.cryptoUtils.decryptAes256PlainWithDefault(\n      this.readItem(reader),\n      encryptionKey,\n      placeholder\n    );\n\n    // 9: pwprotect (?)\n    this.skipItem(reader);\n\n    // 10: genpw (?)\n    this.skipItem(reader);\n\n    // 11: sn (is secure note)\n    const isSecureNote = Utils.fromBufferToUtf8(this.readItem(reader)) === \"1\";\n\n    // Parse secure note\n    if (options.parseSecureNotesToAccount && isSecureNote) {\n      let type = \"\";\n      // ParseSecureNoteServer\n      for (const i of notes.split(\"\\n\")) {\n        const keyValue = i.split(\":\", 2);\n        if (keyValue.length < 2) {\n          continue;\n        }\n        switch (keyValue[0]) {\n          case \"NoteType\":\n            type = keyValue[1];\n            break;\n          case \"Hostname\":\n            url = keyValue[1];\n            break;\n          case \"Username\":\n            username = keyValue[1];\n            break;\n          case \"Password\":\n            password = keyValue[1];\n            break;\n        }\n      }\n\n      // Only the some secure notes contain account-like information\n      if (!AllowedSecureNoteTypes.has(type)) {\n        return null;\n      }\n    }\n\n    // 12: last_touch_gmt (?)\n    this.skipItem(reader);\n\n    // 13: autologin (?)\n    this.skipItem(reader);\n\n    // 14: never_autofill (?)\n    this.skipItem(reader);\n\n    // 15: realm (?)\n    this.skipItem(reader);\n\n    // 16: id_again (?)\n    this.skipItem(reader);\n\n    // 17: custom_js (?)\n    this.skipItem(reader);\n\n    // 18: submit_id (?)\n    this.skipItem(reader);\n\n    // 19: captcha_id (?)\n    this.skipItem(reader);\n\n    // 20: urid (?)\n    this.skipItem(reader);\n\n    // 21: basic_auth (?)\n    this.skipItem(reader);\n\n    // 22: method (?)\n    this.skipItem(reader);\n\n    // 23: action (?)\n    this.skipItem(reader);\n\n    // 24: groupid (?)\n    this.skipItem(reader);\n\n    // 25: deleted (?)\n    this.skipItem(reader);\n\n    // 26: attachkey (?)\n    this.skipItem(reader);\n\n    // 27: attachpresent (?)\n    this.skipItem(reader);\n\n    // 28: individualshare (?)\n    this.skipItem(reader);\n\n    // 29: notetype (?)\n    this.skipItem(reader);\n\n    // 30: noalert (?)\n    this.skipItem(reader);\n\n    // 31: last_modified_gmt (?)\n    this.skipItem(reader);\n\n    // 32: hasbeenshared (?)\n    this.skipItem(reader);\n\n    // 33: last_pwchange_gmt (?)\n    this.skipItem(reader);\n\n    // 34: created_gmt (?)\n    this.skipItem(reader);\n\n    // 35: vulnerable (?)\n    this.skipItem(reader);\n\n    // 36: pwch (?)\n    this.skipItem(reader);\n\n    // 37: breached (?)\n    this.skipItem(reader);\n\n    // 38: template (?)\n    this.skipItem(reader);\n\n    // 39: totp (?)\n    const totp = await this.cryptoUtils.decryptAes256PlainWithDefault(\n      this.readItem(reader),\n      encryptionKey,\n      placeholder\n    );\n\n    // 3 more left. Don't even bother skipping them.\n\n    // 40: trustedHostnames (?)\n    // 41: last_credential_monitoring_gmt (?)\n    // 42: last_credential_monitoring_stat (?)\n\n    // Adjust the path to include the group and the shared folder, if any.\n    const path = this.makeAccountPath(group, folder);\n\n    const account = new Account();\n    account.id = id;\n    account.name = name;\n    account.username = username;\n    account.password = password;\n    account.url = url;\n    account.path = path;\n    account.notes = notes;\n    account.totp = totp;\n    account.isFavorite = isFavorite;\n    account.isShared = folder != null;\n    return account;\n  }\n\n  async parseShar(\n    chunk: Chunk,\n    encryptionKey: Uint8Array,\n    rsaKey: Uint8Array\n  ): Promise<SharedFolder> {\n    const reader = new BinaryReader(chunk.payload);\n\n    // Id\n    const id = Utils.fromBufferToUtf8(this.readItem(reader));\n\n    // Key\n    const folderKey = this.readItem(reader);\n    const rsaEncryptedFolderKey = Utils.fromHexToArray(Utils.fromBufferToUtf8(folderKey));\n    const decFolderKey = await this.cryptoFunctionService.rsaDecrypt(\n      rsaEncryptedFolderKey,\n      rsaKey,\n      \"sha1\"\n    );\n    const key = Utils.fromHexToArray(Utils.fromBufferToUtf8(decFolderKey));\n\n    // Name\n    const encryptedName = this.readItem(reader);\n    const name = await this.cryptoUtils.decryptAes256Base64(encryptedName, key);\n\n    const folder = new SharedFolder();\n    folder.id = id;\n    folder.name = name;\n    folder.encryptionKey = key;\n    return folder;\n  }\n\n  async parseEncryptedPrivateKey(encryptedPrivateKey: string, encryptionKey: Uint8Array) {\n    const decrypted = await this.cryptoUtils.decryptAes256(\n      Utils.fromHexToArray(encryptedPrivateKey),\n      encryptionKey,\n      \"cbc\",\n      encryptionKey.subarray(0, 16)\n    );\n\n    const header = \"LastPassPrivateKey<\";\n    const footer = \">LastPassPrivateKey\";\n    if (!decrypted.startsWith(header) || !decrypted.endsWith(footer)) {\n      throw new Error(\"Failed to decrypt private key\");\n    }\n\n    const parsedKey = decrypted.substring(header.length, decrypted.length - footer.length);\n    const pkcs8 = Utils.fromHexToArray(parsedKey);\n    return pkcs8;\n  }\n\n  makeAccountPath(group: string, folder: SharedFolder): string {\n    const groupEmpty = group == null || group.trim() === \"\";\n    if (folder == null) {\n      return groupEmpty ? \"(none)\" : group;\n    }\n    return groupEmpty ? folder.name : folder.name + \"\\\\\" + group;\n  }\n\n  extractChunks(reader: BinaryReader): Chunk[] {\n    const chunks = new Array<Chunk>();\n    while (!reader.atEnd()) {\n      const chunk = this.readChunk(reader);\n      chunks.push(chunk);\n\n      // TODO: catch end of stream exception?\n      // In case the stream is truncated we just ignore the incomplete chunk.\n    }\n    return chunks;\n  }\n\n  private readChunk(reader: BinaryReader): Chunk {\n    /*\n    LastPass blob chunk is made up of 4-byte ID, big endian 4-byte size and payload of that size\n    Example:\n      0000: 'IDID'\n      0004: 4\n      0008: 0xDE 0xAD 0xBE 0xEF\n      000C: --- Next chunk ---\n    */\n    const chunk = new Chunk();\n    chunk.id = this.readId(reader);\n    chunk.payload = this.readPayload(reader, this.readSize(reader));\n    return chunk;\n  }\n\n  private readItem(reader: BinaryReader): Uint8Array {\n    /*\n    An item in an itemized chunk is made up of the big endian size and the payload of that size\n    Example:\n      0000: 4\n      0004: 0xDE 0xAD 0xBE 0xEF\n      0008: --- Next item ---\n    See readItem for item description.\n    */\n    return this.readPayload(reader, this.readSize(reader));\n  }\n\n  private skipItem(reader: BinaryReader): void {\n    // See readItem for item description.\n    reader.seekFromCurrentPosition(this.readSize(reader));\n  }\n\n  private readId(reader: BinaryReader): string {\n    return Utils.fromBufferToUtf8(reader.readBytes(4));\n  }\n\n  private readSize(reader: BinaryReader): number {\n    return reader.readUInt32BigEndian();\n  }\n\n  private readPayload(reader: BinaryReader, size: number): Uint8Array {\n    return reader.readBytes(size);\n  }\n}\n","import * as papa from \"papaparse\";\n\nimport { TokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { HttpStatusCode } from \"@bitwarden/common/enums\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nimport { IdpProvider } from \"./enums\";\nimport {\n  Account,\n  ClientInfo,\n  ExportedAccount,\n  FederatedUserContext,\n  ParserOptions,\n  UserTypeContext,\n} from \"./models\";\nimport { Client, CryptoUtils, Parser, RestClient } from \"./services\";\nimport { Ui } from \"./ui\";\n\nexport class Vault {\n  accounts: Account[];\n  userType: UserTypeContext;\n\n  private client: Client;\n  private cryptoUtils: CryptoUtils;\n\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private tokenService: TokenService\n  ) {\n    this.cryptoUtils = new CryptoUtils(cryptoFunctionService);\n    const parser = new Parser(cryptoFunctionService, this.cryptoUtils);\n    this.client = new Client(parser, this.cryptoUtils);\n  }\n\n  async open(\n    username: string,\n    password: string,\n    clientInfo: ClientInfo,\n    ui: Ui,\n    parserOptions: ParserOptions = ParserOptions.default\n  ): Promise<void> {\n    this.accounts = await this.client.openVault(username, password, clientInfo, ui, parserOptions);\n  }\n\n  async openFederated(\n    federatedUser: FederatedUserContext,\n    clientInfo: ClientInfo,\n    ui: Ui,\n    parserOptions: ParserOptions = ParserOptions.default\n  ): Promise<void> {\n    if (federatedUser == null) {\n      throw new Error(\"Federated user context is not set.\");\n    }\n    const k1 = await this.getK1(federatedUser);\n    const k2 = await this.getK2(federatedUser);\n    const hiddenPasswordArr = await this.cryptoFunctionService.hash(\n      this.cryptoUtils.ExclusiveOr(k1, k2),\n      \"sha256\"\n    );\n    const hiddenPassword = Utils.fromBufferToB64(hiddenPasswordArr);\n    await this.open(federatedUser.username, hiddenPassword, clientInfo, ui, parserOptions);\n  }\n\n  async setUserTypeContext(username: string) {\n    const lowercaseUsername = username.toLowerCase();\n    const rest = new RestClient();\n    rest.baseUrl = \"https://lastpass.com\";\n    const endpoint = \"lmiapi/login/type?username=\" + encodeURIComponent(lowercaseUsername);\n    const response = await rest.get(endpoint);\n    if (response.status === HttpStatusCode.Ok) {\n      const json = await response.json();\n      this.userType = new UserTypeContext();\n      this.userType.companyId = json.CompanyId;\n      this.userType.identityProviderGUID = json.IdentityProviderGUID;\n      this.userType.identityProviderURL = json.IdentityProviderURL;\n      this.userType.isPasswordlessEnabled = json.IsPasswordlessEnabled;\n      this.userType.openIDConnectAuthority = json.OpenIDConnectAuthority;\n      this.userType.openIDConnectClientId = json.OpenIDConnectClientId;\n      this.userType.pkceEnabled = json.PkceEnabled;\n      this.userType.provider = json.Provider;\n      this.userType.type = json.type;\n      return;\n    }\n    throw new Error(\"Cannot determine LastPass user type.\");\n  }\n\n  accountsToExportedCsvString(skipShared = false): string {\n    if (this.accounts == null) {\n      throw new Error(\"Vault has not opened any accounts.\");\n    }\n\n    const exportedAccounts = this.accounts\n      .filter((a) => !a.isShared || (a.isShared && !skipShared))\n      .map((a) => new ExportedAccount(a));\n\n    if (exportedAccounts.length === 0) {\n      throw new Error(\"No accounts to transform\");\n    }\n    return papa.unparse(exportedAccounts);\n  }\n\n  private async getK1(federatedUser: FederatedUserContext): Promise<Uint8Array> {\n    if (this.userType == null) {\n      throw new Error(\"User type is not set.\");\n    }\n\n    if (!this.userType.isFederated()) {\n      throw new Error(\"Cannot get k1 for LastPass user that is not federated.\");\n    }\n\n    if (federatedUser == null) {\n      throw new Error(\"Federated user is not set.\");\n    }\n\n    let k1: Uint8Array = null;\n    if (federatedUser.idpUserInfo?.LastPassK1 != null) {\n      return Utils.fromByteStringToArray(federatedUser.idpUserInfo.LastPassK1);\n    } else if (this.userType.provider === IdpProvider.Azure) {\n      k1 = await this.getK1Azure(federatedUser);\n    } else if (this.userType.provider === IdpProvider.Google) {\n      k1 = await this.getK1Google(federatedUser);\n    } else {\n      const b64Encoded = this.userType.provider === IdpProvider.PingOne;\n      k1 = await this.getK1FromAccessToken(federatedUser, b64Encoded);\n    }\n\n    if (k1 != null) {\n      return k1;\n    }\n\n    throw new Error(\"Cannot get k1.\");\n  }\n\n  private async getK1Azure(federatedUser: FederatedUserContext) {\n    // Query the Graph API for the k1 field\n    const rest = new RestClient();\n    rest.baseUrl = \"https://graph.microsoft.com\";\n    const response = await rest.get(\n      \"v1.0/me?$select=id,displayName,mail&$expand=extensions\",\n      new Map([[\"Authorization\", \"Bearer \" + federatedUser.accessToken]])\n    );\n    if (response.status === HttpStatusCode.Ok) {\n      const json = await response.json();\n      if (json?.extensions != null && json.extensions.length > 0) {\n        const k1 = json.extensions[0].LastPassK1 as string;\n        if (k1 != null) {\n          return Utils.fromB64ToArray(k1);\n        }\n      }\n    }\n    return null;\n  }\n\n  private async getK1Google(federatedUser: FederatedUserContext) {\n    // Query Google Drive for the k1.lp file\n    const accessTokenAuthHeader = new Map([\n      [\"Authorization\", \"Bearer \" + federatedUser.accessToken],\n    ]);\n    const rest = new RestClient();\n    rest.baseUrl = \"https://content.googleapis.com\";\n    const response = await rest.get(\n      \"drive/v3/files?pageSize=1\" +\n        \"&q=name%20%3D%20%27k1.lp%27\" +\n        \"&spaces=appDataFolder\" +\n        \"&fields=nextPageToken%2C%20files(id%2C%20name)\",\n      accessTokenAuthHeader\n    );\n    if (response.status === HttpStatusCode.Ok) {\n      const json = await response.json();\n      const files = json?.files as any[];\n      if (files != null && files.length > 0 && files[0].id != null && files[0].name === \"k1.lp\") {\n        // Open the k1.lp file\n        rest.baseUrl = \"https://www.googleapis.com\";\n        const response = await rest.get(\n          \"drive/v3/files/\" + files[0].id + \"?alt=media\",\n          accessTokenAuthHeader\n        );\n        if (response.status === HttpStatusCode.Ok) {\n          const k1 = await response.text();\n          return Utils.fromB64ToArray(k1);\n        }\n      }\n    }\n    return null;\n  }\n\n  private async getK1FromAccessToken(federatedUser: FederatedUserContext, b64: boolean) {\n    const decodedAccessToken = await this.tokenService.decodeToken(federatedUser.accessToken);\n    const k1 = decodedAccessToken?.LastPassK1 as string;\n    if (k1 != null) {\n      return b64 ? Utils.fromB64ToArray(k1) : Utils.fromByteStringToArray(k1);\n    }\n    return null;\n  }\n\n  private async getK2(federatedUser: FederatedUserContext): Promise<Uint8Array> {\n    if (this.userType == null) {\n      throw new Error(\"User type is not set.\");\n    }\n\n    if (!this.userType.isFederated()) {\n      throw new Error(\"Cannot get k2 for LastPass user that is not federated.\");\n    }\n\n    const rest = new RestClient();\n    rest.baseUrl = this.userType.identityProviderURL;\n    const response = await rest.postJson(\"federatedlogin/api/v1/getkey\", {\n      company_id: this.userType.companyId,\n      id_token: federatedUser.idToken,\n    });\n    if (response.status === HttpStatusCode.Ok) {\n      const json = await response.json();\n      const k2 = json?.k2 as string;\n      if (k2 != null) {\n        return Utils.fromB64ToArray(k2);\n      }\n    }\n    throw new Error(\"Cannot get k2.\");\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { ButtonModule, DialogModule, DialogService } from \"@bitwarden/components\";\n\n@Component({\n  templateUrl: \"lastpass-await-sso-dialog.component.html\",\n  standalone: true,\n  imports: [JslibModule, ButtonModule, DialogModule],\n})\nexport class LastPassAwaitSSODialogComponent {\n  static open(dialogService: DialogService) {\n    return dialogService.open<boolean>(LastPassAwaitSSODialogComponent);\n  }\n}\n","<bit-simple-dialog>\n  <div bitDialogIcon>\n    <i class=\"bwi bwi-key bwi-2x tw-text-warning\" aria-hidden=\"true\"></i>\n  </div>\n  <span bitDialogTitle>{{ \"awaitingSSO\" | i18n }}</span>\n  <span bitDialogContent>\n    {{ \"awaitingSSODesc\" | i18n }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button bitButton type=\"button\" buttonType=\"secondary\" [bitDialogClose]=\"true\">\n      {{ \"cancel\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { DialogRef } from \"@angular/cdk/dialog\";\nimport { CommonModule } from \"@angular/common\";\nimport { Component } from \"@angular/core\";\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport {\n  AsyncActionsModule,\n  ButtonModule,\n  DialogModule,\n  DialogService,\n  FormFieldModule,\n  IconButtonModule,\n  TypographyModule,\n} from \"@bitwarden/components\";\n\n@Component({\n  templateUrl: \"lastpass-password-prompt.component.html\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    JslibModule,\n    ReactiveFormsModule,\n    DialogModule,\n    FormFieldModule,\n    AsyncActionsModule,\n    ButtonModule,\n    IconButtonModule,\n    TypographyModule,\n  ],\n})\nexport class LastPassPasswordPromptComponent {\n  protected formGroup = new FormGroup({\n    password: new FormControl(\"\", {\n      validators: Validators.required,\n      updateOn: \"submit\",\n    }),\n  });\n\n  constructor(public dialogRef: DialogRef) {}\n\n  submit = () => {\n    this.formGroup.markAsTouched();\n    if (!this.formGroup.valid) {\n      return;\n    }\n    this.dialogRef.close(this.formGroup.controls.password.value);\n  };\n\n  static open(dialogService: DialogService) {\n    const dialogRef = dialogService.open<string>(LastPassPasswordPromptComponent);\n    return firstValueFrom(dialogRef.closed);\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog>\n    <span bitDialogTitle>\n      {{ \"lastPassAuthRequired\" | i18n }}\n    </span>\n\n    <div bitDialogContent>\n      <bit-form-field class=\"!tw-mb-0\">\n        <bit-label>{{ \"lastPassMasterPassword\" | i18n }}</bit-label>\n        <input bitInput type=\"password\" formControlName=\"password\" appAutofocus appInputVerbatim />\n        <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n        <bit-hint>{{ \"confirmIdentity\" | i18n }}</bit-hint>\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" type=\"submit\" bitFormButton>\n        <span>{{ \"submit\" | i18n }}</span>\n      </button>\n      <button bitButton bitDialogClose buttonType=\"secondary\" type=\"button\" bitFormButton>\n        <span>{{ \"cancel\" | i18n }}</span>\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { DIALOG_DATA, DialogRef } from \"@angular/cdk/dialog\";\nimport { CommonModule } from \"@angular/common\";\nimport { Component, Inject } from \"@angular/core\";\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from \"@angular/forms\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport {\n  AsyncActionsModule,\n  ButtonModule,\n  DialogModule,\n  DialogService,\n  FormFieldModule,\n  IconButtonModule,\n  TypographyModule,\n} from \"@bitwarden/components\";\n\nexport type LastPassMultifactorPromptVariant = \"otp\" | \"oob\" | \"yubikey\";\n\ntype LastPassMultifactorPromptData = {\n  variant: LastPassMultifactorPromptVariant;\n};\n\n@Component({\n  templateUrl: \"lastpass-multifactor-prompt.component.html\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    JslibModule,\n    ReactiveFormsModule,\n    DialogModule,\n    FormFieldModule,\n    AsyncActionsModule,\n    ButtonModule,\n    IconButtonModule,\n    TypographyModule,\n  ],\n})\nexport class LastPassMultifactorPromptComponent {\n  private variant = this.data.variant;\n\n  protected get descriptionI18nKey(): string {\n    switch (this.variant) {\n      case \"oob\":\n        return \"lastPassOOBDesc\";\n      case \"yubikey\":\n        return \"lastPassYubikeyDesc\";\n      case \"otp\":\n      default:\n        return \"lastPassMFADesc\";\n    }\n  }\n\n  protected formGroup = new FormGroup({\n    passcode: new FormControl(\"\", {\n      validators: Validators.required,\n      updateOn: \"submit\",\n    }),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) protected data: LastPassMultifactorPromptData\n  ) {}\n\n  submit = () => {\n    this.formGroup.markAsTouched();\n    if (!this.formGroup.valid) {\n      return;\n    }\n    this.dialogRef.close(this.formGroup.value.passcode);\n  };\n\n  static open(dialogService: DialogService, data: LastPassMultifactorPromptData) {\n    return dialogService.open<string>(LastPassMultifactorPromptComponent, { data });\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog>\n    <span bitDialogTitle>\n      {{ \"lastPassMFARequired\" | i18n }}\n    </span>\n\n    <div bitDialogContent>\n      <p>{{ descriptionI18nKey | i18n }}</p>\n      <bit-form-field class=\"!tw-mb-0\">\n        <bit-label>{{ \"passcode\" | i18n }}</bit-label>\n        <input bitInput type=\"text\" formControlName=\"passcode\" appAutofocus appInputVerbatim />\n        <bit-hint>{{ \"confirmIdentity\" | i18n }}</bit-hint>\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" type=\"submit\" bitFormButton>\n        <span>{{ \"continue\" | i18n }}</span>\n      </button>\n      <button bitButton bitDialogClose=\"cancel\" buttonType=\"secondary\" type=\"button\" bitFormButton>\n        <span>{{ \"cancel\" | i18n }}</span>\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { DialogRef } from \"@angular/cdk/dialog\";\nimport { Injectable } from \"@angular/core\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { OtpResult, OobResult } from \"../../importers/lastpass/access/models\";\nimport { Ui } from \"../../importers/lastpass/access/ui\";\n\nimport { LastPassMultifactorPromptComponent } from \"./dialog\";\nimport { LastPassMultifactorPromptVariant } from \"./dialog/lastpass-multifactor-prompt.component\";\n\ntype OtpDialogVariant = Extract<LastPassMultifactorPromptVariant, \"otp\" | \"yubikey\">;\ntype OobDialogVariant = Extract<LastPassMultifactorPromptVariant, \"oob\">;\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class LastPassDirectImportUIService implements Ui {\n  private mfaDialogRef: DialogRef<string>;\n\n  constructor(private dialogService: DialogService) {}\n\n  private async getOTPResult(variant: OtpDialogVariant) {\n    const passcode = await this.openMFADialog(variant);\n    return new OtpResult(passcode, false);\n  }\n\n  private async getOOBResult(variant: OobDialogVariant) {\n    const passcode = await this.openMFADialog(variant);\n    return new OobResult(false, passcode, false);\n  }\n\n  private openMFADialog(variant: LastPassMultifactorPromptVariant) {\n    this.mfaDialogRef = LastPassMultifactorPromptComponent.open(this.dialogService, {\n      variant,\n    });\n    return firstValueFrom(this.mfaDialogRef.closed);\n  }\n\n  closeMFADialog() {\n    this.mfaDialogRef?.close();\n  }\n\n  async provideGoogleAuthPasscode() {\n    return this.getOTPResult(\"otp\");\n  }\n\n  async provideMicrosoftAuthPasscode() {\n    return this.getOTPResult(\"otp\");\n  }\n\n  async provideYubikeyPasscode() {\n    return this.getOTPResult(\"yubikey\");\n  }\n\n  async approveLastPassAuth() {\n    return this.getOOBResult(\"oob\");\n  }\n  async approveDuo() {\n    return this.getOOBResult(\"oob\");\n  }\n  async approveSalesforceAuth() {\n    return this.getOOBResult(\"oob\");\n  }\n}\n","import { Injectable, NgZone } from \"@angular/core\";\nimport { OidcClient } from \"oidc-client-ts\";\nimport { Subject, firstValueFrom } from \"rxjs\";\n\nimport { TokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { ClientType } from \"@bitwarden/common/enums\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { BroadcasterService } from \"@bitwarden/common/platform/abstractions/broadcaster.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { PasswordGenerationServiceAbstraction } from \"@bitwarden/common/tools/generator/password\";\n\nimport { DialogService } from \"../../../../components/src/dialog\";\nimport { ClientInfo, Vault } from \"../../importers/lastpass/access\";\nimport { FederatedUserContext } from \"../../importers/lastpass/access/models\";\n\nimport { LastPassAwaitSSODialogComponent } from \"./dialog/lastpass-await-sso-dialog.component\";\nimport { LastPassPasswordPromptComponent } from \"./dialog/lastpass-password-prompt.component\";\nimport { LastPassDirectImportUIService } from \"./lastpass-direct-import-ui.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class LastPassDirectImportService {\n  private vault: Vault;\n\n  private oidcClient: OidcClient;\n\n  private _ssoImportCallback$ = new Subject<{ oidcCode: string; oidcState: string }>();\n  ssoImportCallback$ = this._ssoImportCallback$.asObservable();\n\n  constructor(\n    private tokenService: TokenService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private environmentService: EnvironmentService,\n    private appIdService: AppIdService,\n    private lastPassDirectImportUIService: LastPassDirectImportUIService,\n    private platformUtilsService: PlatformUtilsService,\n    private passwordGenerationService: PasswordGenerationServiceAbstraction,\n    private broadcasterService: BroadcasterService,\n    private ngZone: NgZone,\n    private dialogService: DialogService\n  ) {\n    this.vault = new Vault(this.cryptoFunctionService, this.tokenService);\n\n    /** TODO: remove this in favor of dedicated service */\n    this.broadcasterService.subscribe(\"LastPassDirectImportService\", (message: any) => {\n      this.ngZone.run(async () => {\n        switch (message.command) {\n          case \"importCallbackLastPass\":\n            this._ssoImportCallback$.next({ oidcCode: message.code, oidcState: message.state });\n            break;\n          default:\n            break;\n        }\n      });\n    });\n  }\n\n  /**\n   * Import a LastPass account by email\n   * @param email\n   * @param includeSharedFolders\n   * @returns The CSV export data of the account\n   */\n  async handleImport(email: string, includeSharedFolders: boolean): Promise<string> {\n    await this.verifyLastPassAccountExists(email);\n\n    if (this.isAccountFederated) {\n      const oidc = await this.handleFederatedLogin(email);\n      const csvData = await this.handleFederatedImport(\n        oidc.oidcCode,\n        oidc.oidcState,\n        includeSharedFolders\n      );\n      return csvData;\n    }\n    const password = await LastPassPasswordPromptComponent.open(this.dialogService);\n    const csvData = await this.handleStandardImport(email, password, includeSharedFolders);\n\n    return csvData;\n  }\n\n  private get isAccountFederated(): boolean {\n    return this.vault.userType.isFederated();\n  }\n\n  private async verifyLastPassAccountExists(email: string) {\n    await this.vault.setUserTypeContext(email);\n  }\n\n  private async handleFederatedLogin(email: string) {\n    const ssoCallbackPromise = firstValueFrom(this.ssoImportCallback$);\n    const request = await this.createOidcSigninRequest(email);\n    this.platformUtilsService.launchUri(request.url);\n\n    const cancelDialogRef = LastPassAwaitSSODialogComponent.open(this.dialogService);\n    const cancelled = firstValueFrom(cancelDialogRef.closed).then((_didCancel) => {\n      throw Error(\"SSO auth cancelled\");\n    });\n\n    return Promise.race<{\n      oidcCode: string;\n      oidcState: string;\n    }>([cancelled, ssoCallbackPromise]).finally(() => {\n      cancelDialogRef.close();\n    });\n  }\n\n  private async createOidcSigninRequest(email: string) {\n    this.oidcClient = new OidcClient({\n      authority: this.vault.userType.openIDConnectAuthorityBase,\n      client_id: this.vault.userType.openIDConnectClientId,\n      redirect_uri: this.getOidcRedirectUrl(),\n      response_type: \"code\",\n      scope: this.vault.userType.oidcScope,\n      response_mode: \"query\",\n      loadUserInfo: true,\n    });\n\n    return await this.oidcClient.createSigninRequest({\n      state: {\n        email,\n      },\n      nonce: await this.passwordGenerationService.generatePassword({\n        length: 20,\n        uppercase: true,\n        lowercase: true,\n        number: true,\n      }),\n    });\n  }\n\n  private getOidcRedirectUrlWithParams(oidcCode: string, oidcState: string) {\n    const redirectUri = this.oidcClient.settings.redirect_uri;\n    const params = \"code=\" + oidcCode + \"&state=\" + oidcState;\n    if (redirectUri.indexOf(\"bitwarden://\") === 0) {\n      return redirectUri + \"/?\" + params;\n    }\n\n    return redirectUri + \"&\" + params;\n  }\n\n  private getOidcRedirectUrl() {\n    const clientType = this.platformUtilsService.getClientType();\n    if (clientType === ClientType.Desktop) {\n      return \"bitwarden://import-callback-lp\";\n    }\n    const webUrl = this.environmentService.getWebVaultUrl();\n    return webUrl + \"/sso-connector.html?lp=1\";\n  }\n\n  private async handleStandardImport(\n    email: string,\n    password: string,\n    includeSharedFolders: boolean\n  ): Promise<string> {\n    const clientInfo = await this.createClientInfo(email);\n    await this.vault.open(email, password, clientInfo, this.lastPassDirectImportUIService, {\n      parseSecureNotesToAccount: false,\n    });\n\n    return this.vault.accountsToExportedCsvString(!includeSharedFolders);\n  }\n\n  private async handleFederatedImport(\n    oidcCode: string,\n    oidcState: string,\n    includeSharedFolders: boolean\n  ): Promise<string> {\n    const response = await this.oidcClient.processSigninResponse(\n      this.getOidcRedirectUrlWithParams(oidcCode, oidcState)\n    );\n    const userState = response.userState as any;\n\n    const federatedUser = new FederatedUserContext();\n    federatedUser.idToken = response.id_token;\n    federatedUser.accessToken = response.access_token;\n    federatedUser.idpUserInfo = response.profile;\n    federatedUser.username = userState.email;\n\n    const clientInfo = await this.createClientInfo(federatedUser.username);\n    await this.vault.openFederated(federatedUser, clientInfo, this.lastPassDirectImportUIService, {\n      parseSecureNotesToAccount: false,\n    });\n\n    return this.vault.accountsToExportedCsvString(!includeSharedFolders);\n  }\n\n  private async createClientInfo(email: string): Promise<ClientInfo> {\n    const appId = await this.appIdService.getAppId();\n    const id = \"lastpass\" + appId + email;\n    const idHash = await this.cryptoFunctionService.hash(id, \"sha256\");\n    return ClientInfo.createClientInfo(Utils.fromBufferToHex(idHash));\n  }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { Component, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport {\n  AsyncValidatorFn,\n  ControlContainer,\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from \"@angular/forms\";\nimport { map } from \"rxjs\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport {\n  CalloutModule,\n  CheckboxModule,\n  FormFieldModule,\n  IconButtonModule,\n  TypographyModule,\n} from \"@bitwarden/components\";\n\nimport { LastPassDirectImportService } from \"./lastpass-direct-import.service\";\n\n@Component({\n  selector: \"import-lastpass\",\n  templateUrl: \"import-lastpass.component.html\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    JslibModule,\n    CalloutModule,\n    TypographyModule,\n    FormFieldModule,\n    ReactiveFormsModule,\n    IconButtonModule,\n    CheckboxModule,\n  ],\n})\nexport class ImportLastPassComponent implements OnInit, OnDestroy {\n  private _parentFormGroup: FormGroup;\n  protected formGroup = this.formBuilder.group({\n    email: [\n      \"\",\n      {\n        validators: [Validators.required, Validators.email],\n        asyncValidators: [this.validateAndEmitData()],\n        updateOn: \"submit\",\n      },\n    ],\n    includeSharedFolders: [false],\n  });\n  protected emailHint$ = this.formGroup.controls.email.statusChanges.pipe(\n    map((status) => {\n      if (status === \"PENDING\") {\n        return this.i18nService.t(\"importingYourAccount\");\n      }\n    })\n  );\n\n  @Output() csvDataLoaded = new EventEmitter<string>();\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private controlContainer: ControlContainer,\n    private logService: LogService,\n    private lastPassDirectImportService: LastPassDirectImportService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit(): void {\n    this._parentFormGroup = this.controlContainer.control as FormGroup;\n    this._parentFormGroup.addControl(\"lastpassOptions\", this.formGroup);\n  }\n\n  ngOnDestroy(): void {\n    this._parentFormGroup.removeControl(\"lastpassOptions\");\n  }\n\n  /**\n   * Attempts to login to the provided LastPass email and retrieve account contents.\n   * Will return a validation error if unable to login or fetch.\n   * Emits account contents to `csvDataLoaded`\n   */\n  validateAndEmitData(): AsyncValidatorFn {\n    return async () => {\n      try {\n        const csvData = await this.lastPassDirectImportService.handleImport(\n          this.formGroup.controls.email.value,\n          this.formGroup.controls.includeSharedFolders.value\n        );\n        this.csvDataLoaded.emit(csvData);\n        return null;\n      } catch (error) {\n        this.logService.error(`LP importer error: ${error}`);\n        return {\n          errors: {\n            message: this.i18nService.t(this.getValidationErrorI18nKey(error)),\n          },\n        };\n      }\n    };\n  }\n\n  private getValidationErrorI18nKey(error: any): string {\n    const message = typeof error === \"string\" ? error : error?.message;\n    switch (message) {\n      case \"SSO auth cancelled\":\n      case \"Second factor step is canceled by the user\":\n      case \"Out of band step is canceled by the user\":\n        return \"multifactorAuthenticationCancelled\";\n      case \"No accounts to transform\":\n      case \"Vault has not opened any accounts.\":\n        return \"noLastPassDataFound\";\n      case \"Invalid username\":\n      case \"Invalid password\":\n        return \"incorrectUsernameOrPassword\";\n      case \"Second factor code is incorrect\":\n      case \"Out of band authentication failed\":\n        return \"multifactorAuthenticationFailed\";\n      case \"unifiedloginresult\":\n        return \"lastPassTryAgainCheckEmail\";\n      default:\n        return \"errorOccurred\";\n    }\n  }\n}\n","<div [formGroup]=\"formGroup\">\n  <bit-form-field>\n    <bit-label>{{ \"lastPassEmail\" | i18n }}</bit-label>\n    <input bitInput type=\"text\" formControlName=\"email\" />\n    <bit-hint>{{ emailHint$ | async }}</bit-hint>\n  </bit-form-field>\n  <bit-form-control>\n    <input\n      bitCheckbox\n      type=\"checkbox\"\n      formControlName=\"includeSharedFolders\"\n      id=\"import-lastpass_input_includeSharedFolders\"\n    />\n    <bit-label>{{ \"includeSharedFolders\" | i18n }}</bit-label>\n  </bit-form-control>\n</div>\n","<bit-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</bit-callout>\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" id=\"import_form_importForm\">\n  <bit-form-field>\n    <bit-label\n      >{{ \"importDestination\" | i18n }}\n      <a\n        target=\"_blank\"\n        rel=\"noopener\"\n        appA11yTitle=\"{{ 'learnAboutImportOptions' | i18n }}\"\n        href=\"https://bitwarden.com/help/import-data/\"\n      >\n        <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n      </a>\n    </bit-label>\n    <bit-select formControlName=\"vaultSelector\">\n      <bit-option\n        *ngIf=\"!importBlockedByPolicy\"\n        [label]=\"'myVault' | i18n\"\n        value=\"myVault\"\n        icon=\"bwi-user\"\n      />\n      <bit-option\n        *ngFor=\"let o of organizations$ | async\"\n        [value]=\"o.id\"\n        [label]=\"o.name\"\n        icon=\"bwi-business\"\n      />\n    </bit-select>\n  </bit-form-field>\n\n  <bit-form-field>\n    <bit-label>{{ organizationId ? (\"collection\" | i18n) : (\"folder\" | i18n) }}</bit-label>\n    <bit-select formControlName=\"targetSelector\">\n      <ng-container *ngIf=\"!organizationId\">\n        <bit-option [value]=\"null\" label=\"-- {{ 'selectImportFolder' | i18n }} --\" />\n        <bit-option\n          *ngFor=\"let f of folders$ | async\"\n          [value]=\"f.id\"\n          [label]=\"f.name\"\n          icon=\"bwi-folder\"\n        />\n      </ng-container>\n      <ng-container *ngIf=\"organizationId\">\n        <bit-option [value]=\"null\" label=\"-- {{ 'selectImportCollection' | i18n }} --\" />\n        <bit-option\n          *ngFor=\"let c of collections$ | async\"\n          [value]=\"c.id\"\n          [label]=\"c.name\"\n          icon=\"bwi-collection\"\n        />\n      </ng-container>\n    </bit-select>\n    <bit-hint>{{\n      \"importTargetHint\"\n        | i18n\n          : (organizationId ? (\"collection\" | i18n | lowercase) : (\"folder\" | i18n | lowercase))\n    }}</bit-hint>\n  </bit-form-field>\n\n  <bit-form-field class=\"tw-w-1/2\">\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <bit-select formControlName=\"format\">\n      <bit-option *ngFor=\"let o of featuredImportOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      <ng-container *ngIf=\"importOptions && importOptions.length\">\n        <bit-option value=\"-\" disabled />\n        <bit-option *ngFor=\"let o of importOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      </ng-container>\n    </bit-select>\n  </bit-form-field>\n  <bit-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      <p bitTypography=\"body1\">\n        {{ \"seeDetailedInstructions\" | i18n }}\n        <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n          https://bitwarden.com/help/import-from-lastpass/</a\n        >\n      </p>\n      <bit-radio-group *ngIf=\"showLastPassToggle\" formControlName=\"lastPassType\">\n        <bit-radio-button class=\"tw-block\" id=\"import_bit-radio-button_lp-direct\" value=\"direct\">\n          <bit-label>{{ \"importDirectlyFromLastPass\" | i18n }}</bit-label>\n        </bit-radio-button>\n        <bit-radio-button class=\"tw-block\" id=\"import_bit-radio-button_lp-csv\" value=\"csv\">\n          <bit-label>{{ \"importFromCSV\" | i18n }}</bit-label>\n        </bit-radio-button>\n      </bit-radio-group>\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n    <ng-container *ngIf=\"format === 'protonpass'\">\n      In the ProtonPass browser extension, go to Settings > Export. Export without PGP encryption\n      and save the zip file.\n    </ng-container>\n  </bit-callout>\n  <import-lastpass\n    *ngIf=\"showLastPassOptions\"\n    [formGroup]=\"formGroup\"\n    (csvDataLoaded)=\"this.formGroup.controls.fileContents.setValue($event)\"\n  ></import-lastpass>\n  <div [hidden]=\"showLastPassOptions\">\n    <bit-form-field>\n      <bit-label>{{ \"selectImportFile\" | i18n }}</bit-label>\n      <div class=\"file-selector\">\n        <button bitButton type=\"button\" buttonType=\"secondary\" (click)=\"fileSelector.click()\">\n          {{ \"chooseFile\" | i18n }}\n        </button>\n        {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n      </div>\n      <input\n        bitInput\n        #fileSelector\n        type=\"file\"\n        id=\"import_input_file\"\n        formControlName=\"file\"\n        (change)=\"setSelectedFile($event)\"\n        hidden\n      />\n    </bit-form-field>\n    <bit-form-field>\n      <bit-label>{{ \"orCopyPasteFileContents\" | i18n }}</bit-label>\n      <textarea\n        id=\"import_textarea_fileContents\"\n        bitInput\n        formControlName=\"fileContents\"\n      ></textarea>\n    </bit-form-field>\n  </div>\n</form>\n","import { CommonModule } from \"@angular/common\";\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from \"@angular/core\";\nimport { FormBuilder, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport * as JSZip from \"jszip\";\nimport { concat, Observable, Subject, lastValueFrom, combineLatest, firstValueFrom } from \"rxjs\";\nimport { filter, map, takeUntil } from \"rxjs/operators\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport {\n  canAccessImportExport,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ClientType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport {\n  AsyncActionsModule,\n  BitSubmitDirective,\n  ButtonModule,\n  CalloutModule,\n  DialogService,\n  FormFieldModule,\n  IconButtonModule,\n  RadioButtonModule,\n  SelectModule,\n} from \"@bitwarden/components\";\n\nimport { ImportOption, ImportResult, ImportType } from \"../models\";\nimport {\n  ImportApiService,\n  ImportApiServiceAbstraction,\n  ImportService,\n  ImportServiceAbstraction,\n} from \"../services\";\n\nimport {\n  FilePasswordPromptComponent,\n  ImportErrorDialogComponent,\n  ImportSuccessDialogComponent,\n} from \"./dialog\";\nimport { ImportLastPassComponent } from \"./lastpass\";\n\n@Component({\n  selector: \"tools-import\",\n  templateUrl: \"import.component.html\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    JslibModule,\n    FormFieldModule,\n    AsyncActionsModule,\n    ButtonModule,\n    IconButtonModule,\n    SelectModule,\n    CalloutModule,\n    ReactiveFormsModule,\n    ImportLastPassComponent,\n    RadioButtonModule,\n  ],\n  providers: [\n    {\n      provide: ImportApiServiceAbstraction,\n      useClass: ImportApiService,\n      deps: [ApiService],\n    },\n    {\n      provide: ImportServiceAbstraction,\n      useClass: ImportService,\n      deps: [\n        CipherService,\n        FolderService,\n        ImportApiServiceAbstraction,\n        I18nService,\n        CollectionService,\n        CryptoService,\n      ],\n    },\n  ],\n})\nexport class ImportComponent implements OnInit, OnDestroy {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileSelected: File;\n\n  folders$: Observable<FolderView[]>;\n  collections$: Observable<CollectionView[]>;\n  organizations$: Observable<Organization[]>;\n\n  private _organizationId: string;\n\n  get organizationId(): string {\n    return this._organizationId;\n  }\n\n  @Input() set organizationId(value: string) {\n    this._organizationId = value;\n    this.organizationService\n      .get$(this._organizationId)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((organization) => {\n        this._organizationId = organization?.id;\n        this.organization = organization;\n      });\n  }\n\n  protected organization: Organization;\n  protected destroy$ = new Subject<void>();\n\n  private _importBlockedByPolicy = false;\n\n  formGroup = this.formBuilder.group({\n    vaultSelector: [\n      \"myVault\",\n      {\n        nonNullable: true,\n        validators: [Validators.required],\n      },\n    ],\n    targetSelector: [null],\n    format: [null as ImportType | null, [Validators.required]],\n    fileContents: [],\n    file: [],\n    lastPassType: [\"direct\" as \"csv\" | \"direct\"],\n  });\n\n  @ViewChild(BitSubmitDirective)\n  private bitSubmit: BitSubmitDirective;\n\n  @Output()\n  formLoading = new EventEmitter<boolean>();\n\n  @Output()\n  formDisabled = new EventEmitter<boolean>();\n\n  @Output()\n  onSuccessfulImport = new EventEmitter<string>();\n\n  ngAfterViewInit(): void {\n    this.bitSubmit.loading$.pipe(takeUntil(this.destroy$)).subscribe((loading) => {\n      this.formLoading.emit(loading);\n    });\n\n    this.bitSubmit.disabled$.pipe(takeUntil(this.destroy$)).subscribe((disabled) => {\n      this.formDisabled.emit(disabled);\n    });\n  }\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected syncService: SyncService,\n    protected dialogService: DialogService,\n    protected folderService: FolderService,\n    protected collectionService: CollectionService,\n    protected organizationService: OrganizationService,\n    protected formBuilder: FormBuilder\n  ) {}\n\n  protected get importBlockedByPolicy(): boolean {\n    return this._importBlockedByPolicy;\n  }\n\n  protected get showLastPassToggle(): boolean {\n    return (\n      this.format === \"lastpasscsv\" &&\n      (this.platformUtilsService.getClientType() === ClientType.Desktop ||\n        this.platformUtilsService.getClientType() === ClientType.Browser)\n    );\n  }\n  protected get showLastPassOptions(): boolean {\n    return this.showLastPassToggle && this.formGroup.controls.lastPassType.value === \"direct\";\n  }\n\n  ngOnInit() {\n    this.setImportOptions();\n\n    this.organizations$ = concat(\n      this.organizationService.memberOrganizations$.pipe(\n        canAccessImportExport(this.i18nService),\n        map((orgs) => orgs.sort(Utils.getSortFunction(this.i18nService, \"name\")))\n      )\n    );\n\n    combineLatest([\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership),\n      this.organizations$,\n    ])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([policyApplies, orgs]) => {\n        this._importBlockedByPolicy = policyApplies;\n        if (policyApplies && orgs.length == 0) {\n          this.formGroup.disable();\n        }\n      });\n\n    if (this.organizationId) {\n      this.formGroup.controls.vaultSelector.patchValue(this.organizationId);\n      this.formGroup.controls.vaultSelector.disable();\n\n      this.collections$ = Utils.asyncToObservable(() =>\n        this.collectionService\n          .getAllDecrypted()\n          .then((c) => c.filter((c2) => c2.organizationId === this.organizationId))\n      );\n    } else {\n      // Filter out the `no folder`-item from folderViews$\n      this.folders$ = this.folderService.folderViews$.pipe(\n        map((folders) => folders.filter((f) => f.id != null))\n      );\n      this.formGroup.controls.targetSelector.disable();\n\n      this.formGroup.controls.vaultSelector.valueChanges\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((value) => {\n          this.organizationId = value != \"myVault\" ? value : undefined;\n          if (!this._importBlockedByPolicy) {\n            this.formGroup.controls.targetSelector.enable();\n          }\n          if (value) {\n            this.collections$ = Utils.asyncToObservable(() =>\n              this.collectionService\n                .getAllDecrypted()\n                .then((c) => c.filter((c2) => c2.organizationId === value))\n            );\n          }\n        });\n\n      this.formGroup.controls.vaultSelector.setValue(\"myVault\");\n    }\n    this.formGroup.controls.format.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.format = value;\n      });\n  }\n\n  submit = async () => {\n    await this.asyncValidatorsFinished();\n\n    if (this.formGroup.invalid) {\n      this.formGroup.markAllAsTouched();\n      return;\n    }\n\n    await this.performImport();\n  };\n\n  private async asyncValidatorsFinished() {\n    if (this.formGroup.pending) {\n      await firstValueFrom(\n        this.formGroup.statusChanges.pipe(filter((status) => status !== \"PENDING\"))\n      );\n    }\n  }\n\n  protected async performImport() {\n    if (this.organization) {\n      const confirmed = await this.dialogService.openSimpleDialog({\n        title: { key: \"warning\" },\n        content: { key: \"importWarning\", placeholders: [this.organization.name] },\n        type: \"warning\",\n      });\n\n      if (!confirmed) {\n        return;\n      }\n    }\n\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    const promptForPassword_callback = async () => {\n      return await this.getFilePassword();\n    };\n\n    const importer = this.importService.getImporter(\n      this.format,\n      promptForPassword_callback,\n      this.organizationId\n    );\n\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      return;\n    }\n\n    const fileEl = document.getElementById(\"import_input_file\") as HTMLInputElement;\n    const files = fileEl.files;\n    let fileContents = this.formGroup.controls.fileContents.value;\n    if ((files == null || files.length === 0) && (fileContents == null || fileContents === \"\")) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    if (this.organizationId) {\n      await this.organizationService.get(this.organizationId)?.isAdmin;\n    }\n\n    try {\n      const result = await this.importService.import(\n        importer,\n        fileContents,\n        this.organizationId,\n        this.formGroup.controls.targetSelector.value,\n        this.canAccessImportExport(this.organizationId)\n      );\n\n      //No errors, display success message\n      this.dialogService.open<unknown, ImportResult>(ImportSuccessDialogComponent, {\n        data: result,\n      });\n\n      this.syncService.fullSync(true);\n      this.onSuccessfulImport.emit(this._organizationId);\n    } catch (e) {\n      this.dialogService.open<unknown, Error>(ImportErrorDialogComponent, {\n        data: e,\n      });\n      this.logService.error(e);\n    }\n  }\n\n  private isUserAdmin(organizationId?: string): boolean {\n    if (!organizationId) {\n      return false;\n    }\n    return this.organizationService.get(this.organizationId)?.isAdmin;\n  }\n\n  private canAccessImportExport(organizationId?: string): boolean {\n    if (!organizationId) {\n      return false;\n    }\n    return this.organizationService.get(this.organizationId)?.canAccessImportExport;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\" && file.name.endsWith(\".1pux\")) {\n      return this.extractZipContent(file, \"export.data\");\n    }\n    if (\n      this.format === \"protonpass\" &&\n      (file.type === \"application/zip\" ||\n        file.type == \"application/x-zip-compressed\" ||\n        file.name.endsWith(\".zip\"))\n    ) {\n      return this.extractZipContent(file, \"Proton Pass/data.json\");\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extractZipContent(zipFile: File, contentFilePath: string): Promise<string> {\n    return new JSZip()\n      .loadAsync(zipFile)\n      .then((zip) => {\n        return zip.file(contentFilePath).async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const dialog = this.dialogService.open<string>(FilePasswordPromptComponent, {\n      ariaModal: true,\n    });\n\n    return await lastValueFrom(dialog.closed);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport {\n  OrganizationService,\n  canAccessVaultTab,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { ImportComponent } from \"@bitwarden/importer/ui\";\n\nimport { SharedModule } from \"../../shared\";\n\n@Component({\n  templateUrl: \"import-web.component.html\",\n  standalone: true,\n  imports: [SharedModule, ImportComponent],\n})\nexport class ImportWebComponent implements OnInit {\n  protected routeOrgId: string = null;\n  protected loading = false;\n  protected disabled = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private organizationService: OrganizationService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.routeOrgId = this.route.snapshot.paramMap.get(\"organizationId\");\n  }\n\n  /**\n   * Callback that is called after a successful import.\n   */\n  protected async onSuccessfulImport(organizationId: string): Promise<void> {\n    if (!organizationId) {\n      await this.router.navigate([\"vault\"]);\n      return;\n    }\n\n    const organization = await firstValueFrom(this.organizationService.get$(organizationId));\n    if (organization == null) {\n      return;\n    }\n\n    if (canAccessVaultTab(organization)) {\n      await this.router.navigate([\"organizations\", organizationId, \"vault\"]);\n    }\n  }\n}\n","<h1 bitTypography=\"h1\">{{ \"importData\" | i18n }}</h1>\n<tools-import\n  (formDisabled)=\"this.disabled = $event\"\n  (formLoading)=\"this.loading = $event\"\n  (onSuccessfulImport)=\"this.onSuccessfulImport($event)\"\n  organizationId=\"{{ routeOrgId }}\"\n></tools-import>\n<button\n  [disabled]=\"disabled\"\n  [loading]=\"loading\"\n  form=\"import_form_importForm\"\n  bitButton\n  type=\"submit\"\n  bitFormButton\n  buttonType=\"primary\"\n>\n  {{ \"importData\" | i18n }}\n</button>\n"],"names":["ImportErrorDialogComponent","constructor","dialogRef","data","dataSource","ngOnInit","split","this","message","length","type","forEach","line","push","ImportSuccessDialogComponent","buildResultList","logins","cards","identities","secureNotes","ciphers","map","c","Login","Card","SecureNote","Identity","list","icon","count","folders","collections","FilePasswordPromptComponent","formBuilder","formGroup","group","filePassword","required","submit","markAsTouched","valid","close","value","IdpProvider","LastpassLoginType","OtpMethod","Platform","Account","Chunk","ClientInfo","static","id","platform","Desktop","description","ExportedAccount","account","url","username","password","totp","extra","notes","name","grouping","path","fav","isFavorite","FederatedUserContext","OobResult","waitForOutOfBand","passcode","rememberMe","waitForApproval","continueWithPasscode","cancel","OtpResult","ParserOptions","parseSecureNotesToAccount","default","Session","SharedFolder","UserTypeContext","isFederated","Federated","hasValue","identityProviderURL","openIDConnectAuthority","openIDConnectClientId","oidcScope","scope","provider","PingOne","openIDConnectAuthorityBase","replace","str","trim","BinaryReader","arr","position","uInt32","Uint32Array","uInt8","Uint8Array","buffer","isLittleEndian","readBytes","Error","slice","subarray","readUInt16","readUInt32","readUInt16BigEndian","result","readUInt32BigEndian","seekFromCurrentPosition","offset","newPosition","atEnd","RestClient","isBrowser","get","endpoint","headers","cookies","requestInit","method","credentials","setHeaders","request","Request","baseUrl","fetch","postForm","parameters","post","headerMap","size","form","FormData","key","set","body","postJson","JSON","stringify","setBody","Map","requestHeaders","Headers","cookieString","Array","from","keys","join","PlatformToUserAgent","Mobile","KnownOtpMethods","GoogleAuth","MicrosoftAuth","Yubikey","Client","parser","cryptoUtils","openVault","clientInfo","ui","options","lowercaseUsername","toLowerCase","session","rest","login","blob","downloadVault","deriveKey","keyIterationCount","privateKey","encryptedPrivateKey","parseEncryptedPrivateKey","parseVault","logout","encryptionKey","reader","chunks","extractChunks","isComplete","parseAccounts","accounts","folder","chunk","parseAcct","parseShar","fromBufferToUtf8","payload","response","i","performSingleLoginRequest","extractSessionFromLoginResponse","server","getOptionalErrorAttribute","correctIterationCount","parseInt","cause","makeLoginError","optMethod","loginWithOtp","loginWithOob","getAllErrorAttributes","provideGoogleAuthPasscode","provideMicrosoftAuthPasscode","provideYubikeyPasscode","markDeviceAsTrusted","attemptLogin","extraParameters","getErrorAttribute","Promise","race","pollingLoginSession","answer","approveOob","passcodeLoginSession","finally","closeMFADialog","approveLastPassAuth","approveDuo","approveSalesforceAuth","approveDuoWebSdk","token","getSessionCookies","status","Ok","makeError","b64","text","fromB64ToArray","encodeURIComponent","attr","error","querySelector","attributes","getNamedItem","ok","sessionId","hash","deriveKeyHash","fromBufferToHex","window","DOMParser","parseFromString","CryptoUtils","cryptoFunctionService","iterationCount","pbkdf2","ExclusiveOr","arr1","arr2","decryptAes256PlainWithDefault","defaultValue","decryptAes256Plain","decryptAes256Base64WithDefault","decryptAes256Base64","decryptAes256CbcPlain","decryptAes256EcbPlain","decryptAes256CbcBase64","decryptAes256EcbBase64","decryptAes256","mode","iv","plain","aesDecrypt","d","AllowedSecureNoteTypes","Set","Parser","placeholder","readItem","fromHexToArray","skipItem","isSecureNote","keyValue","has","makeAccountPath","isShared","rsaKey","folderKey","rsaEncryptedFolderKey","decFolderKey","rsaDecrypt","encryptedName","decrypted","header","footer","startsWith","endsWith","parsedKey","substring","groupEmpty","readChunk","readId","readPayload","readSize","Vault","tokenService","client","open","parserOptions","openFederated","federatedUser","k1","getK1","k2","getK2","hiddenPasswordArr","hiddenPassword","fromBufferToB64","setUserTypeContext","json","userType","companyId","CompanyId","identityProviderGUID","IdentityProviderGUID","IdentityProviderURL","isPasswordlessEnabled","IsPasswordlessEnabled","OpenIDConnectAuthority","OpenIDConnectClientId","pkceEnabled","PkceEnabled","Provider","accountsToExportedCsvString","skipShared","exportedAccounts","filter","a","idpUserInfo","LastPassK1","fromByteStringToArray","Azure","getK1Azure","Google","getK1Google","b64Encoded","getK1FromAccessToken","accessToken","extensions","accessTokenAuthHeader","files","decodedAccessToken","decodeToken","company_id","id_token","idToken","LastPassAwaitSSODialogComponent","dialogService","LastPassPasswordPromptComponent","validators","updateOn","controls","firstValueFrom","closed","LastPassMultifactorPromptComponent","descriptionI18nKey","variant","LastPassDirectImportUIService","getOTPResult","openMFADialog","getOOBResult","mfaDialogRef","LastPassDirectImportService","environmentService","appIdService","lastPassDirectImportUIService","platformUtilsService","passwordGenerationService","broadcasterService","ngZone","_ssoImportCallback$","Subject","ssoImportCallback$","asObservable","vault","subscribe","run","command","next","oidcCode","code","oidcState","state","handleImport","email","includeSharedFolders","verifyLastPassAccountExists","isAccountFederated","oidc","handleFederatedLogin","handleFederatedImport","handleStandardImport","ssoCallbackPromise","createOidcSigninRequest","launchUri","cancelDialogRef","cancelled","then","_didCancel","oidcClient","authority","client_id","redirect_uri","getOidcRedirectUrl","response_type","response_mode","loadUserInfo","createSigninRequest","nonce","generatePassword","uppercase","lowercase","number","getOidcRedirectUrlWithParams","redirectUri","settings","params","indexOf","getClientType","getWebVaultUrl","createClientInfo","processSigninResponse","userState","access_token","profile","getAppId","idHash","ImportLastPassComponent","controlContainer","logService","lastPassDirectImportService","i18nService","asyncValidators","validateAndEmitData","emailHint$","statusChanges","pipe","t","csvDataLoaded","_parentFormGroup","control","addControl","ngOnDestroy","removeControl","csvData","emit","errors","getValidationErrorI18nKey","ImportComponent","organizationId","_organizationId","organizationService","get$","takeUntil","destroy$","organization","ngAfterViewInit","bitSubmit","loading$","loading","formLoading","disabled$","disabled","formDisabled","importService","policyService","syncService","folderService","collectionService","format","_importBlockedByPolicy","vaultSelector","nonNullable","targetSelector","fileContents","file","lastPassType","onSuccessfulImport","asyncValidatorsFinished","invalid","markAllAsTouched","performImport","importBlockedByPolicy","showLastPassToggle","Browser","showLastPassOptions","setImportOptions","organizations$","concat","memberOrganizations$","orgs","sort","getSortFunction","combineLatest","policyAppliesToActiveUser$","PersonalOwnership","policyApplies","disable","patchValue","collections$","asyncToObservable","getAllDecrypted","c2","folders$","folderViews$","f","valueChanges","undefined","enable","setValue","pending","openSimpleDialog","title","content","placeholders","showToast","importer","getImporter","getFilePassword","document","getElementById","getFileContents","e","isAdmin","import","canAccessImportExport","fullSync","isUserAdmin","getFormatInstructionTitle","results","featuredImportOptions","importOptions","o","regularImportOptions","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","extractZipContent","resolve","reject","FileReader","readAsText","onload","evt","pre","textContent","onerror","zipFile","contentFilePath","loadAsync","zip","async","dialog","ariaModal","lastValueFrom","complete","provide","useClass","deps","ImportWebComponent","route","router","routeOrgId","snapshot","paramMap","navigate"],"sourceRoot":""}