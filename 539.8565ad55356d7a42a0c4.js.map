{"version":3,"file":"539.8565ad55356d7a42a0c4.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/components/src/navigation/navigation.module.ts","webpack://@bitwarden/web-vault/../../libs/components/src/layout/layout.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/layout/layout.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.module.ts","webpack://@bitwarden/web-vault/./src/app/layouts/header/header.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/sm-shared.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-base.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-status-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-status-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/requests/project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/form-field/bit-validators/trim.validator.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/requests/secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-with-projects-list.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secret.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/service-account.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/service-account.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/service-account.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.ts","webpack://@bitwarden/web-vault/./src/app/layouts/header/web-header.component.html","webpack://@bitwarden/web-vault/./src/app/layouts/header/web-header.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/new-menu.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/projects-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/new-menu.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/projects-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding-task.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding-task.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/section.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/section.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy-selector/models/enums/ap-item.enum.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy-selector/models/enums/ap-permission.enum.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy-selector/access-policy-selector.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/access-policy.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy-selector/models/ap-item-view.type.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/potential-grantee.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policies-create.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/people-access-policies.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/access-policy.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/project-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy-update.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/granted-policy.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/potential-grantee.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/project-people-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/service-account-people-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy-selector/access-policy-selector.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy-selector/access-policy-selector.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy-selector/models/ap-item-value.type.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-confirmation-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-confirmation-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/access-token.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/revoke-access-tokens.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-token-creation.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-tokens.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/view/access-token.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/event-logs/service-account-event-log-api.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/event-logs/service-accounts-events.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/event-logs/service-accounts-events.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/people/service-account-people.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/people/service-account-people.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/projects/service-account-projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/projects/service-account-projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/guards/service-account-access.guard.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/error/sm-import-error.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-import.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-export.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/sm-export.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting-api.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings.module.ts","webpack://@bitwarden/web-vault/../../libs/components/src/icon/icons/no-access.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/org-suspended.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/org-suspended.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-hard-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-hard-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-restore.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-restore.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/guards/sm.guard.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/guards/sm-org-enabled.guard.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets-manager.module.ts","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.component.ts"],"sourcesContent":["import { OverlayModule } from \"@angular/cdk/overlay\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { IconButtonModule } from \"../icon-button/icon-button.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { NavDividerComponent } from \"./nav-divider.component\";\nimport { NavGroupComponent } from \"./nav-group.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@NgModule({\n  imports: [CommonModule, SharedModule, IconButtonModule, OverlayModule, RouterModule],\n  declarations: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n  exports: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from \"@angular/common\";\nimport { Component, Input } from \"@angular/core\";\n\nexport type LayoutVariant = \"primary\" | \"secondary\";\n\n@Component({\n  selector: \"bit-layout\",\n  templateUrl: \"layout.component.html\",\n  standalone: true,\n  imports: [CommonModule],\n})\nexport class LayoutComponent {\n  @Input() variant: LayoutVariant = \"primary\";\n}\n","<div class=\"tw-flex tw-w-full\">\n  <aside\n    [ngStyle]=\"\n      variant === 'secondary' && {\n        '--color-text-alt2': 'var(--color-text-main)',\n        '--color-background-alt3': 'var(--color-secondary-100)',\n        '--color-background-alt4': 'var(--color-secondary-300)',\n        '--color-secondary-300': 'var(--color-secondary-500)'\n      }\n    \"\n    class=\"tw-fixed tw-inset-y-0 tw-left-0 tw-h-screen tw-w-60 tw-overflow-auto tw-bg-background-alt3\"\n  >\n    <ng-content select=\"[slot=sidebar]\"></ng-content>\n  </aside>\n  <main class=\"tw-ml-60 tw-min-h-screen tw-min-w-0 tw-flex-1 tw-bg-background tw-p-6\">\n    <ng-content></ng-content>\n  </main>\n</div>\n","import { NgModule } from \"@angular/core\";\n\nimport { LayoutComponent as BitLayoutComponent, NavigationModule } from \"@bitwarden/components\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared/shared.module\";\n\nimport { LayoutComponent } from \"./layout.component\";\nimport { NavigationComponent } from \"./navigation.component\";\nimport { OrgSwitcherComponent } from \"./org-switcher.component\";\n\n@NgModule({\n  imports: [SharedModule, NavigationModule, BitLayoutComponent],\n  declarations: [LayoutComponent, NavigationComponent, OrgSwitcherComponent],\n})\nexport class LayoutModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { DynamicAvatarComponent } from \"../../components/dynamic-avatar.component\";\nimport { SharedModule } from \"../../shared\";\nimport { ProductSwitcherModule } from \"../product-switcher/product-switcher.module\";\n\nimport { WebHeaderComponent } from \"./web-header.component\";\n\n@NgModule({\n  imports: [SharedModule, DynamicAvatarComponent, ProductSwitcherModule],\n  declarations: [WebHeaderComponent],\n  exports: [WebHeaderComponent],\n})\nexport class HeaderModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport {\n  MultiSelectModule,\n  SearchModule,\n  SelectModule,\n  NoItemsModule,\n} from \"@bitwarden/components\";\nimport { CoreOrganizationModule } from \"@bitwarden/web-vault/app/admin-console/organizations/core\";\nimport { DynamicAvatarComponent } from \"@bitwarden/web-vault/app/components/dynamic-avatar.component\";\nimport { HeaderModule } from \"@bitwarden/web-vault/app/layouts/header/header.module\";\nimport { ProductSwitcherModule } from \"@bitwarden/web-vault/app/layouts/product-switcher/product-switcher.module\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { AccessPolicySelectorComponent } from \"./access-policies/access-policy-selector/access-policy-selector.component\";\nimport { AccessSelectorComponent } from \"./access-policies/access-selector.component\";\nimport { BulkConfirmationDialogComponent } from \"./dialogs/bulk-confirmation-dialog.component\";\nimport { BulkStatusDialogComponent } from \"./dialogs/bulk-status-dialog.component\";\nimport { NewMenuComponent } from \"./new-menu.component\";\nimport { OrgSuspendedComponent } from \"./org-suspended.component\";\nimport { ProjectsListComponent } from \"./projects-list.component\";\nimport { SecretsListComponent } from \"./secrets-list.component\";\n\n@NgModule({\n  imports: [\n    SharedModule,\n    ProductSwitcherModule,\n    MultiSelectModule,\n    CoreOrganizationModule,\n    NoItemsModule,\n    SelectModule,\n    DynamicAvatarComponent,\n    SearchModule,\n    HeaderModule,\n  ],\n  exports: [\n    AccessPolicySelectorComponent,\n    AccessSelectorComponent,\n    BulkConfirmationDialogComponent,\n    BulkStatusDialogComponent,\n    HeaderModule,\n    NewMenuComponent,\n    NoItemsModule,\n    ProjectsListComponent,\n    SearchModule,\n    SecretsListComponent,\n    SelectModule,\n    SharedModule,\n  ],\n  declarations: [\n    AccessPolicySelectorComponent,\n    AccessSelectorComponent,\n    BulkConfirmationDialogComponent,\n    BulkStatusDialogComponent,\n    BulkStatusDialogComponent,\n    NewMenuComponent,\n    OrgSuspendedComponent,\n    ProjectsListComponent,\n    SecretsListComponent,\n  ],\n  providers: [],\n  bootstrap: [],\n})\nexport class SecretsManagerSharedModule {}\n","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-layout\",\n  templateUrl: \"./layout.component.html\",\n})\nexport class LayoutComponent implements OnInit {\n  ngOnInit() {\n    document.body.classList.remove(\"layout_frontend\");\n  }\n}\n","<bit-layout>\n  <router-outlet slot=\"sidebar\" name=\"sidebar\"></router-outlet>\n  <router-outlet></router-outlet>\n</bit-layout>\n","import { Directive, EventEmitter, Input, Output } from \"@angular/core\";\n\n/**\n * Base class used in `NavGroupComponent` and `NavItemComponent`\n */\n@Directive()\nexport abstract class NavBaseComponent {\n  /**\n   * Text to display in main content\n   */\n  @Input() text: string;\n\n  /**\n   * `aria-label` for main content\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * Optional icon, e.g. `\"bwi-collection\"`\n   */\n  @Input() icon: string;\n\n  /**\n   * Route to be passed to internal `routerLink`\n   */\n  @Input() route: string | any[];\n\n  /**\n   * If this item is used within a tree, set `variant` to `\"tree\"`\n   */\n  @Input() variant: \"default\" | \"tree\" = \"default\";\n\n  /**\n   * Depth level when nested inside of a `'tree'` variant\n   */\n  @Input() treeDepth = 0;\n\n  /**\n   * If `true`, do not change styles when nav item is active.\n   */\n  @Input() hideActiveStyles = false;\n\n  /**\n   * Fires when main content is clicked\n   */\n  @Output() mainContentClicked: EventEmitter<MouseEvent> = new EventEmitter();\n}\n","<div\n  class=\"tw-relative\"\n  [ngClass]=\"[\n    showActiveStyles ? 'tw-bg-background-alt4' : 'tw-bg-background-alt3',\n    fvwStyles$ | async\n  ]\"\n>\n  <div\n    [ngStyle]=\"{\n      'padding-left': (variant === 'tree' ? 2.5 : 1) + treeDepth * 1.5 + 'rem'\n    }\"\n    class=\"tw-relative tw-flex tw-items-center tw-pr-4\"\n    [ngClass]=\"[variant === 'tree' ? 'tw-py-1' : 'tw-py-2']\"\n  >\n    <div\n      #slotStart\n      class=\"[&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*:hover]:!tw-border-text-alt2 [&>*]:!tw-text-alt2\"\n    >\n      <ng-content select=\"[slot=start]\"></ng-content>\n    </div>\n    <!-- Default content for #slotStart (for consistent sizing) -->\n    <div\n      *ngIf=\"slotStart.childElementCount === 0\"\n      [ngClass]=\"{\n        'tw-w-0': variant !== 'tree'\n      }\"\n    >\n      <button\n        type=\"button\"\n        class=\"tw-invisible\"\n        [bitIconButton]=\"'bwi-angle-down'\"\n        size=\"small\"\n        aria-hidden=\"true\"\n      ></button>\n    </div>\n\n    <ng-container *ngIf=\"route; then isAnchor; else isButton\"></ng-container>\n\n    <!-- Main content of `NavItem` -->\n    <ng-template #anchorAndButtonContent>\n      <i class=\"bwi bwi-fw tw-text-alt2 tw-mx-1 {{ icon }}\"></i\n      ><span [ngClass]=\"showActiveStyles ? 'tw-font-bold' : 'tw-font-semibold'\">{{ text }}</span>\n    </ng-template>\n\n    <!-- Show if a value was passed to `this.to` -->\n    <ng-template #isAnchor>\n      <!-- The `fvw` class passes focus to `this.focusVisibleWithin$` -->\n      <!-- The following `class` field should match the `#isButton` class field below -->\n      <a\n        class=\"fvw tw-w-full tw-truncate tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        [routerLink]=\"route\"\n        [attr.aria-label]=\"ariaLabel || text\"\n        routerLinkActive\n        [routerLinkActiveOptions]=\"rlaOptions\"\n        [ariaCurrentWhenActive]=\"'page'\"\n        (isActiveChange)=\"setActive($event)\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </a>\n    </ng-template>\n\n    <!-- Show if `this.to` is falsy -->\n    <ng-template #isButton>\n      <!-- Class field should match `#isAnchor` class field above -->\n      <button\n        type=\"button\"\n        class=\"fvw tw-w-full tw-truncate tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </button>\n    </ng-template>\n\n    <div\n      class=\"tw-flex tw-gap-1 [&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*:hover]:!tw-border-text-alt2 [&>*]:tw-text-alt2\"\n    >\n      <ng-content select=\"[slot=end]\"></ng-content>\n    </div>\n  </div>\n</div>\n","import { Component, HostListener, Input } from \"@angular/core\";\nimport { IsActiveMatchOptions } from \"@angular/router\";\nimport { BehaviorSubject, map } from \"rxjs\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\n\n@Component({\n  selector: \"bit-nav-item\",\n  templateUrl: \"./nav-item.component.html\",\n})\nexport class NavItemComponent extends NavBaseComponent {\n  /**\n   * Is `true` if `to` matches the current route\n   */\n  private _active = false;\n  protected setActive(isActive: boolean) {\n    this._active = isActive;\n  }\n  protected get showActiveStyles() {\n    return this._active && !this.hideActiveStyles;\n  }\n  protected rlaOptions: IsActiveMatchOptions = {\n    paths: \"subset\",\n    queryParams: \"exact\",\n    fragment: \"ignored\",\n    matrixParams: \"ignored\",\n  };\n\n  /**\n   * if `true`, use `exact` match for path instead of `subset`.\n   */\n  @Input() set exactMatch(val: boolean) {\n    this.rlaOptions.paths = val ? \"exact\" : \"subset\";\n  }\n\n  /**\n   * The design spec calls for the an outline to wrap the entire element when the template's anchor/button has :focus-visible.\n   * Usually, we would use :focus-within for this. However, that matches when a child element has :focus instead of :focus-visible.\n   *\n   * Currently, the browser does not have a pseudo selector that combines these two, e.g. :focus-visible-within (WICG/focus-visible#151)\n   * To make our own :focus-visible-within functionality, we use event delegation on the host and manually check if the focus target (denoted with the .fvw class) matches :focus-visible. We then map that state to some styles, so the entire component can have an outline.\n   */\n  protected focusVisibleWithin$ = new BehaviorSubject(false);\n  protected fvwStyles$ = this.focusVisibleWithin$.pipe(\n    map((value) => (value ? \"tw-z-10 tw-rounded tw-outline-none tw-ring tw-ring-text-alt2\" : \"\")),\n  );\n  @HostListener(\"focusin\", [\"$event.target\"])\n  onFocusIn(target: HTMLElement) {\n    this.focusVisibleWithin$.next(target.matches(\".fvw:focus-visible\"));\n  }\n  @HostListener(\"focusout\")\n  onFocusOut() {\n    this.focusVisibleWithin$.next(false);\n  }\n}\n","<!-- This a higher order component that composes `NavItemComponent`  -->\n<bit-nav-item\n  [text]=\"text\"\n  [icon]=\"icon\"\n  [route]=\"route\"\n  [variant]=\"variant\"\n  (mainContentClicked)=\"toggle()\"\n  [treeDepth]=\"treeDepth\"\n  (mainContentClicked)=\"mainContentClicked.emit()\"\n  [ariaLabel]=\"ariaLabel\"\n  [exactMatch]=\"exactMatch\"\n>\n  <ng-template #button>\n    <button\n      type=\"button\"\n      class=\"tw-ml-auto\"\n      [bitIconButton]=\"\n        open ? 'bwi-angle-up' : variant === 'tree' ? 'bwi-angle-right' : 'bwi-angle-down'\n      \"\n      [buttonType]=\"'light'\"\n      (click)=\"toggle($event)\"\n      size=\"small\"\n      [title]=\"'toggleCollapse' | i18n\"\n      aria-haspopup=\"true\"\n      [attr.aria-expanded]=\"open.toString()\"\n      [attr.aria-controls]=\"contentId\"\n      [attr.aria-label]=\"['toggleCollapse' | i18n, text].join(' ')\"\n    ></button>\n  </ng-template>\n\n  <!-- Show toggle to the left for trees otherwise to the right -->\n  <ng-container slot=\"start\" *ngIf=\"variant === 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n  <ng-container slot=\"end\">\n    <ng-content select=\"[slot=end]\"></ng-content>\n    <ng-container *ngIf=\"variant !== 'tree'\">\n      <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n    </ng-container>\n  </ng-container>\n</bit-nav-item>\n\n<!-- [attr.aria-controls] of the above button expects a unique ID on the controlled element -->\n<div\n  *ngIf=\"open\"\n  [attr.id]=\"contentId\"\n  [attr.aria-label]=\"[text, 'submenu' | i18n].join(' ')\"\n  role=\"group\"\n>\n  <ng-content></ng-content>\n</div>\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  QueryList,\n} from \"@angular/core\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@Component({\n  selector: \"bit-nav-group\",\n  templateUrl: \"./nav-group.component.html\",\n})\nexport class NavGroupComponent extends NavBaseComponent implements AfterContentInit {\n  @ContentChildren(forwardRef(() => NavGroupComponent), {\n    descendants: true,\n  })\n  nestedGroups!: QueryList<NavGroupComponent>;\n\n  @ContentChildren(NavItemComponent, {\n    descendants: true,\n  })\n  nestedItems!: QueryList<NavItemComponent>;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n\n  /**\n   * if `true`, use `exact` match for path instead of `subset`.\n   */\n  @Input() exactMatch: boolean;\n\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n\n  /**\n   * - For any nested NavGroupComponents or NavItemComponents, increment the `treeDepth` by 1.\n   */\n  private initNestedStyles() {\n    if (this.variant !== \"tree\") {\n      return;\n    }\n    [...this.nestedGroups, ...this.nestedItems].forEach((navGroupOrItem) => {\n      navGroupOrItem.treeDepth += 1;\n    });\n  }\n\n  ngAfterContentInit(): void {\n    this.initNestedStyles();\n  }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-nav-divider\",\n  templateUrl: \"./nav-divider.component.html\",\n})\nexport class NavDividerComponent {}\n","<div class=\"tw-h-px tw-w-full tw-bg-secondary-300\"></div>\n","<bit-nav-group\n  *ngIf=\"activeOrganization$ | async as activeOrganization\"\n  [text]=\"activeOrganization.name\"\n  [ariaLabel]=\"['organization' | i18n, activeOrganization.name].join(' ')\"\n  icon=\"bwi-business\"\n  [route]=\"['../', activeOrganization.id]\"\n  [(open)]=\"open\"\n  [exactMatch]=\"true\"\n>\n  <i\n    slot=\"end\"\n    *ngIf=\"!activeOrganization.enabled\"\n    class=\"bwi bwi-exclamation-triangle tw-my-auto !tw-text-danger\"\n  ></i>\n  <ng-container *ngIf=\"organizations$ | async as organizations\">\n    <bit-nav-item\n      *ngFor=\"let org of organizations\"\n      [text]=\"org.name\"\n      [ariaLabel]=\"['organization' | i18n, org.name].join(' ')\"\n      [route]=\"['../', org.id]\"\n      (mainContentClicked)=\"toggle()\"\n      [hideActiveStyles]=\"true\"\n    >\n      <i\n        slot=\"end\"\n        *ngIf=\"org.enabled == false\"\n        class=\"bwi bwi-exclamation-triangle !tw-text-danger\"\n      ></i>\n    </bit-nav-item>\n  </ng-container>\n  <bit-nav-item\n    *ngIf=\"!hideNewButton\"\n    icon=\"bwi-plus\"\n    [text]=\"'newOrganization' | i18n\"\n    route=\"/create-organization\"\n  ></bit-nav-item>\n  <bit-nav-divider></bit-nav-divider>\n</bit-nav-group>\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport type { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\n@Component({\n  selector: \"org-switcher\",\n  templateUrl: \"org-switcher.component.html\",\n})\nexport class OrgSwitcherComponent {\n  protected organizations$: Observable<Organization[]> =\n    this.organizationService.organizations$.pipe(\n      map((orgs) =>\n        orgs\n          .filter((org) => this.filter(org))\n          .sort((a, b) => a.name.localeCompare(b.name))\n          .sort((a, b) => (a.enabled ? -1 : 1)),\n      ),\n    );\n\n  protected activeOrganization$: Observable<Organization> = combineLatest([\n    this.route.paramMap,\n    this.organizations$,\n  ]).pipe(map(([params, orgs]) => orgs.find((org) => org.id === params.get(\"organizationId\"))));\n\n  /**\n   * Filter function for displayed organizations in the `org-switcher`\n   * @example\n   * const smFilter = (org: Organization) => org.canAccessSecretsManager\n   * // <org-switcher [filter]=\"smFilter\">\n   */\n  @Input()\n  filter: (org: Organization) => boolean = () => true;\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  /**\n   * Visibility of the New Organization button\n   * (Temporary; will be removed when ability to create organizations is added to SM.)\n   */\n  @Input()\n  hideNewButton = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private organizationService: OrganizationService,\n  ) {}\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n}\n","<nav>\n  <a routerLink=\".\" class=\"tw-m-5 tw-mt-7 tw-block\">\n    <bit-icon [icon]=\"logo\"></bit-icon>\n  </a>\n\n  <org-switcher [filter]=\"orgFilter\" [hideNewButton]=\"true\"></org-switcher>\n  <bit-nav-item icon=\"bwi-collection\" [text]=\"'projects' | i18n\" route=\"projects\"></bit-nav-item>\n  <bit-nav-item icon=\"bwi-key\" [text]=\"'secrets' | i18n\" route=\"secrets\"></bit-nav-item>\n  <bit-nav-item\n    icon=\"bwi-wrench\"\n    [text]=\"'serviceAccounts' | i18n\"\n    route=\"service-accounts\"\n  ></bit-nav-item>\n  <bit-nav-item\n    icon=\"bwi-trash\"\n    [text]=\"'trash' | i18n\"\n    route=\"trash\"\n    *ngIf=\"isAdmin$ | async\"\n  ></bit-nav-item>\n  <bit-nav-group icon=\"bwi-cog\" [text]=\"'settings' | i18n\" *ngIf=\"isAdmin$ | async\">\n    <bit-nav-item [text]=\"'importData' | i18n\" route=\"settings/import\"></bit-nav-item>\n    <bit-nav-item [text]=\"'exportData' | i18n\" route=\"settings/export\"></bit-nav-item>\n  </bit-nav-group>\n</nav>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { SecretsManagerLogo } from \"@bitwarden/web-vault/app/layouts/secrets-manager-logo\";\n\n@Component({\n  selector: \"sm-navigation\",\n  templateUrl: \"./navigation.component.html\",\n})\nexport class NavigationComponent {\n  protected readonly logo = SecretsManagerLogo;\n  protected orgFilter = (org: Organization) => org.canAccessSecretsManager;\n  protected isAdmin$ = this.route.params.pipe(\n    map((params) => this.organizationService.get(params.organizationId)?.isAdmin),\n  );\n\n  constructor(\n    private route: ActivatedRoute,\n    private organizationService: OrganizationService,\n  ) {}\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { ProgressModule } from \"@bitwarden/components\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { OnboardingTaskComponent } from \"./onboarding-task.component\";\nimport { OnboardingComponent } from \"./onboarding.component\";\n\n@NgModule({\n  imports: [SharedModule, ProgressModule],\n  exports: [OnboardingComponent, OnboardingTaskComponent],\n  declarations: [OnboardingComponent, OnboardingTaskComponent],\n})\nexport class OnboardingModule {}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ data.title | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.details.length }}\n      {{ data.subTitle | i18n }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    {{ data.message | i18n }}\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ data.columnTitle | i18n }}</th>\n          <th bitCell>{{ \"error\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let detail of data.details\">\n          <td bitCell>{{ detail.name }}</td>\n          <td bitCell>{{ detail.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton buttonType=\"primary\" bitDialogClose type=\"button\">\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nexport interface BulkStatusDetails {\n  title: string;\n  subTitle: string;\n  columnTitle: string;\n  message: string;\n  details: BulkOperationStatus[];\n}\n\nexport class BulkOperationStatus {\n  id: string;\n  name: string;\n  errorMessage?: string;\n}\n\n@Component({\n  templateUrl: \"./bulk-status-dialog.component.html\",\n})\nexport class BulkStatusDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: BulkStatusDetails,\n  ) {}\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.title ||\n      !this.data.subTitle ||\n      !this.data.columnTitle ||\n      !this.data.message ||\n      !(this.data.details?.length >= 1)\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The bulk status dialog was not called with the appropriate operation values.\",\n      );\n    }\n  }\n}\n","export class ProjectListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n}\n","export class ProjectView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class ProjectRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { ProjectView } from \"../models/view/project.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { ProjectRequest } from \"./models/requests/project.request\";\nimport { ProjectListItemResponse } from \"./models/responses/project-list-item.response\";\nimport { ProjectResponse } from \"./models/responses/project.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProjectService {\n  protected _project = new Subject<ProjectView>();\n  project$ = this._project.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService,\n  ) {}\n\n  async getByProjectId(projectId: string): Promise<ProjectView> {\n    const r = await this.apiService.send(\"GET\", \"/projects/\" + projectId, null, true, true);\n    const projectResponse = new ProjectResponse(r);\n    return await this.createProjectView(projectResponse);\n  }\n\n  async getProjects(organizationId: string): Promise<ProjectListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      null,\n      true,\n      true,\n    );\n    const results = new ListResponse(r, ProjectListItemResponse);\n    return await this.createProjectsListView(organizationId, results.data);\n  }\n\n  async create(organizationId: string, projectView: ProjectView): Promise<ProjectView> {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      request,\n      true,\n      true,\n    );\n\n    const project = await this.createProjectView(new ProjectResponse(r));\n    this._project.next(project);\n    return project;\n  }\n\n  async update(organizationId: string, projectView: ProjectView) {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\"PUT\", \"/projects/\" + projectView.id, request, true, true);\n    this._project.next(await this.createProjectView(new ProjectResponse(r)));\n  }\n\n  async delete(projects: ProjectListView[]): Promise<BulkOperationStatus[]> {\n    const projectIds = projects.map((project) => project.id);\n    const r = await this.apiService.send(\"POST\", \"/projects/delete\", projectIds, true, true);\n    this._project.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = projects.find((project) => project.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getProjectRequest(\n    organizationId: string,\n    projectView: ProjectView,\n  ): Promise<ProjectRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new ProjectRequest();\n    request.name = await this.encryptService.encrypt(projectView.name, orgKey);\n\n    return request;\n  }\n\n  private async createProjectView(projectResponse: ProjectResponse) {\n    const orgKey = await this.getOrganizationKey(projectResponse.organizationId);\n\n    const projectView = new ProjectView();\n    projectView.id = projectResponse.id;\n    projectView.organizationId = projectResponse.organizationId;\n    projectView.creationDate = projectResponse.creationDate;\n    projectView.revisionDate = projectResponse.revisionDate;\n    projectView.read = projectResponse.read;\n    projectView.write = projectResponse.write;\n    projectView.name = await this.encryptService.decryptToUtf8(\n      new EncString(projectResponse.name),\n      orgKey,\n    );\n    return projectView;\n  }\n\n  private async createProjectsListView(\n    organizationId: string,\n    projects: ProjectListItemResponse[],\n  ): Promise<ProjectListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      projects.map(async (s: ProjectListItemResponse) => {\n        const projectListView = new ProjectListView();\n        projectListView.id = s.id;\n        projectListView.organizationId = s.organizationId;\n        projectListView.read = s.read;\n        projectListView.write = s.write;\n        projectListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey,\n        );\n        projectListView.creationDate = s.creationDate;\n        projectListView.revisionDate = s.revisionDate;\n        return projectListView;\n      }),\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>\n      <span>{{ title | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.projects.length == 1\">\n          {{ data.projects[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.projects.length > 1\">\n          {{ data.projects.length }}\n          {{ \"projects\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\nexport interface ProjectDeleteOperation {\n  projects: ProjectListView[];\n}\n\n@Component({\n  templateUrl: \"./project-delete-dialog.component.html\",\n})\nexport class ProjectDeleteDialogComponent implements OnInit {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ProjectDeleteOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogService,\n  ) {}\n\n  ngOnInit(): void {\n    if (!(this.data.projects?.length >= 1)) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The project delete dialog was not called with the appropriate operation values.\",\n      );\n    }\n  }\n\n  get title() {\n    return this.data.projects.length === 1 ? \"deleteProject\" : \"deleteProjects\";\n  }\n\n  get dialogContent() {\n    return this.data.projects.length === 1\n      ? this.i18nService.t(\"deleteProjectDialogMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.projectService.delete(this.data.projects);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      return;\n    }\n\n    const message = this.data.projects.length === 1 ? \"deleteProjectToast\" : \"deleteProjectsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteProjects\",\n        subTitle: \"projects\",\n        columnTitle: \"projectName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.projects?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsConfirmMessage\", this.data.projects?.length.toString());\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","import { AbstractControl, FormControl, ValidatorFn } from \"@angular/forms\";\n\n/**\n * Automatically trims FormControl value. Errors if value only contains whitespace.\n *\n * Should be used with `updateOn: \"submit\"`\n */\nexport const trimValidator: ValidatorFn = (control: AbstractControl<string>) => {\n  if (!(control instanceof FormControl)) {\n    throw new Error(\"trimValidator only supports validating FormControls\");\n  }\n  const value = control.value;\n  if (value === null || value === undefined || value === \"\") {\n    return null;\n  }\n  if (!value.trim().length) {\n    return {\n      trim: {\n        message: \"input is only whitespace\",\n      },\n    };\n  }\n  if (value !== value.trim()) {\n    control.setValue(value.trim());\n  }\n  return null;\n};\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { BitValidators } from \"@bitwarden/components\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { ProjectService } from \"../../projects/project.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ProjectOperation {\n  organizationId: string;\n  operation: OperationType;\n  organizationEnabled: boolean;\n  projectId?: string;\n}\n\n@Component({\n  templateUrl: \"./project-dialog.component.html\",\n})\nexport class ProjectDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", {\n      validators: [Validators.required, Validators.maxLength(500), BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n  });\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ProjectOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private router: Router,\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation === OperationType.Edit && this.data.projectId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The project dialog was not called with the appropriate operation values.`);\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const project: ProjectView = await this.projectService.getByProjectId(this.data.projectId);\n    this.loading = false;\n    this.formGroup.setValue({ name: project.name });\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newProject\" : \"editProject\";\n  }\n\n  submit = async () => {\n    if (!this.data.organizationEnabled) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"projectsCannotCreate\"),\n      );\n      return;\n    }\n\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const projectView = this.getProjectView();\n    if (this.data.operation === OperationType.Add) {\n      const newProject = await this.createProject(projectView);\n      this.router.navigate([\"sm\", this.data.organizationId, \"projects\", newProject.id]);\n    } else {\n      projectView.id = this.data.projectId;\n      await this.updateProject(projectView);\n    }\n    this.dialogRef.close();\n  };\n\n  private async createProject(projectView: ProjectView) {\n    const newProject = await this.projectService.create(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectCreated\"));\n    return newProject;\n  }\n\n  private async updateProject(projectView: ProjectView) {\n    await this.projectService.update(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectSaved\"));\n  }\n\n  private getProjectView() {\n    const projectView = new ProjectView();\n    projectView.organizationId = this.data.organizationId;\n    projectView.name = this.formGroup.value.name;\n    return projectView;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <span bitDialogTitle>{{ title | i18n }}</span>\n    <span bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <bit-form-field *ngIf=\"!loading\">\n        <bit-label>{{ \"projectName\" | i18n }}</bit-label>\n        <input appAutofocus formControlName=\"name\" bitInput />\n      </bit-form-field>\n    </span>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n  read: boolean;\n  write: boolean;\n}\n","export class SecretProjectView {\n  id: string;\n  name: string;\n}\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretView {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n\n  read: boolean;\n  write: boolean;\n}\n","export class SecretRequest {\n  key: string;\n  value: string;\n  note: string;\n  projectIds?: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectResponse[];\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n\n    const project = this.getResponseProperty(\"projects\");\n    this.projects = project == null ? null : project.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretListItemResponse } from \"./secret-list-item.response\";\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretWithProjectsListResponse extends BaseResponse {\n  secrets: SecretListItemResponse[];\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const secrets = this.getResponseProperty(\"secrets\");\n    const projects = this.getResponseProperty(\"projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n    this.secrets = secrets == null ? [] : secrets.map((dr: any) => new SecretListItemResponse(dr));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n\n  read: boolean;\n  write: boolean;\n\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n\n    const projects = this.getResponseProperty(\"Projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../models/view/secret-project.view\";\nimport { SecretView } from \"../models/view/secret.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { SecretRequest } from \"./requests/secret.request\";\nimport { SecretListItemResponse } from \"./responses/secret-list-item.response\";\nimport { SecretProjectResponse } from \"./responses/secret-project.response\";\nimport { SecretWithProjectsListResponse } from \"./responses/secret-with-projects-list.response\";\nimport { SecretResponse } from \"./responses/secret.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretService {\n  protected _secret: Subject<SecretView> = new Subject();\n\n  secret$ = this._secret.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService,\n  ) {}\n\n  async getBySecretId(secretId: string): Promise<SecretView> {\n    const r = await this.apiService.send(\"GET\", \"/secrets/\" + secretId, null, true, true);\n    const secretResponse = new SecretResponse(r);\n\n    return await this.createSecretView(secretResponse);\n  }\n\n  async getSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      null,\n      true,\n      true,\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async getSecretsByProject(organizationId: string, projectId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/secrets\",\n      null,\n      true,\n      true,\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async create(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      request,\n      true,\n      true,\n    );\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async update(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\"PUT\", \"/secrets/\" + secretView.id, request, true, true);\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async delete(secrets: SecretListView[]): Promise<BulkOperationStatus[]> {\n    const secretIds = secrets.map((secret) => secret.id);\n    const r = await this.apiService.send(\"POST\", \"/secrets/delete\", secretIds, true, true);\n\n    this._secret.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = secrets.find((secret) => secret.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  async getTrashedSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/secrets/\" + organizationId + \"/trash\",\n      null,\n      true,\n      true,\n    );\n\n    return await this.createSecretsListView(organizationId, new SecretWithProjectsListResponse(r));\n  }\n\n  async deleteTrashed(organizationId: string, secretIds: string[]) {\n    await this.apiService.send(\n      \"POST\",\n      \"/secrets/\" + organizationId + \"/trash/empty\",\n      secretIds,\n      true,\n      true,\n    );\n\n    this._secret.next(null);\n  }\n\n  async restoreTrashed(organizationId: string, secretIds: string[]) {\n    await this.apiService.send(\n      \"POST\",\n      \"/secrets/\" + organizationId + \"/trash/restore\",\n      secretIds,\n      true,\n      true,\n    );\n\n    this._secret.next(null);\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getSecretRequest(\n    organizationId: string,\n    secretView: SecretView,\n  ): Promise<SecretRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new SecretRequest();\n    const [key, value, note] = await Promise.all([\n      this.encryptService.encrypt(secretView.name, orgKey),\n      this.encryptService.encrypt(secretView.value, orgKey),\n      this.encryptService.encrypt(secretView.note, orgKey),\n    ]);\n    request.key = key.encryptedString;\n    request.value = value.encryptedString;\n    request.note = note.encryptedString;\n    request.projectIds = [];\n\n    secretView.projects?.forEach((e) => request.projectIds.push(e.id));\n\n    return request;\n  }\n\n  private async createSecretView(secretResponse: SecretResponse): Promise<SecretView> {\n    const orgKey = await this.getOrganizationKey(secretResponse.organizationId);\n\n    const secretView = new SecretView();\n    secretView.id = secretResponse.id;\n    secretView.organizationId = secretResponse.organizationId;\n    secretView.creationDate = secretResponse.creationDate;\n    secretView.revisionDate = secretResponse.revisionDate;\n\n    const [name, value, note] = await Promise.all([\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.name), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.value), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.note), orgKey),\n    ]);\n    secretView.name = name;\n    secretView.value = value;\n    secretView.note = note;\n\n    secretView.read = secretResponse.read;\n    secretView.write = secretResponse.write;\n\n    if (secretResponse.projects != null) {\n      secretView.projects = await this.decryptProjectsMappedToSecrets(\n        orgKey,\n        secretResponse.projects,\n      );\n    }\n\n    return secretView;\n  }\n\n  private async createSecretsListView(\n    organizationId: string,\n    secrets: SecretWithProjectsListResponse,\n  ): Promise<SecretListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n\n    const projectsMappedToSecretsView = await this.decryptProjectsMappedToSecrets(\n      orgKey,\n      secrets.projects,\n    );\n\n    return await Promise.all(\n      secrets.secrets.map(async (s: SecretListItemResponse) => {\n        const secretListView = new SecretListView();\n        secretListView.id = s.id;\n        secretListView.organizationId = s.organizationId;\n        secretListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey,\n        );\n        secretListView.creationDate = s.creationDate;\n        secretListView.revisionDate = s.revisionDate;\n\n        const projectIds = s.projects?.map((p) => p.id);\n        secretListView.projects = projectsMappedToSecretsView.filter((p) =>\n          projectIds.includes(p.id),\n        );\n\n        secretListView.read = s.read;\n        secretListView.write = s.write;\n\n        return secretListView;\n      }),\n    );\n  }\n\n  private async decryptProjectsMappedToSecrets(\n    orgKey: SymmetricCryptoKey,\n    projects: SecretProjectResponse[],\n  ): Promise<SecretProjectView[]> {\n    return await Promise.all(\n      projects.map(async (s: SecretProjectResponse) => {\n        const projectsMappedToSecretView = new SecretProjectView();\n        projectsMappedToSecretView.id = s.id;\n        projectsMappedToSecretView.name = s.name\n          ? await this.encryptService.decryptToUtf8(new EncString(s.name), orgKey)\n          : null;\n        return projectsMappedToSecretView;\n      }),\n    );\n  }\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    <div *ngIf=\"showSoftDeleteSecretWarning\">\n      {{ \"softDeleteSecretWarning\" | i18n }}\n    </div>\n    {{ \"deleteItemConfirmation\" | i18n }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ submitButtonText | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { SecretService } from \"../secret.service\";\n\nexport interface SecretDeleteOperation {\n  secrets: SecretListView[];\n}\n\n@Component({\n  templateUrl: \"./secret-delete.component.html\",\n})\nexport class SecretDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) private data: SecretDeleteOperation,\n    private dialogService: DialogService,\n  ) {}\n\n  showSoftDeleteSecretWarning = this.data.secrets.length === 1;\n\n  get title() {\n    return this.data.secrets.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  get submitButtonText() {\n    return this.data.secrets.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    const bulkResponses = await this.secretService.delete(this.data.secrets);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      this.dialogRef.close(true);\n      return;\n    }\n\n    const message =\n      this.data.secrets.length === 1 ? \"softDeleteSuccessToast\" : \"softDeletesSuccessToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n\n    this.dialogRef.close(true);\n  };\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteSecrets\",\n        subTitle: \"secrets\",\n        columnTitle: \"name\",\n        message: \"bulkDeleteSecretsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { lastValueFrom, Subject, takeUntil } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { DialogService, BitValidators } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../../models/view/secret-project.view\";\nimport { SecretView } from \"../../models/view/secret.view\";\nimport { ProjectService } from \"../../projects/project.service\";\nimport { SecretService } from \"../secret.service\";\n\nimport { SecretDeleteDialogComponent, SecretDeleteOperation } from \"./secret-delete.component\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface SecretOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n  secretId?: string;\n  organizationEnabled: boolean;\n}\n\n@Component({\n  templateUrl: \"./secret-dialog.component.html\",\n})\nexport class SecretDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", {\n      validators: [Validators.required, Validators.maxLength(500), BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n    value: new FormControl(\"\", [Validators.required, Validators.maxLength(25000)]),\n    notes: new FormControl(\"\", {\n      validators: [Validators.maxLength(7000), BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n    project: new FormControl(\"\", [Validators.required]),\n    newProjectName: new FormControl(\"\", {\n      validators: [Validators.maxLength(500), BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n  });\n\n  private destroy$ = new Subject<void>();\n  private loading = true;\n  projects: ProjectListView[];\n  addNewProject = false;\n  newProjectGuid = Utils.newGuid();\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: SecretOperation,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private projectService: ProjectService,\n    private dialogService: DialogService,\n    private organizationService: OrganizationService,\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation === OperationType.Edit && this.data.secretId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The secret dialog was not called with the appropriate operation values.`);\n    } else if (this.data.operation == OperationType.Add) {\n      await this.loadProjects(true);\n      if (this.data.projectId == null || this.data.projectId == \"\") {\n        this.addNewProjectOptionToProjectsDropDown();\n      }\n    }\n\n    if (this.data.projectId) {\n      this.formGroup.get(\"project\").setValue(this.data.projectId);\n    }\n\n    if (this.organizationService.get(this.data.organizationId)?.isAdmin) {\n      this.formGroup.get(\"project\").removeValidators(Validators.required);\n      this.formGroup.get(\"project\").updateValueAndValidity();\n    }\n  }\n\n  async loadData() {\n    this.formGroup.disable();\n    const secret: SecretView = await this.secretService.getBySecretId(this.data.secretId);\n\n    await this.loadProjects(secret.write);\n\n    this.formGroup.setValue({\n      name: secret.name,\n      value: secret.value,\n      notes: secret.note,\n      project: secret.projects[0]?.id ?? \"\",\n      newProjectName: \"\",\n    });\n\n    this.loading = false;\n\n    if (secret.write) {\n      this.formGroup.enable();\n    }\n  }\n\n  async loadProjects(filterByPermission: boolean) {\n    this.projects = await this.projectService\n      .getProjects(this.data.organizationId)\n      .then((projects) => projects.sort((a, b) => a.name.localeCompare(b.name)));\n\n    if (filterByPermission) {\n      this.projects = this.projects.filter((p) => p.write);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private addNewProjectOptionToProjectsDropDown() {\n    this.formGroup\n      .get(\"project\")\n      .valueChanges.pipe(takeUntil(this.destroy$))\n      .subscribe((val: string) => {\n        this.dropDownSelected(val);\n      });\n\n    const addNewProject = new ProjectListView();\n    addNewProject.name = this.i18nService.t(\"newProject\");\n    addNewProject.id = this.newProjectGuid;\n    this.projects.unshift(addNewProject);\n  }\n\n  private dropDownSelected(val: string) {\n    this.addNewProject = val == this.newProjectGuid;\n\n    if (this.addNewProject) {\n      this.formGroup.get(\"newProjectName\").addValidators([Validators.required]);\n    } else {\n      this.formGroup.get(\"newProjectName\").clearValidators();\n    }\n\n    this.formGroup.get(\"newProjectName\").updateValueAndValidity();\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newSecret\" : \"editSecret\";\n  }\n\n  get showSpinner() {\n    return this.data.operation === OperationType.Edit && this.loading;\n  }\n\n  submit = async () => {\n    if (!this.data.organizationEnabled) {\n      this.platformUtilsService.showToast(\"error\", null, this.i18nService.t(\"secretsCannotCreate\"));\n      return;\n    }\n\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const secretView = this.getSecretView();\n\n    if (this.addNewProject) {\n      const newProject = await this.createProject(this.getNewProjectView());\n      secretView.projects = [newProject];\n    }\n\n    if (this.data.operation === OperationType.Add) {\n      await this.createSecret(secretView);\n    } else {\n      secretView.id = this.data.secretId;\n      await this.updateSecret(secretView);\n    }\n    this.dialogRef.close();\n  };\n\n  get deleteButtonIsVisible(): boolean {\n    return this.data.operation === OperationType.Edit;\n  }\n\n  private async createProject(projectView: ProjectView) {\n    return await this.projectService.create(this.data.organizationId, projectView);\n  }\n\n  protected openDeleteSecretDialog() {\n    const secretListView: SecretListView[] = this.getSecretListView();\n\n    const dialogRef = this.dialogService.open<unknown, SecretDeleteOperation>(\n      SecretDeleteDialogComponent,\n      {\n        data: {\n          secrets: secretListView,\n        },\n      },\n    );\n\n    // If the secret is deleted, chain close this dialog after the delete dialog\n    lastValueFrom(dialogRef.closed).then(\n      (closeData) => closeData !== undefined && this.dialogRef.close(),\n    );\n  }\n\n  private async createSecret(secretView: SecretView) {\n    await this.secretService.create(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretCreated\"));\n  }\n\n  private getNewProjectView() {\n    const projectView = new ProjectView();\n    projectView.organizationId = this.data.organizationId;\n    projectView.name = this.formGroup.value.newProjectName;\n    return projectView;\n  }\n\n  private async updateSecret(secretView: SecretView) {\n    await this.secretService.update(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretEdited\"));\n  }\n\n  private getSecretView() {\n    const secretView = new SecretView();\n    secretView.organizationId = this.data.organizationId;\n    secretView.name = this.formGroup.value.name;\n    secretView.value = this.formGroup.value.value;\n    secretView.note = this.formGroup.value.notes;\n\n    const project = this.projects.find((p) => p.id == this.formGroup.value.project);\n    secretView.projects = project != undefined ? [project] : [];\n\n    return secretView;\n  }\n\n  private getSecretListView() {\n    const secretListViews: SecretListView[] = [];\n    const emptyProjects: SecretProjectView[] = [];\n\n    const secretListView = new SecretListView();\n\n    if (this.formGroup.value.project) {\n      secretListView.projects = [this.projects.find((p) => p.id == this.formGroup.value.project)];\n    } else {\n      secretListView.projects = emptyProjects;\n    }\n\n    secretListView.organizationId = this.data.organizationId;\n    secretListView.id = this.data.secretId;\n    secretListView.name = this.formGroup.value.name;\n    secretListViews.push(secretListView);\n    return secretListViews;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"large\">\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent class=\"tw-relative\">\n      <div\n        *ngIf=\"showSpinner\"\n        class=\"tw-absolute tw-flex tw-h-full tw-w-full tw-items-center tw-justify-center tw-bg-text-contrast\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <div class=\"tw-flex tw-gap-4 tw-pt-4\">\n        <bit-form-field class=\"tw-w-1/3\">\n          <bit-label for=\"secret-name\">{{ \"name\" | i18n }}</bit-label>\n          <input appAutofocus formControlName=\"name\" bitInput />\n        </bit-form-field>\n        <bit-form-field class=\"tw-w-full\">\n          <bit-label>{{ \"value\" | i18n }}</bit-label>\n          <textarea bitInput rows=\"4\" formControlName=\"value\"></textarea>\n        </bit-form-field>\n      </div>\n      <bit-form-field>\n        <bit-label>{{ \"notes\" | i18n }}</bit-label>\n        <textarea bitInput rows=\"4\" formControlName=\"notes\"></textarea>\n      </bit-form-field>\n\n      <hr />\n\n      <bit-form-field class=\"tw-mb-0 tw-mt-3\">\n        <bit-label>{{ \"project\" | i18n }}</bit-label>\n        <bit-select bitInput name=\"project\" formControlName=\"project\">\n          <bit-option value=\"\" [label]=\"'selectPlaceholder' | i18n\"></bit-option>\n          <bit-option\n            *ngFor=\"let p of projects\"\n            [icon]=\"p.id === this.newProjectGuid ? 'bwi-plus-circle' : ''\"\n            [value]=\"p.id\"\n            [label]=\"p.name\"\n          >\n          </bit-option>\n        </bit-select>\n      </bit-form-field>\n\n      <bit-form-field *ngIf=\"addNewProject == true\">\n        <bit-label>{{ \"projectName\" | i18n }}</bit-label>\n        <input formControlName=\"newProjectName\" bitInput />\n      </bit-form-field>\n    </div>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button\n        type=\"button\"\n        bitButton\n        buttonType=\"secondary\"\n        bitFormButton\n        bitDialogClose\n        [disabled]=\"false\"\n      >\n        {{ \"cancel\" | i18n }}\n      </button>\n      <button\n        *ngIf=\"deleteButtonIsVisible\"\n        class=\"tw-ml-auto\"\n        type=\"button\"\n        bitIconButton=\"bwi-trash\"\n        buttonType=\"danger\"\n        bitFormButton\n        (click)=\"openDeleteSecretDialog()\"\n      ></button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","export class ServiceAccountView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n\nexport class ServiceAccountSecretsDetailsView extends ServiceAccountView {\n  accessToSecrets: number;\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class ServiceAccountRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ServiceAccountResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n\nexport class ServiceAccountSecretsDetailsResponse extends ServiceAccountResponse {\n  accessToSecrets: number;\n\n  constructor(response: any) {\n    super(response);\n    this.accessToSecrets = this.getResponseProperty(\"AccessToSecrets\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport {\n  ServiceAccountSecretsDetailsView,\n  ServiceAccountView,\n} from \"../models/view/service-account.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { ServiceAccountRequest } from \"./models/requests/service-account.request\";\nimport {\n  ServiceAccountResponse,\n  ServiceAccountSecretsDetailsResponse,\n} from \"./models/responses/service-account.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ServiceAccountService {\n  protected _serviceAccount: Subject<ServiceAccountView> = new Subject();\n\n  serviceAccount$ = this._serviceAccount.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService,\n  ) {}\n\n  async getServiceAccounts(\n    organizationId: string,\n    includeAccessToSecrets?: boolean,\n  ): Promise<ServiceAccountSecretsDetailsView[]> {\n    const params = new URLSearchParams();\n    if (includeAccessToSecrets) {\n      params.set(\"includeAccessToSecrets\", \"true\");\n    }\n\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/service-accounts?\" + params.toString(),\n      null,\n      true,\n      true,\n    );\n    const results = new ListResponse(r, ServiceAccountSecretsDetailsResponse);\n    return await this.createServiceAccountSecretsDetailsViews(organizationId, results.data);\n  }\n\n  async getByServiceAccountId(\n    serviceAccountId: string,\n    organizationId: string,\n  ): Promise<ServiceAccountView> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId,\n      null,\n      true,\n      true,\n    );\n\n    return await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r));\n  }\n\n  async update(\n    serviceAccountId: string,\n    organizationId: string,\n    serviceAccountView: ServiceAccountView,\n  ) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/service-accounts/\" + serviceAccountId,\n      request,\n      true,\n      true,\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r)),\n    );\n  }\n\n  async create(organizationId: string, serviceAccountView: ServiceAccountView) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      request,\n      true,\n      true,\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r)),\n    );\n  }\n\n  async delete(serviceAccounts: ServiceAccountView[]): Promise<BulkOperationStatus[]> {\n    const ids = serviceAccounts.map((serviceAccount) => serviceAccount.id);\n    const r = await this.apiService.send(\"POST\", \"/service-accounts/delete\", ids, true, true);\n\n    this._serviceAccount.next(null);\n\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = serviceAccounts.find((sa) => sa.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getServiceAccountRequest(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountView: ServiceAccountView,\n  ) {\n    const request = new ServiceAccountRequest();\n    request.name = await this.encryptService.encrypt(serviceAccountView.name, organizationKey);\n    return request;\n  }\n\n  private async createServiceAccountView(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountResponse: ServiceAccountResponse,\n  ): Promise<ServiceAccountView> {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = serviceAccountResponse.id;\n    serviceAccountView.organizationId = serviceAccountResponse.organizationId;\n    serviceAccountView.creationDate = serviceAccountResponse.creationDate;\n    serviceAccountView.revisionDate = serviceAccountResponse.revisionDate;\n    serviceAccountView.name = serviceAccountResponse.name\n      ? await this.encryptService.decryptToUtf8(\n          new EncString(serviceAccountResponse.name),\n          organizationKey,\n        )\n      : null;\n    return serviceAccountView;\n  }\n\n  private async createServiceAccountSecretsDetailsView(\n    organizationKey: SymmetricCryptoKey,\n    response: ServiceAccountSecretsDetailsResponse,\n  ): Promise<ServiceAccountSecretsDetailsView> {\n    const view = new ServiceAccountSecretsDetailsView();\n    view.id = response.id;\n    view.organizationId = response.organizationId;\n    view.creationDate = response.creationDate;\n    view.revisionDate = response.revisionDate;\n    view.accessToSecrets = response.accessToSecrets;\n    view.name = response.name\n      ? await this.encryptService.decryptToUtf8(new EncString(response.name), organizationKey)\n      : null;\n    return view;\n  }\n\n  private async createServiceAccountSecretsDetailsViews(\n    organizationId: string,\n    serviceAccountResponses: ServiceAccountSecretsDetailsResponse[],\n  ): Promise<ServiceAccountSecretsDetailsView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      serviceAccountResponses.map(async (s: ServiceAccountSecretsDetailsResponse) => {\n        return await this.createServiceAccountSecretsDetailsView(orgKey, s);\n      }),\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { BitValidators } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ServiceAccountOperation {\n  organizationId: string;\n  serviceAccountId?: string;\n  operation: OperationType;\n  organizationEnabled: boolean;\n}\n\n@Component({\n  templateUrl: \"./service-account-dialog.component.html\",\n})\nexport class ServiceAccountDialogComponent {\n  protected formGroup = new FormGroup(\n    {\n      name: new FormControl(\"\", {\n        validators: [Validators.required, Validators.maxLength(500), BitValidators.trimValidator],\n        updateOn: \"submit\",\n      }),\n    },\n    {},\n  );\n\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ServiceAccountOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation == OperationType.Edit) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const serviceAccount: ServiceAccountView =\n      await this.serviceAccountService.getByServiceAccountId(\n        this.data.serviceAccountId,\n        this.data.organizationId,\n      );\n    this.formGroup.patchValue({ name: serviceAccount.name });\n    this.loading = false;\n  }\n\n  submit = async () => {\n    if (!this.data.organizationEnabled) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"serviceAccountsCannotCreate\"),\n      );\n      return;\n    }\n\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const serviceAccountView = this.getServiceAccountView();\n    let serviceAccountMessage: string;\n\n    if (this.data.operation == OperationType.Add) {\n      await this.serviceAccountService.create(this.data.organizationId, serviceAccountView);\n      serviceAccountMessage = this.i18nService.t(\"serviceAccountCreated\");\n    } else {\n      await this.serviceAccountService.update(\n        this.data.serviceAccountId,\n        this.data.organizationId,\n        serviceAccountView,\n      );\n      serviceAccountMessage = this.i18nService.t(\"serviceAccountUpdated\");\n    }\n\n    this.platformUtilsService.showToast(\"success\", null, serviceAccountMessage);\n    this.dialogRef.close();\n  };\n\n  private getServiceAccountView() {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.organizationId = this.data.organizationId;\n    serviceAccountView.name = this.formGroup.value.name;\n    return serviceAccountView;\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newServiceAccount\" : \"editServiceAccount\";\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <div *ngIf=\"!loading\">\n        <bit-form-field>\n          <bit-label>{{ \"serviceAccountName\" | i18n }}</bit-label>\n          <input appAutofocus formControlName=\"name\" bitInput />\n        </bit-form-field>\n      </div>\n    </div>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<div *ngIf=\"!secrets\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<ng-container *ngIf=\"secrets?.length == 0\">\n  <bit-no-items *ngIf=\"trash\">\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"secretsTrashNoItemsMessage\" | i18n }}</ng-container>\n  </bit-no-items>\n  <bit-no-items *ngIf=\"!trash\">\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"secretsNoItemsMessage\" | i18n }}</ng-container>\n    <button\n      type=\"button\"\n      slot=\"button\"\n      bitButton\n      buttonType=\"secondary\"\n      (click)=\"newSecretEvent.emit()\"\n    >\n      <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n      {{ \"newSecret\" | i18n }}\n    </button>\n  </bit-no-items>\n</ng-container>\n\n<bit-table *ngIf=\"secrets?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell bitSortable=\"projects\" [fn]=\"sortProjects\">{{ \"project\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let secret of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(secret.id) : null\"\n          [checked]=\"selection.isSelected(secret.id)\"\n        />\n      </td>\n      <td bitCell>\n        <div class=\"tw-flex tw-items-center tw-gap-4 tw-break-all\">\n          <i class=\"bwi bwi-key tw-text-muted\" aria-hidden=\"true\"></i>\n          <div>\n            <div *ngIf=\"!trash\">\n              <button type=\"button\" bitLink (click)=\"editSecretEvent.emit(secret.id)\">\n                {{ secret.name }}\n              </button>\n            </div>\n            <div *ngIf=\"trash\">{{ secret.name }}</div>\n            <div class=\"tw-text-sm tw-text-muted\">\n              {{ secret.id }}\n              <button\n                type=\"button\"\n                bitIconButton=\"bwi-clone\"\n                buttonType=\"main\"\n                size=\"small\"\n                [title]=\"'copyUuid' | i18n\"\n                [attr.aria-label]=\"'copyUuid' | i18n\"\n                (click)=\"copySecretUuidEvent.emit(secret.id)\"\n              ></button>\n            </div>\n          </div>\n        </div>\n      </td>\n      <td bitCell>\n        <span\n          *ngFor=\"let project of secret.projects\"\n          bitBadge\n          badgeType=\"secondary\"\n          class=\"tw-ml-1\"\n          [title]=\"project.name\"\n        >\n          {{ project.name | ellipsis: 32 }}\n        </span>\n        <span *ngIf=\"secret.projects.length === 0\" bitBadge badgeType=\"warning\" class=\"tw-ml-1\"\n          ><i class=\"bwi bwi-fw bwi-exclamation-triangle tw-mr-1\" aria-hidden=\"true\"></i\n          >{{ \"unassigned\" | i18n }}</span\n        >\n      </td>\n      <td bitCell class=\"tw-whitespace-nowrap\">{{ secret.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"secretMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #secretMenu>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"editSecretEvent.emit(secret.id)\"\n          *ngIf=\"secret.write && !trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editSecret\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"copySecretNameEvent.emit(secret.name)\"\n          *ngIf=\"!trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-clone\" aria-hidden=\"true\"></i>\n          {{ \"copySecretName\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"copySecretValueEvent.emit(secret.id)\"\n          *ngIf=\"!trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-clone\" aria-hidden=\"true\"></i>\n          {{ \"copySecretValue\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"restoreSecretsEvent.emit([secret.id])\"\n          *ngIf=\"trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n          {{ \"restoreSecret\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"deleteSecretsEvent.emit([secret])\"\n          *ngIf=\"secret.write\"\n        >\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{\n            (trash ? \"permanentlyDelete\" : \"deleteSecret\") | i18n\n          }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkRestoreSecrets()\" *ngIf=\"trash\">\n    <i class=\"bwi bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n    <span>{{ \"restoreSelected\" | i18n }}</span>\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteSecrets()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteSecrets\" | i18n }}</span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretService } from \"../secrets/secret.service\";\n\n@Component({\n  selector: \"sm-secrets-list\",\n  templateUrl: \"./secrets-list.component.html\",\n})\nexport class SecretsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<SecretListView>();\n\n  @Input()\n  get secrets(): SecretListView[] {\n    return this._secrets;\n  }\n  set secrets(secrets: SecretListView[]) {\n    this.selection.clear();\n    this._secrets = secrets;\n    this.dataSource.data = secrets;\n  }\n  private _secrets: SecretListView[];\n\n  @Input()\n  set search(search: string) {\n    this.selection.clear();\n    this.dataSource.filter = search;\n  }\n\n  @Input() trash: boolean;\n\n  @Output() editSecretEvent = new EventEmitter<string>();\n  @Output() copySecretNameEvent = new EventEmitter<string>();\n  @Output() copySecretValueEvent = new EventEmitter<string>();\n  @Output() copySecretUuidEvent = new EventEmitter<string>();\n  @Output() onSecretCheckedEvent = new EventEmitter<string[]>();\n  @Output() deleteSecretsEvent = new EventEmitter<SecretListView[]>();\n  @Output() newSecretEvent = new EventEmitter();\n  @Output() restoreSecretsEvent = new EventEmitter();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n  ) {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onSecretCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    if (this.selection.selected?.length > 0) {\n      const numSelected = this.selection.selected.length;\n      const numRows = this.dataSource.filteredData.length;\n      return numSelected === numRows;\n    }\n    return false;\n  }\n\n  toggleAll() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n    } else {\n      this.selection.select(...this.dataSource.filteredData.map((s) => s.id));\n    }\n  }\n\n  bulkDeleteSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteSecretsEvent.emit(\n        this.secrets.filter((secret) => this.selection.isSelected(secret.id)),\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\"),\n      );\n    }\n  }\n\n  bulkRestoreSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.restoreSecretsEvent.emit(this.selection.selected);\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\"),\n      );\n    }\n  }\n\n  sortProjects = (a: SecretListView, b: SecretListView): number => {\n    const aProjects = a.projects;\n    const bProjects = b.projects;\n    if (aProjects.length !== bProjects.length) {\n      return aProjects.length - bProjects.length;\n    }\n\n    return aProjects[0]?.name.localeCompare(bProjects[0].name);\n  };\n\n  /**\n   * TODO: Refactor to smart component and remove\n   */\n  static copySecretName(\n    name: string,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService,\n  ) {\n    platformUtilsService.copyToClipboard(name);\n    platformUtilsService.showToast(\n      \"success\",\n      null,\n      i18nService.t(\"valueCopied\", i18nService.t(\"name\")),\n    );\n  }\n\n  /**\n   * TODO: Refactor to smart component and remove\n   */\n  static copySecretValue(\n    id: string,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService,\n    secretService: SecretService,\n  ) {\n    const value = secretService.getBySecretId(id).then((secret) => secret.value);\n    SecretsListComponent.copyToClipboardAsync(value, platformUtilsService).then(() => {\n      platformUtilsService.showToast(\n        \"success\",\n        null,\n        i18nService.t(\"valueCopied\", i18nService.t(\"value\")),\n      );\n    });\n  }\n\n  static copySecretUuid(\n    id: string,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService,\n  ) {\n    platformUtilsService.copyToClipboard(id);\n    platformUtilsService.showToast(\n      \"success\",\n      null,\n      i18nService.t(\"valueCopied\", i18nService.t(\"uuid\")),\n    );\n  }\n\n  /**\n   * TODO: Remove in favor of updating `PlatformUtilsService.copyToClipboard`\n   */\n  private static copyToClipboardAsync(\n    text: Promise<string>,\n    platformUtilsService: PlatformUtilsService,\n  ) {\n    if (platformUtilsService.isSafari()) {\n      return navigator.clipboard.write([\n        new ClipboardItem({\n          [\"text/plain\"]: text,\n        }),\n      ]);\n    }\n\n    return text.then((t) => platformUtilsService.copyToClipboard(t));\n  }\n}\n","<header\n  *ngIf=\"routeData$ | async as routeData\"\n  class=\"-tw-m-6 tw-mb-3 tw-flex tw-flex-col tw-p-6\"\n  [ngClass]=\"{\n    'tw-border-0 tw-border-b tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-pb-0':\n      tabsContainer.childElementCount !== 0\n  }\"\n>\n  <div class=\"tw-flex\">\n    <div class=\"tw-flex tw-min-w-0 tw-flex-1 tw-flex-col tw-gap-2\">\n      <ng-content select=\"[slot=breadcrumbs]\"></ng-content>\n      <div #titleContainer [ngClass]=\"{ 'tw-hidden': titleContainer.childElementCount === 0 }\">\n        <ng-content select=\"[slot=title]\"></ng-content>\n      </div>\n      <h1\n        *ngIf=\"titleContainer.childElementCount === 0\"\n        bitTypography=\"h1\"\n        noMargin\n        class=\"tw-m-0 tw-mr-2 tw-truncate tw-leading-10\"\n        [title]=\"title || (routeData.titleId | i18n)\"\n      >\n        <i *ngIf=\"icon\" class=\"bwi {{ icon }}\" aria-hidden=\"true\"></i>\n        {{ title || (routeData.titleId | i18n) }}\n      </h1>\n    </div>\n    <div class=\"tw-ml-auto tw-flex tw-flex-col tw-gap-4\">\n      <div class=\"tw-flex tw-min-w-max tw-items-center tw-justify-end tw-gap-2\">\n        <ng-content></ng-content>\n        <product-switcher></product-switcher>\n        <ng-container *ngIf=\"account$ | async as account\">\n          <button\n            type=\"button\"\n            [bitMenuTriggerFor]=\"accountMenu\"\n            class=\"tw-border-0 tw-bg-transparent tw-p-0\"\n          >\n            <dynamic-avatar [id]=\"account.userId\" [text]=\"account | userName\"></dynamic-avatar>\n          </button>\n\n          <bit-menu #accountMenu>\n            <div class=\"tw-flex tw-min-w-52 tw-max-w-72 tw-flex-col\">\n              <div\n                class=\"tw-flex tw-items-center tw-px-4 tw-py-1 tw-leading-tight tw-text-info\"\n                appStopProp\n              >\n                <dynamic-avatar [id]=\"account.userId\" [text]=\"account | userName\"></dynamic-avatar>\n                <div class=\"tw-ml-2 tw-block tw-overflow-hidden tw-whitespace-nowrap\">\n                  <span>{{ \"loggedInAs\" | i18n }}</span>\n                  <small class=\"tw-block tw-overflow-hidden tw-whitespace-nowrap tw-text-muted\">\n                    {{ account | userName }}\n                  </small>\n                </div>\n              </div>\n\n              <ng-container *ngIf=\"selfHosted\">\n                <bit-menu-divider></bit-menu-divider>\n                <span class=\"tw-break-all tw-px-4 tw-py-1 tw-text-left tw-text-muted\">\n                  {{ hostname }}\n                </span>\n              </ng-container>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <a bitMenuItem routerLink=\"/settings/account\">\n                <i class=\"bwi bwi-fw bwi-user\" aria-hidden=\"true\"></i>\n                {{ \"accountSettings\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/help/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-question-circle\" aria-hidden=\"true\"></i>\n                {{ \"getHelp\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/download/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-download\" aria-hidden=\"true\"></i>\n                {{ \"getApps\" | i18n }}\n              </a>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <button *ngIf=\"canLock$ | async\" bitMenuItem type=\"button\" (click)=\"lock()\">\n                <i class=\"bwi bwi-fw bwi-lock\" aria-hidden=\"true\"></i>\n                {{ \"lockNow\" | i18n }}\n              </button>\n              <button bitMenuItem type=\"button\" (click)=\"logout()\">\n                <i class=\"bwi bwi-fw bwi-sign-out\" aria-hidden=\"true\"></i>\n                {{ \"logOut\" | i18n }}\n              </button>\n            </div>\n          </bit-menu>\n        </ng-container>\n      </div>\n      <div\n        class=\"tw-ml-auto\"\n        #contentContainer\n        [ngClass]=\"{ 'tw-hidden': contentContainer.childElementCount === 0 }\"\n      >\n        <ng-content select=\"[slot=secondary]\"></ng-content>\n      </div>\n    </div>\n  </div>\n  <div\n    #tabsContainer\n    class=\"-tw-mx-4 -tw-mb-px\"\n    [ngClass]=\"{ 'tw-hidden': tabsContainer.childElementCount === 0 }\"\n  >\n    <ng-content select=\"[slot=tabs]\"></ng-content>\n  </div>\n</header>\n","import { Component, Input } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { VaultTimeoutSettingsService } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { VaultTimeoutAction } from \"@bitwarden/common/enums/vault-timeout-action.enum\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { AccountProfile } from \"@bitwarden/common/platform/models/domain/account\";\n\n@Component({\n  selector: \"app-header\",\n  templateUrl: \"./web-header.component.html\",\n})\nexport class WebHeaderComponent {\n  /**\n   * Custom title that overrides the route data `titleId`\n   */\n  @Input() title: string;\n\n  /**\n   * Icon to show before the title\n   */\n  @Input() icon: string;\n\n  protected routeData$: Observable<{ titleId: string }>;\n  protected account$: Observable<AccountProfile>;\n  protected canLock$: Observable<boolean>;\n  protected selfHosted: boolean;\n  protected hostname = location.hostname;\n\n  constructor(\n    private route: ActivatedRoute,\n    private stateService: StateService,\n    private platformUtilsService: PlatformUtilsService,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsService,\n    private messagingService: MessagingService,\n  ) {\n    this.routeData$ = this.route.data.pipe(\n      map((params) => {\n        return {\n          titleId: params.titleId,\n        };\n      }),\n    );\n\n    this.selfHosted = this.platformUtilsService.isSelfHost();\n\n    this.account$ = combineLatest([\n      this.stateService.activeAccount$,\n      this.stateService.accounts$,\n    ]).pipe(\n      map(([activeAccount, accounts]) => {\n        return accounts[activeAccount]?.profile;\n      }),\n    );\n    this.canLock$ = this.vaultTimeoutSettingsService\n      .availableVaultTimeoutActions$()\n      .pipe(map((actions) => actions.includes(VaultTimeoutAction.Lock)));\n  }\n\n  protected lock() {\n    this.messagingService.send(\"lockVault\");\n  }\n\n  protected logout() {\n    this.messagingService.send(\"logout\");\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\n\n@Component({\n  selector: \"sm-new-menu\",\n  templateUrl: \"./new-menu.component.html\",\n})\nexport class NewMenuComponent implements OnInit, OnDestroy {\n  private organizationId: string;\n  private organizationEnabled: boolean;\n  private destroy$: Subject<void> = new Subject<void>();\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private organizationService: OrganizationService,\n  ) {}\n\n  ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params: any) => {\n      this.organizationId = params.organizationId;\n      this.organizationEnabled = this.organizationService.get(params.organizationId)?.enabled;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  openProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n}\n","<div *ngIf=\"!projects\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"projects?.length == 0\">\n  <ng-container slot=\"title\">{{ \"projectsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"projectsNoItemsMessage\" | i18n }}</ng-container>\n  <button\n    type=\"button\"\n    slot=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newProjectEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newProject\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"projects?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th\n        bitCell\n        class=\"tw-w-0\"\n        [ngClass]=\"{ 'tw-invisible': !(hasWriteAccessOnSelected$ | async) }\"\n      >\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let project of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(project.id) : null\"\n          [checked]=\"selection.isSelected(project.id)\"\n        />\n      </td>\n      <td bitCell>\n        <div class=\"tw-flex tw-items-center tw-gap-4 tw-break-all\">\n          <i class=\"bwi bwi-collection tw-text-muted\" aria-hidden=\"true\"></i>\n          <a bitLink [routerLink]=\"['/sm', project.organizationId, 'projects', project.id]\">{{\n            project.name\n          }}</a>\n        </div>\n      </td>\n      <td bitCell class=\"tw-whitespace-nowrap\">{{ project.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"projectMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </td>\n      <bit-menu #projectMenu>\n        <a bitMenuItem [routerLink]=\"['/sm', project.organizationId, 'projects', project.id]\">\n          <i class=\"bwi bwi-fw bwi-eye\" aria-hidden=\"true\"></i>\n          {{ \"viewProject\" | i18n }}\n        </a>\n        <button\n          *ngIf=\"project.write\"\n          type=\"button\"\n          bitMenuItem\n          (click)=\"editProjectEvent.emit(project.id)\"\n        >\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editProject\" | i18n }}\n        </button>\n        <button *ngIf=\"project.write\" type=\"button\" bitMenuItem (click)=\"deleteProject(project.id)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{ \"deleteProject\" | i18n }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteProjects()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteProjects\" | i18n }}</span>\n  </button>\n</bit-menu>\n","<button\n  type=\"button\"\n  bitButton\n  class=\"tw-min-w-max\"\n  buttonType=\"primary\"\n  [bitMenuTriggerFor]=\"newMenu\"\n>\n  {{ \"new\" | i18n }} <i class=\"bwi bwi-angle-down\" aria-hidden=\"true\"></i>\n</button>\n\n<bit-menu #newMenu>\n  <button type=\"button\" bitMenuItem (click)=\"openProjectDialog()\">\n    <i class=\"bwi bwi-fw bwi-sitemap\" aria-hidden=\"true\"></i>\n    {{ \"project\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openSecretDialog()\">\n    <i class=\"bwi bwi-fw bwi-key\" aria-hidden=\"true\"></i>\n    {{ \"secret\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openServiceAccountDialog()\">\n    <i class=\"bwi bwi-fw bwi-wrench\" aria-hidden=\"true\"></i>\n    {{ \"serviceAccount\" | i18n }}\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { map } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\n\n@Component({\n  selector: \"sm-projects-list\",\n  templateUrl: \"./projects-list.component.html\",\n})\nexport class ProjectsListComponent {\n  @Input()\n  get projects(): ProjectListView[] {\n    return this._projects;\n  }\n  set projects(projects: ProjectListView[]) {\n    this.selection.clear();\n    this._projects = projects;\n    this.dataSource.data = projects;\n  }\n  private _projects: ProjectListView[];\n\n  @Input()\n  set search(search: string) {\n    this.selection.clear();\n    this.dataSource.filter = search;\n  }\n\n  @Output() editProjectEvent = new EventEmitter<string>();\n  @Output() deleteProjectEvent = new EventEmitter<ProjectListView[]>();\n  @Output() newProjectEvent = new EventEmitter();\n\n  selection = new SelectionModel<string>(true, []);\n  protected dataSource = new TableDataSource<ProjectListView>();\n  protected hasWriteAccessOnSelected$ = this.selection.changed.pipe(\n    map((_) => this.selectedHasWriteAccess()),\n  );\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n  ) {}\n\n  isAllSelected() {\n    if (this.selection.selected?.length > 0) {\n      const numSelected = this.selection.selected.length;\n      const numRows = this.dataSource.filteredData.length;\n      return numSelected === numRows;\n    }\n    return false;\n  }\n\n  toggleAll() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n    } else {\n      this.selection.select(...this.dataSource.filteredData.map((s) => s.id));\n    }\n  }\n\n  deleteProject(projectId: string) {\n    this.deleteProjectEvent.emit(this.projects.filter((p) => p.id == projectId));\n  }\n\n  bulkDeleteProjects() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteProjectEvent.emit(\n        this.projects.filter((project) => this.selection.isSelected(project.id)),\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\"),\n      );\n    }\n  }\n\n  private selectedHasWriteAccess() {\n    const selectedProjects = this.projects.filter((project) =>\n      this.selection.isSelected(project.id),\n    );\n    if (selectedProjects.some((project) => project.write)) {\n      return true;\n    }\n    return false;\n  }\n}\n","<ng-template #content>\n  <i class=\"bwi bwi-fw !tw-mr-4\" [ngClass]=\"completed ? 'bwi-check tw-text-success' : icon\"></i\n  ><span\n    [ngClass]=\"{\n      'tw-text-primary-700 tw-line-through tw-decoration-primary-700 tw-opacity-50': completed\n    }\"\n    >{{ title }}<i class=\"bwi bwi-angle-right tw-ml-1\"></i\n  ></span>\n</ng-template>\n\n<li class=\"tw-list-none\">\n  <a bitLink *ngIf=\"route\" [routerLink]=\"route\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </a>\n  <button type=\"button\" bitLink *ngIf=\"!route\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </button>\n  <div\n    class=\"tw-ml-8 tw-mt-1 tw-text-sm\"\n    [ngClass]=\"{ 'tw-opacity-50': completed }\"\n    (click)=\"handleClick($event)\"\n  >\n    <ng-content></ng-content>\n  </div>\n</li>\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-onboarding-task\",\n  templateUrl: \"./onboarding-task.component.html\",\n  host: {\n    class: \"tw-max-w-max\",\n  },\n})\nexport class OnboardingTaskComponent {\n  @Input()\n  completed = false;\n\n  @Input()\n  icon = \"bwi-info-circle\";\n\n  @Input()\n  title: string;\n\n  @Input()\n  route: string | any[];\n\n  handleClick(ev: MouseEvent) {\n    /**\n     * If the main `ng-content` is clicked, we don't want to trigger the task's click handler.\n     */\n    ev.stopPropagation();\n  }\n}\n","<details #details class=\"tw-rounded-sm tw-bg-background-alt tw-text-main\" (toggle)=\"toggle()\" open>\n  <summary class=\"tw-list-none tw-p-2 tw-px-4\">\n    <div class=\"tw-flex tw-select-none tw-items-center tw-gap-4\">\n      <i class=\"bwi bwi-dashboard tw-text-3xl tw-text-primary-500\" aria-hidden=\"true\"></i>\n      <div class=\"tw-text-lg\">{{ title }}</div>\n      <bit-progress class=\"tw-flex-1\" [showText]=\"false\" [barWidth]=\"barWidth\"></bit-progress>\n      <span *ngIf=\"tasks.length > 0; else spinner\">\n        {{ \"complete\" | i18n: amountCompleted : tasks.length }}\n      </span>\n      <i\n        class=\"bwi tw-my-auto\"\n        [ngClass]=\"open ? 'bwi-angle-down' : 'bwi-angle-up'\"\n        aria-hidden=\"true\"\n      ></i>\n    </div>\n  </summary>\n  <ul class=\"tw-mb-0 tw-ml-6 tw-flex tw-flex-col tw-gap-4\">\n    <ng-content></ng-content>\n  </ul>\n  <div class=\"tw-p-4 tw-pt-0\">\n    <button bitLink type=\"button\" class=\"tw-ml-auto tw-block\" (click)=\"dismiss.emit()\">\n      {{ \"dismiss\" | i18n }}\n    </button>\n  </div>\n</details>\n\n<ng-template #spinner>\n  <i class=\"bwi bwi-spinner bwi-spin\"></i>\n</ng-template>\n","import { Component, ContentChildren, EventEmitter, Input, Output, QueryList } from \"@angular/core\";\n\nimport { OnboardingTaskComponent } from \"./onboarding-task.component\";\n\n@Component({\n  selector: \"sm-onboarding\",\n  templateUrl: \"./onboarding.component.html\",\n})\nexport class OnboardingComponent {\n  @ContentChildren(OnboardingTaskComponent) tasks: QueryList<OnboardingTaskComponent>;\n  @Input() title: string;\n\n  @Output() dismiss = new EventEmitter<void>();\n\n  protected open = true;\n  protected visible = false;\n\n  protected get amountCompleted(): number {\n    return this.tasks.filter((task) => task.completed).length;\n  }\n\n  protected get barWidth(): number {\n    return this.tasks.length === 0 ? 0 : (this.amountCompleted / this.tasks.length) * 100;\n  }\n\n  protected toggle() {\n    this.open = !this.open;\n  }\n}\n","<section>\n  <header class=\"tw-flex tw-max-w-min tw-items-center tw-gap-2\">\n    <div><ng-content select=\"[slot=summary]\"></ng-content></div>\n    <button\n      type=\"button\"\n      [bitIconButton]=\"open ? 'bwi-angle-up' : 'bwi-angle-down'\"\n      (click)=\"toggle()\"\n      [attr.aria-expanded]=\"open\"\n      [attr.aria-controls]=\"contentId\"\n    ></button>\n  </header>\n  <div *ngIf=\"open\" [attr.id]=\"contentId\" class=\"tw-mt-4\">\n    <ng-content></ng-content>\n  </div>\n</section>\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-section\",\n  templateUrl: \"./section.component.html\",\n})\nexport class SectionComponent {\n  @Input() open = true;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  protected toggle() {\n    this.open = !this.open;\n  }\n}\n","<app-header [title]=\"organizationName\">\n  <sm-new-menu></sm-new-menu>\n</app-header>\n\n<div *ngIf=\"!loading && view$ | async as view; else spinner\">\n  <sm-onboarding [title]=\"'getStarted' | i18n\" *ngIf=\"showOnboarding\" (dismiss)=\"hideOnboarding()\">\n    <sm-onboarding-task\n      [title]=\"'createServiceAccount' | i18n\"\n      (click)=\"openServiceAccountDialog()\"\n      icon=\"bwi-cli\"\n      [completed]=\"view.tasks.createServiceAccount\"\n    >\n      <span class=\"tw-pl-1\">\n        {{ \"downloadThe\" | i18n }}\n        <a bitLink href=\"https://bitwarden.com/help/secrets-manager-cli/\" target=\"_blank\">{{\n          \"smCLI\" | i18n\n        }}</a>\n      </span>\n    </sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"userIsAdmin\"\n      [title]=\"'createProject' | i18n\"\n      (click)=\"openNewProjectDialog()\"\n      icon=\"bwi-collection\"\n      [completed]=\"view.tasks.createProject\"\n    ></sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"userIsAdmin\"\n      [title]=\"'importSecrets' | i18n\"\n      [route]=\"['settings', 'import']\"\n      icon=\"bwi-download\"\n      [completed]=\"view.tasks.importSecrets\"\n    ></sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"view.tasks.createProject\"\n      [title]=\"'createSecret' | i18n\"\n      (click)=\"openSecretDialog()\"\n      icon=\"bwi-key\"\n      [completed]=\"view.tasks.createSecret\"\n    ></sm-onboarding-task>\n  </sm-onboarding>\n\n  <div class=\"tw-mt-6 tw-flex tw-flex-col tw-gap-6\">\n    <sm-section>\n      <h2 slot=\"summary\" class=\"tw-mb-0\" bitTypography=\"h2\" noMargin>{{ \"projects\" | i18n }}</h2>\n      <sm-projects-list\n        (newProjectEvent)=\"openNewProjectDialog()\"\n        (editProjectEvent)=\"openEditProject($event)\"\n        (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n        [projects]=\"view.latestProjects\"\n      ></sm-projects-list>\n      <div *ngIf=\"view.allProjects.length > 0\" class=\"tw-ml-auto tw-mt-4 tw-max-w-max\">\n        {{ \"showingPortionOfTotal\" | i18n: view.latestProjects.length : view.allProjects.length }}\n        <a bitLink routerLink=\"projects\" class=\"tw-ml-2\">{{ \"viewAll\" | i18n }}</a>\n      </div>\n    </sm-section>\n    <sm-section>\n      <h2 slot=\"summary\" class=\"tw-mb-0\" bitTypography=\"h2\" noMargin>{{ \"secrets\" | i18n }}</h2>\n      <sm-secrets-list\n        baseRoute=\"secrets\"\n        (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n        (newSecretEvent)=\"openNewSecretDialog()\"\n        (editSecretEvent)=\"openEditSecret($event)\"\n        (copySecretNameEvent)=\"copySecretName($event)\"\n        (copySecretValueEvent)=\"copySecretValue($event)\"\n        (copySecretUuidEvent)=\"copySecretUuid($event)\"\n        [secrets]=\"view.latestSecrets\"\n      ></sm-secrets-list>\n      <div *ngIf=\"view.allSecrets.length > 0\" class=\"tw-ml-auto tw-mt-4 tw-max-w-max\">\n        {{ \"showingPortionOfTotal\" | i18n: view.latestSecrets.length : view.allSecrets.length }}\n        <a bitLink routerLink=\"secrets\" class=\"tw-ml-2\">{{ \"viewAll\" | i18n }}</a>\n      </div>\n    </sm-section>\n  </div>\n</div>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  map,\n  Observable,\n  switchMap,\n  Subject,\n  takeUntil,\n  combineLatest,\n  startWith,\n  distinctUntilChanged,\n  take,\n  share,\n} from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../projects/dialog/project-delete-dialog.component\";\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport { ProjectService } from \"../projects/project.service\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../secrets/secret.service\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"../service-accounts/service-account.service\";\nimport { SecretsListComponent } from \"../shared/secrets-list.component\";\n\ntype Tasks = {\n  [organizationId: string]: OrganizationTasks;\n};\n\ntype OrganizationTasks = {\n  importSecrets: boolean;\n  createSecret: boolean;\n  createProject: boolean;\n  createServiceAccount: boolean;\n};\n\n@Component({\n  selector: \"sm-overview\",\n  templateUrl: \"./overview.component.html\",\n})\nexport class OverviewComponent implements OnInit, OnDestroy {\n  private destroy$: Subject<void> = new Subject<void>();\n  private tableSize = 10;\n  private organizationId: string;\n  protected organizationName: string;\n  protected userIsAdmin: boolean;\n  protected showOnboarding = false;\n  protected loading = true;\n  protected organizationEnabled = false;\n\n  protected view$: Observable<{\n    allProjects: ProjectListView[];\n    allSecrets: SecretListView[];\n    latestProjects: ProjectListView[];\n    latestSecrets: SecretListView[];\n    tasks: OrganizationTasks;\n  }>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private secretService: SecretService,\n    private serviceAccountService: ServiceAccountService,\n    private dialogService: DialogService,\n    private organizationService: OrganizationService,\n    private stateService: StateService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n  ) {}\n\n  ngOnInit() {\n    const orgId$ = this.route.params.pipe(\n      map((p) => p.organizationId),\n      distinctUntilChanged(),\n    );\n\n    orgId$\n      .pipe(\n        map((orgId) => this.organizationService.get(orgId)),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((org) => {\n        this.organizationId = org.id;\n        this.organizationName = org.name;\n        this.userIsAdmin = org.isAdmin;\n        this.loading = true;\n        this.organizationEnabled = org.enabled;\n      });\n\n    const projects$ = combineLatest([\n      orgId$,\n      this.projectService.project$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.projectService.getProjects(orgId)),\n      share(),\n    );\n\n    const secrets$ = combineLatest([\n      orgId$,\n      this.secretService.secret$.pipe(startWith(null)),\n      this.projectService.project$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.secretService.getSecrets(orgId)),\n      share(),\n    );\n\n    const serviceAccounts$ = combineLatest([\n      orgId$,\n      this.serviceAccountService.serviceAccount$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.serviceAccountService.getServiceAccounts(orgId, false)),\n      share(),\n    );\n\n    this.view$ = orgId$.pipe(\n      switchMap((orgId) =>\n        combineLatest([projects$, secrets$, serviceAccounts$]).pipe(\n          switchMap(async ([projects, secrets, serviceAccounts]) => ({\n            latestProjects: this.getRecentItems(projects, this.tableSize),\n            latestSecrets: this.getRecentItems(secrets, this.tableSize),\n            allProjects: projects,\n            allSecrets: secrets,\n            tasks: await this.saveCompletedTasks(orgId, {\n              importSecrets: secrets.length > 0,\n              createSecret: secrets.length > 0,\n              createProject: projects.length > 0,\n              createServiceAccount: serviceAccounts.length > 0,\n            }),\n          })),\n        ),\n      ),\n    );\n\n    // Refresh onboarding status when orgId changes by fetching the first value from view$.\n    orgId$\n      .pipe(\n        switchMap(() => this.view$.pipe(take(1))),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((view) => {\n        this.showOnboarding = Object.values(view.tasks).includes(false);\n        this.loading = false;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private getRecentItems<T extends { revisionDate: string }[]>(items: T, length: number): T {\n    return items\n      .sort((a, b) => {\n        return new Date(b.revisionDate).getTime() - new Date(a.revisionDate).getTime();\n      })\n      .slice(0, length) as T;\n  }\n\n  private async saveCompletedTasks(\n    organizationId: string,\n    orgTasks: OrganizationTasks,\n  ): Promise<OrganizationTasks> {\n    const prevTasks = ((await this.stateService.getSMOnboardingTasks()) || {}) as Tasks;\n    const newlyCompletedOrgTasks = Object.fromEntries(\n      Object.entries(orgTasks).filter(([_k, v]) => v === true),\n    );\n    const nextOrgTasks = {\n      importSecrets: false,\n      createSecret: false,\n      createProject: false,\n      createServiceAccount: false,\n      ...prevTasks[organizationId],\n      ...newlyCompletedOrgTasks,\n    };\n    this.stateService.setSMOnboardingTasks({\n      ...prevTasks,\n      [organizationId]: nextOrgTasks,\n    });\n    return nextOrgTasks as OrganizationTasks;\n  }\n\n  // Projects ---\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        organizationEnabled: this.organizationEnabled,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  openDeleteProjectDialog(event: ProjectListView[]) {\n    this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n      data: {\n        projects: event,\n      },\n    });\n  }\n\n  // Secrets ---\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService,\n    );\n  }\n\n  copySecretUuid(id: string) {\n    SecretsListComponent.copySecretUuid(id, this.platformUtilsService, this.i18nService);\n  }\n\n  protected hideOnboarding() {\n    this.showOnboarding = false;\n    this.saveCompletedTasks(this.organizationId, {\n      importSecrets: true,\n      createSecret: true,\n      createProject: true,\n      createServiceAccount: true,\n    });\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { OverviewComponent } from \"./overview.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: OverviewComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OverviewRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { OnboardingModule } from \"./onboarding.module\";\nimport { OverviewRoutingModule } from \"./overview-routing.module\";\nimport { OverviewComponent } from \"./overview.component\";\nimport { SectionComponent } from \"./section.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, OverviewRoutingModule, OnboardingModule],\n  declarations: [OverviewComponent, SectionComponent],\n  providers: [],\n})\nexport class OverviewModule {}\n","export enum ApItemEnum {\n  User,\n  Group,\n  ServiceAccount,\n  Project,\n}\n\nexport class ApItemEnumUtil {\n  static itemIcon(type: ApItemEnum): string {\n    switch (type) {\n      case ApItemEnum.User:\n        return \"bwi-user\";\n      case ApItemEnum.Group:\n        return \"bwi-family\";\n      case ApItemEnum.ServiceAccount:\n        return \"bwi-wrench\";\n      case ApItemEnum.Project:\n        return \"bwi-collection\";\n    }\n  }\n}\n","export enum ApPermissionEnum {\n  CanRead = \"canRead\",\n  CanReadWrite = \"canReadWrite\",\n}\n\nexport class ApPermissionEnumUtil {\n  static toApPermissionEnum(read: boolean, write: boolean): ApPermissionEnum {\n    if (read && write) {\n      return ApPermissionEnum.CanReadWrite;\n    } else if (read) {\n      return ApPermissionEnum.CanRead;\n    } else {\n      throw new Error(\"Unsupported Access Policy Permission option\");\n    }\n  }\n\n  static toRead(permission: ApPermissionEnum): boolean {\n    if (permission == ApPermissionEnum.CanRead || permission == ApPermissionEnum.CanReadWrite) {\n      return true;\n    }\n    return false;\n  }\n\n  static toWrite(permission: ApPermissionEnum): boolean {\n    if (permission === ApPermissionEnum.CanReadWrite) {\n      return true;\n    }\n    return false;\n  }\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\nimport { ApItemValueType } from \"./models/ap-item-value.type\";\nimport { ApItemViewType } from \"./models/ap-item-view.type\";\nimport { ApItemEnum } from \"./models/enums/ap-item.enum\";\nimport { ApPermissionEnum } from \"./models/enums/ap-permission.enum\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessPolicySelectorService {\n  constructor(private organizationService: OrganizationService) {}\n\n  async showAccessRemovalWarning(\n    organizationId: string,\n    selectedPoliciesValues: ApItemValueType[],\n  ): Promise<boolean> {\n    const organization = this.organizationService.get(organizationId);\n    if (organization.isOwner || organization.isAdmin) {\n      return false;\n    }\n\n    const selectedUserReadWritePolicy = selectedPoliciesValues.find(\n      (s) =>\n        s.type === ApItemEnum.User &&\n        s.currentUser &&\n        s.permission === ApPermissionEnum.CanReadWrite,\n    );\n\n    const selectedGroupReadWritePolicies = selectedPoliciesValues.filter(\n      (s) =>\n        s.type === ApItemEnum.Group &&\n        s.permission == ApPermissionEnum.CanReadWrite &&\n        s.currentUserInGroup,\n    );\n\n    if (selectedGroupReadWritePolicies == null || selectedGroupReadWritePolicies.length == 0) {\n      if (selectedUserReadWritePolicy == null) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  isAccessRemoval(current: ApItemViewType[], selected: ApItemValueType[]): boolean {\n    if (current?.length === 0) {\n      return false;\n    }\n\n    if (selected?.length === 0) {\n      return true;\n    }\n\n    return this.isAnyCurrentIdNotInSelectedIds(current, selected);\n  }\n\n  private isAnyCurrentIdNotInSelectedIds(\n    current: ApItemViewType[],\n    selected: ApItemValueType[],\n  ): boolean {\n    const currentIds = current.map((x) => x.id);\n    const selectedIds = selected.map((x) => x.id);\n    return !currentIds.every((id) => selectedIds.includes(id));\n  }\n}\n","export class BaseAccessPolicyView {\n  id: string;\n  read: boolean;\n  write: boolean;\n  creationDate: string;\n  revisionDate: string;\n}\n\nexport class UserProjectAccessPolicyView extends BaseAccessPolicyView {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedProjectId: string;\n  userId: string;\n  currentUser: boolean;\n}\n\nexport class UserServiceAccountAccessPolicyView extends BaseAccessPolicyView {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedServiceAccountId: string;\n  userId: string;\n  currentUser: boolean;\n}\n\nexport class GroupProjectAccessPolicyView extends BaseAccessPolicyView {\n  groupId: string;\n  groupName: string;\n  grantedProjectId: string;\n  currentUserInGroup: boolean;\n}\n\nexport class GroupServiceAccountAccessPolicyView extends BaseAccessPolicyView {\n  groupId: string;\n  groupName: string;\n  grantedServiceAccountId: string;\n  currentUserInGroup: boolean;\n}\n\nexport class ServiceAccountProjectAccessPolicyView extends BaseAccessPolicyView {\n  serviceAccountId: string;\n  serviceAccountName: string;\n  grantedProjectId: string;\n  grantedProjectName: string;\n}\n\nexport class ProjectAccessPoliciesView {\n  userAccessPolicies: UserProjectAccessPolicyView[];\n  groupAccessPolicies: GroupProjectAccessPolicyView[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyView[];\n}\n\nexport class ProjectPeopleAccessPoliciesView {\n  userAccessPolicies: UserProjectAccessPolicyView[];\n  groupAccessPolicies: GroupProjectAccessPolicyView[];\n}\n\nexport class ServiceAccountPeopleAccessPoliciesView {\n  userAccessPolicies: UserServiceAccountAccessPolicyView[];\n  groupAccessPolicies: GroupServiceAccountAccessPolicyView[];\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { SelectItemView } from \"@bitwarden/components\";\n\nimport {\n  ProjectPeopleAccessPoliciesView,\n  ServiceAccountPeopleAccessPoliciesView,\n} from \"../../../../models/view/access-policy.view\";\nimport { PotentialGranteeView } from \"../../../../models/view/potential-grantee.view\";\n\nimport { ApItemEnum, ApItemEnumUtil } from \"./enums/ap-item.enum\";\nimport { ApPermissionEnum, ApPermissionEnumUtil } from \"./enums/ap-permission.enum\";\n\nexport type ApItemViewType = SelectItemView & {\n  accessPolicyId?: string;\n  permission?: ApPermissionEnum;\n} & (\n    | {\n        type: ApItemEnum.User;\n        userId?: string;\n        currentUser?: boolean;\n      }\n    | {\n        type: ApItemEnum.Group;\n        currentUserInGroup?: boolean;\n      }\n    | {\n        type: ApItemEnum.ServiceAccount;\n      }\n    | {\n        type: ApItemEnum.Project;\n      }\n  );\n\nexport function convertToAccessPolicyItemViews(\n  value: ProjectPeopleAccessPoliciesView | ServiceAccountPeopleAccessPoliciesView,\n): ApItemViewType[] {\n  const accessPolicies: ApItemViewType[] = [];\n\n  value.userAccessPolicies.forEach((policy) => {\n    accessPolicies.push({\n      type: ApItemEnum.User,\n      icon: ApItemEnumUtil.itemIcon(ApItemEnum.User),\n      id: policy.organizationUserId,\n      accessPolicyId: policy.id,\n      labelName: policy.organizationUserName,\n      listName: policy.organizationUserName,\n      permission: ApPermissionEnumUtil.toApPermissionEnum(policy.read, policy.write),\n      userId: policy.userId,\n      currentUser: policy.currentUser,\n    });\n  });\n\n  value.groupAccessPolicies.forEach((policy) => {\n    accessPolicies.push({\n      type: ApItemEnum.Group,\n      icon: ApItemEnumUtil.itemIcon(ApItemEnum.Group),\n      id: policy.groupId,\n      accessPolicyId: policy.id,\n      labelName: policy.groupName,\n      listName: policy.groupName,\n      permission: ApPermissionEnumUtil.toApPermissionEnum(policy.read, policy.write),\n      currentUserInGroup: policy.currentUserInGroup,\n    });\n  });\n\n  return accessPolicies;\n}\n\nexport function convertPotentialGranteesToApItemViewType(\n  grantees: PotentialGranteeView[],\n): ApItemViewType[] {\n  return grantees.map((granteeView) => {\n    let icon: string;\n    let type: ApItemEnum;\n    let listName = granteeView.name;\n    let labelName = granteeView.name;\n\n    switch (granteeView.type) {\n      case \"user\":\n        icon = ApItemEnumUtil.itemIcon(ApItemEnum.User);\n        type = ApItemEnum.User;\n        if (Utils.isNullOrWhitespace(granteeView.name)) {\n          listName = granteeView.email;\n          labelName = granteeView.email;\n        } else {\n          listName = `${granteeView.name} (${granteeView.email})`;\n        }\n        break;\n      case \"group\":\n        icon = ApItemEnumUtil.itemIcon(ApItemEnum.Group);\n        type = ApItemEnum.Group;\n        break;\n      case \"serviceAccount\":\n        icon = ApItemEnumUtil.itemIcon(ApItemEnum.ServiceAccount);\n        type = ApItemEnum.ServiceAccount;\n        break;\n      case \"project\":\n        icon = ApItemEnumUtil.itemIcon(ApItemEnum.Project);\n        type = ApItemEnum.Project;\n        break;\n    }\n\n    return {\n      icon: icon,\n      type: type,\n      id: granteeView.id,\n      labelName: labelName,\n      listName: listName,\n      currentUserInGroup: granteeView.currentUserInGroup,\n      currentUser: granteeView.currentUser,\n    };\n  });\n}\n","export class PotentialGranteeView {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n  currentUserInGroup: boolean;\n  currentUser: boolean;\n}\n","import { AccessPolicyRequest } from \"./access-policy.request\";\n\nexport class AccessPoliciesCreateRequest {\n  userAccessPolicyRequests?: AccessPolicyRequest[];\n  groupAccessPolicyRequests?: AccessPolicyRequest[];\n  serviceAccountAccessPolicyRequests?: AccessPolicyRequest[];\n}\n","import { AccessPolicyRequest } from \"./access-policy.request\";\n\nexport class PeopleAccessPoliciesRequest {\n  userAccessPolicyRequests?: AccessPolicyRequest[];\n  groupAccessPolicyRequests?: AccessPolicyRequest[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class BaseAccessPolicyResponse extends BaseResponse {\n  id: string;\n  read: boolean;\n  write: boolean;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n\nexport class UserProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedProjectId: string;\n  userId: string;\n  currentUser: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.organizationUserName = this.getResponseProperty(\"OrganizationUserName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.currentUser = this.getResponseProperty(\"CurrentUser\");\n  }\n}\n\nexport class UserServiceAccountAccessPolicyResponse extends BaseAccessPolicyResponse {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedServiceAccountId: string;\n  userId: string;\n  currentUser: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.organizationUserName = this.getResponseProperty(\"OrganizationUserName\");\n    this.grantedServiceAccountId = this.getResponseProperty(\"GrantedServiceAccountId\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.currentUser = this.getResponseProperty(\"CurrentUser\");\n  }\n}\n\nexport class GroupProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  groupId: string;\n  groupName: string;\n  grantedProjectId: string;\n  currentUserInGroup: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.groupName = this.getResponseProperty(\"GroupName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.currentUserInGroup = this.getResponseProperty(\"CurrentUserInGroup\");\n  }\n}\n\nexport class GroupServiceAccountAccessPolicyResponse extends BaseAccessPolicyResponse {\n  groupId: string;\n  groupName: string;\n  grantedServiceAccountId: string;\n  currentUserInGroup: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.groupName = this.getResponseProperty(\"GroupName\");\n    this.grantedServiceAccountId = this.getResponseProperty(\"GrantedServiceAccountId\");\n    this.currentUserInGroup = this.getResponseProperty(\"CurrentUserInGroup\");\n  }\n}\n\nexport class ServiceAccountProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  serviceAccountId: string;\n  serviceAccountName: string;\n  grantedProjectId: string;\n  grantedProjectName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.serviceAccountId = this.getResponseProperty(\"ServiceAccountId\");\n    this.serviceAccountName = this.getResponseProperty(\"ServiceAccountName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.grantedProjectName = this.getResponseProperty(\"GrantedProjectName\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ProjectAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserProjectAccessPolicyResponse[];\n  groupAccessPolicies: GroupProjectAccessPolicyResponse[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.userAccessPolicies = userAccessPolicies.map(\n      (k: any) => new UserProjectAccessPolicyResponse(k),\n    );\n    const groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.groupAccessPolicies = groupAccessPolicies.map(\n      (k: any) => new GroupProjectAccessPolicyResponse(k),\n    );\n    const serviceAccountAccessPolicies = this.getResponseProperty(\"ServiceAccountAccessPolicies\");\n    this.serviceAccountAccessPolicies = serviceAccountAccessPolicies.map(\n      (k: any) => new ServiceAccountProjectAccessPolicyResponse(k),\n    );\n  }\n}\n","export class AccessPolicyUpdateRequest {\n  read: boolean;\n  write: boolean;\n}\n","export class AccessPolicyRequest {\n  granteeId: string;\n  read: boolean;\n  write: boolean;\n}\n","export class GrantedPolicyRequest {\n  grantedId: string;\n  read: boolean;\n  write: boolean;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class PotentialGranteeResponse extends BaseResponse {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n  currentUserInGroup: boolean;\n  currentUser: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.currentUserInGroup = this.getResponseProperty(\"CurrentUserInGroup\");\n    this.currentUser = this.getResponseProperty(\"CurrentUser\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ProjectPeopleAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserProjectAccessPolicyResponse[];\n  groupAccessPolicies: GroupProjectAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.userAccessPolicies = userAccessPolicies.map(\n      (k: any) => new UserProjectAccessPolicyResponse(k),\n    );\n    const groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.groupAccessPolicies = groupAccessPolicies.map(\n      (k: any) => new GroupProjectAccessPolicyResponse(k),\n    );\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupServiceAccountAccessPolicyResponse,\n  UserServiceAccountAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ServiceAccountPeopleAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserServiceAccountAccessPolicyResponse[];\n  groupAccessPolicies: GroupServiceAccountAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.userAccessPolicies = userAccessPolicies.map(\n      (k: any) => new UserServiceAccountAccessPolicyResponse(k),\n    );\n    const groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.groupAccessPolicies = groupAccessPolicies.map(\n      (k: any) => new GroupServiceAccountAccessPolicyResponse(k),\n    );\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport {\n  BaseAccessPolicyView,\n  GroupProjectAccessPolicyView,\n  GroupServiceAccountAccessPolicyView,\n  ProjectAccessPoliciesView,\n  ProjectPeopleAccessPoliciesView,\n  ServiceAccountProjectAccessPolicyView,\n  UserProjectAccessPolicyView,\n  UserServiceAccountAccessPolicyView,\n  ServiceAccountPeopleAccessPoliciesView,\n} from \"../../models/view/access-policy.view\";\nimport { PotentialGranteeView } from \"../../models/view/potential-grantee.view\";\nimport { AccessPoliciesCreateRequest } from \"../../shared/access-policies/models/requests/access-policies-create.request\";\nimport { PeopleAccessPoliciesRequest } from \"../../shared/access-policies/models/requests/people-access-policies.request\";\nimport { ProjectAccessPoliciesResponse } from \"../../shared/access-policies/models/responses/project-access-policies.response\";\n\nimport { AccessPolicyUpdateRequest } from \"./models/requests/access-policy-update.request\";\nimport { AccessPolicyRequest } from \"./models/requests/access-policy.request\";\nimport { GrantedPolicyRequest } from \"./models/requests/granted-policy.request\";\nimport {\n  GroupServiceAccountAccessPolicyResponse,\n  UserServiceAccountAccessPolicyResponse,\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./models/responses/access-policy.response\";\nimport { PotentialGranteeResponse } from \"./models/responses/potential-grantee.response\";\nimport { ProjectPeopleAccessPoliciesResponse } from \"./models/responses/project-people-access-policies.response\";\nimport { ServiceAccountPeopleAccessPoliciesResponse } from \"./models/responses/service-account-people-access-policies.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessPolicyService {\n  private _projectAccessPolicyChanges$ = new Subject<ProjectAccessPoliciesView>();\n  private _serviceAccountGrantedPolicyChanges$ = new Subject<\n    ServiceAccountProjectAccessPolicyView[]\n  >();\n\n  /**\n   * Emits when a project access policy is created or deleted.\n   */\n  readonly projectAccessPolicyChanges$ = this._projectAccessPolicyChanges$.asObservable();\n\n  /**\n   * Emits when a service account granted policy is created or deleted.\n   */\n  readonly serviceAccountGrantedPolicyChanges$ =\n    this._serviceAccountGrantedPolicyChanges$.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected encryptService: EncryptService,\n  ) {}\n\n  refreshProjectAccessPolicyChanges() {\n    this._projectAccessPolicyChanges$.next(null);\n  }\n\n  async getGrantedPolicies(\n    serviceAccountId: string,\n    organizationId: string,\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/granted-policies\",\n      null,\n      true,\n      true,\n    );\n\n    const results = new ListResponse(r, ServiceAccountProjectAccessPolicyResponse);\n    return await this.createServiceAccountProjectAccessPolicyViews(results.data, organizationId);\n  }\n\n  async createGrantedPolicies(\n    organizationId: string,\n    serviceAccountId: string,\n    policies: ServiceAccountProjectAccessPolicyView[],\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const request = this.getGrantedPoliciesCreateRequest(policies);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/granted-policies\",\n      request,\n      true,\n      true,\n    );\n    const results = new ListResponse(r, ServiceAccountProjectAccessPolicyResponse);\n    const views = await this.createServiceAccountProjectAccessPolicyViews(\n      results.data,\n      organizationId,\n    );\n    this._serviceAccountGrantedPolicyChanges$.next(views);\n    return views;\n  }\n\n  async getProjectAccessPolicies(\n    organizationId: string,\n    projectId: string,\n  ): Promise<ProjectAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      null,\n      true,\n      true,\n    );\n\n    const results = new ProjectAccessPoliciesResponse(r);\n    return await this.createProjectAccessPoliciesView(organizationId, results);\n  }\n\n  async getProjectPeopleAccessPolicies(\n    projectId: string,\n  ): Promise<ProjectPeopleAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/access-policies/people\",\n      null,\n      true,\n      true,\n    );\n\n    const results = new ProjectPeopleAccessPoliciesResponse(r);\n    return this.createProjectPeopleAccessPoliciesView(results);\n  }\n\n  async putProjectPeopleAccessPolicies(\n    projectId: string,\n    peoplePoliciesView: ProjectPeopleAccessPoliciesView,\n  ) {\n    const request = this.getPeopleAccessPoliciesRequest(peoplePoliciesView);\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/projects/\" + projectId + \"/access-policies/people\",\n      request,\n      true,\n      true,\n    );\n    const results = new ProjectPeopleAccessPoliciesResponse(r);\n    return this.createProjectPeopleAccessPoliciesView(results);\n  }\n\n  async getServiceAccountPeopleAccessPolicies(\n    serviceAccountId: string,\n  ): Promise<ServiceAccountPeopleAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-policies/people\",\n      null,\n      true,\n      true,\n    );\n\n    const results = new ServiceAccountPeopleAccessPoliciesResponse(r);\n    return this.createServiceAccountPeopleAccessPoliciesView(results);\n  }\n\n  async putServiceAccountPeopleAccessPolicies(\n    serviceAccountId: string,\n    peoplePoliciesView: ServiceAccountPeopleAccessPoliciesView,\n  ) {\n    const request = this.getPeopleAccessPoliciesRequest(peoplePoliciesView);\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-policies/people\",\n      request,\n      true,\n      true,\n    );\n    const results = new ServiceAccountPeopleAccessPoliciesResponse(r);\n    return this.createServiceAccountPeopleAccessPoliciesView(results);\n  }\n\n  async createProjectAccessPolicies(\n    organizationId: string,\n    projectId: string,\n    projectAccessPoliciesView: ProjectAccessPoliciesView,\n  ): Promise<ProjectAccessPoliciesView> {\n    const request = this.getAccessPoliciesCreateRequest(projectAccessPoliciesView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      request,\n      true,\n      true,\n    );\n    const results = new ProjectAccessPoliciesResponse(r);\n    const view = await this.createProjectAccessPoliciesView(organizationId, results);\n    this._projectAccessPolicyChanges$.next(view);\n    return view;\n  }\n\n  async deleteAccessPolicy(accessPolicyId: string): Promise<void> {\n    await this.apiService.send(\"DELETE\", \"/access-policies/\" + accessPolicyId, null, true, false);\n    this._projectAccessPolicyChanges$.next(null);\n    this._serviceAccountGrantedPolicyChanges$.next(null);\n  }\n\n  async updateAccessPolicy(baseAccessPolicyView: BaseAccessPolicyView): Promise<void> {\n    const payload = new AccessPolicyUpdateRequest();\n    payload.read = baseAccessPolicyView.read;\n    payload.write = baseAccessPolicyView.write;\n    await this.apiService.send(\n      \"PUT\",\n      \"/access-policies/\" + baseAccessPolicyView.id,\n      payload,\n      true,\n      true,\n    );\n  }\n\n  private async createProjectAccessPoliciesView(\n    organizationId: string,\n    projectAccessPoliciesResponse: ProjectAccessPoliciesResponse,\n  ): Promise<ProjectAccessPoliciesView> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const view = new ProjectAccessPoliciesView();\n\n    view.userAccessPolicies = projectAccessPoliciesResponse.userAccessPolicies.map((ap) => {\n      return this.createUserProjectAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = projectAccessPoliciesResponse.groupAccessPolicies.map((ap) => {\n      return this.createGroupProjectAccessPolicyView(ap);\n    });\n    view.serviceAccountAccessPolicies = await Promise.all(\n      projectAccessPoliciesResponse.serviceAccountAccessPolicies.map(async (ap) => {\n        return await this.createServiceAccountProjectAccessPolicyView(orgKey, ap);\n      }),\n    );\n    return view;\n  }\n\n  private createProjectPeopleAccessPoliciesView(\n    peopleAccessPoliciesResponse: ProjectPeopleAccessPoliciesResponse,\n  ): ProjectPeopleAccessPoliciesView {\n    const view = new ProjectPeopleAccessPoliciesView();\n\n    view.userAccessPolicies = peopleAccessPoliciesResponse.userAccessPolicies.map((ap) => {\n      return this.createUserProjectAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = peopleAccessPoliciesResponse.groupAccessPolicies.map((ap) => {\n      return this.createGroupProjectAccessPolicyView(ap);\n    });\n    return view;\n  }\n\n  private createServiceAccountPeopleAccessPoliciesView(\n    response: ServiceAccountPeopleAccessPoliciesResponse,\n  ): ServiceAccountPeopleAccessPoliciesView {\n    const view = new ServiceAccountPeopleAccessPoliciesView();\n\n    view.userAccessPolicies = response.userAccessPolicies.map((ap) => {\n      return this.createUserServiceAccountAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = response.groupAccessPolicies.map((ap) => {\n      return this.createGroupServiceAccountAccessPolicyView(ap);\n    });\n    return view;\n  }\n\n  private getAccessPoliciesCreateRequest(\n    projectAccessPoliciesView: ProjectAccessPoliciesView,\n  ): AccessPoliciesCreateRequest {\n    const createRequest = new AccessPoliciesCreateRequest();\n\n    if (projectAccessPoliciesView.userAccessPolicies?.length > 0) {\n      createRequest.userAccessPolicyRequests = projectAccessPoliciesView.userAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.organizationUserId, ap);\n        },\n      );\n    }\n\n    if (projectAccessPoliciesView.groupAccessPolicies?.length > 0) {\n      createRequest.groupAccessPolicyRequests = projectAccessPoliciesView.groupAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.groupId, ap);\n        },\n      );\n    }\n\n    if (projectAccessPoliciesView.serviceAccountAccessPolicies?.length > 0) {\n      createRequest.serviceAccountAccessPolicyRequests =\n        projectAccessPoliciesView.serviceAccountAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.serviceAccountId, ap);\n        });\n    }\n    return createRequest;\n  }\n\n  private getPeopleAccessPoliciesRequest(\n    view: ProjectPeopleAccessPoliciesView | ServiceAccountPeopleAccessPoliciesView,\n  ): PeopleAccessPoliciesRequest {\n    const request = new PeopleAccessPoliciesRequest();\n\n    if (view.userAccessPolicies?.length > 0) {\n      request.userAccessPolicyRequests = view.userAccessPolicies.map((ap) => {\n        return this.getAccessPolicyRequest(ap.organizationUserId, ap);\n      });\n    }\n\n    if (view.groupAccessPolicies?.length > 0) {\n      request.groupAccessPolicyRequests = view.groupAccessPolicies.map((ap) => {\n        return this.getAccessPolicyRequest(ap.groupId, ap);\n      });\n    }\n\n    return request;\n  }\n\n  private createUserProjectAccessPolicyView(\n    response: UserProjectAccessPolicyResponse,\n  ): UserProjectAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      organizationUserId: response.organizationUserId,\n      organizationUserName: response.organizationUserName,\n      userId: response.userId,\n      currentUser: response.currentUser,\n    };\n  }\n\n  private createGroupProjectAccessPolicyView(\n    response: GroupProjectAccessPolicyResponse,\n  ): GroupProjectAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      groupId: response.groupId,\n      groupName: response.groupName,\n      currentUserInGroup: response.currentUserInGroup,\n    };\n  }\n\n  private async createServiceAccountProjectAccessPolicyView(\n    organizationKey: SymmetricCryptoKey,\n    response: ServiceAccountProjectAccessPolicyResponse,\n  ): Promise<ServiceAccountProjectAccessPolicyView> {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      serviceAccountId: response.serviceAccountId,\n      grantedProjectName: response.grantedProjectName\n        ? await this.encryptService.decryptToUtf8(\n            new EncString(response.grantedProjectName),\n            organizationKey,\n          )\n        : null,\n      serviceAccountName: response.serviceAccountName\n        ? await this.encryptService.decryptToUtf8(\n            new EncString(response.serviceAccountName),\n            organizationKey,\n          )\n        : null,\n    };\n  }\n\n  private createUserServiceAccountAccessPolicyView(\n    response: UserServiceAccountAccessPolicyResponse,\n  ): UserServiceAccountAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedServiceAccountId: response.grantedServiceAccountId,\n      organizationUserId: response.organizationUserId,\n      organizationUserName: response.organizationUserName,\n      userId: response.userId,\n      currentUser: response.currentUser,\n    };\n  }\n\n  private createGroupServiceAccountAccessPolicyView(\n    response: GroupServiceAccountAccessPolicyResponse,\n  ): GroupServiceAccountAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedServiceAccountId: response.grantedServiceAccountId,\n      groupId: response.groupId,\n      groupName: response.groupName,\n      currentUserInGroup: response.currentUserInGroup,\n    };\n  }\n\n  async getPeoplePotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/people/potential-grantees\",\n      null,\n      true,\n      true,\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async getServiceAccountsPotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/service-accounts/potential-grantees\",\n      null,\n      true,\n      true,\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async getProjectsPotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/projects/potential-grantees\",\n      null,\n      true,\n      true,\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  protected async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  protected getAccessPolicyRequest(\n    granteeId: string,\n    view:\n      | UserProjectAccessPolicyView\n      | UserServiceAccountAccessPolicyView\n      | GroupProjectAccessPolicyView\n      | GroupServiceAccountAccessPolicyView\n      | ServiceAccountProjectAccessPolicyView,\n  ) {\n    const request = new AccessPolicyRequest();\n    request.granteeId = granteeId;\n    request.read = view.read;\n    request.write = view.write;\n    return request;\n  }\n\n  protected createBaseAccessPolicyView(\n    response:\n      | UserProjectAccessPolicyResponse\n      | UserServiceAccountAccessPolicyResponse\n      | GroupProjectAccessPolicyResponse\n      | GroupServiceAccountAccessPolicyResponse\n      | ServiceAccountProjectAccessPolicyResponse,\n  ) {\n    return {\n      id: response.id,\n      read: response.read,\n      write: response.write,\n      creationDate: response.creationDate,\n      revisionDate: response.revisionDate,\n    };\n  }\n\n  private async createPotentialGranteeViews(\n    organizationId: string,\n    results: PotentialGranteeResponse[],\n  ): Promise<PotentialGranteeView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      results.map(async (r) => {\n        const view = new PotentialGranteeView();\n        view.id = r.id;\n        view.type = r.type;\n        view.email = r.email;\n        view.currentUser = r.currentUser;\n        view.currentUserInGroup = r.currentUserInGroup;\n\n        if (r.type === \"serviceAccount\" || r.type === \"project\") {\n          view.name = r.name\n            ? await this.encryptService.decryptToUtf8(new EncString(r.name), orgKey)\n            : null;\n        } else {\n          view.name = r.name;\n        }\n        return view;\n      }),\n    );\n  }\n\n  private getGrantedPoliciesCreateRequest(\n    policies: ServiceAccountProjectAccessPolicyView[],\n  ): GrantedPolicyRequest[] {\n    return policies.map((ap) => {\n      const request = new GrantedPolicyRequest();\n      request.grantedId = ap.grantedProjectId;\n      request.read = ap.read;\n      request.write = ap.write;\n      return request;\n    });\n  }\n\n  private async createServiceAccountProjectAccessPolicyViews(\n    responses: ServiceAccountProjectAccessPolicyResponse[],\n    organizationId: string,\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      responses.map(async (response: ServiceAccountProjectAccessPolicyResponse) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.id = response.id;\n        view.read = response.read;\n        view.write = response.write;\n        view.creationDate = response.creationDate;\n        view.revisionDate = response.revisionDate;\n        view.serviceAccountId = response.serviceAccountId;\n        view.grantedProjectId = response.grantedProjectId;\n        view.serviceAccountName = response.serviceAccountName\n          ? await this.encryptService.decryptToUtf8(\n              new EncString(response.serviceAccountName),\n              orgKey,\n            )\n          : null;\n        view.grantedProjectName = response.grantedProjectName\n          ? await this.encryptService.decryptToUtf8(\n              new EncString(response.grantedProjectName),\n              orgKey,\n            )\n          : null;\n        return view;\n      }),\n    );\n  }\n}\n","<div class=\"tw-flex\">\n  <ng-container *ngIf=\"!addButtonMode; else buttonMode\">\n    <bit-form-field class=\"tw-grow\">\n      <bit-label>{{ label }}</bit-label>\n      <bit-multi-select\n        class=\"tw-w-full\"\n        [loading]=\"loading\"\n        [baseItems]=\"selectionList.deselectedItems\"\n        [disabled]=\"disabled\"\n        [removeSelectedItems]=\"true\"\n        (blur)=\"handleBlur()\"\n        (onItemsConfirmed)=\"selectItems($event)\"\n      ></bit-multi-select>\n      <bit-hint>{{ hint }}</bit-hint>\n    </bit-form-field>\n  </ng-container>\n</div>\n\n<bit-table [formGroup]=\"formGroup\" *ngIf=\"!loading; else spinner\">\n  <ng-container header>\n    <tr>\n      <th bitCell colspan=\"2\">{{ columnTitle }}</th>\n      <th bitCell>{{ \"permissions\" | i18n }}</th>\n    </tr>\n  </ng-container>\n  <ng-template body formArrayName=\"items\">\n    <ng-container *ngIf=\"selectionList.selectedItems.length > 0; else empty\">\n      <tr\n        bitRow\n        *ngFor=\"let item of selectionList.selectedItems; let i = index\"\n        [formGroupName]=\"i\"\n      >\n        <td bitCell class=\"tw-w-0 tw-pr-0\">\n          <i class=\"bwi {{ item.icon }} tw-text-muted\" aria-hidden=\"true\"></i>\n        </td>\n        <td bitCell class=\"tw-max-w-sm tw-truncate\">{{ item.labelName }}</td>\n        <td bitCell class=\"tw-mb-auto tw-inline-block tw-w-auto\">\n          <select\n            *ngIf=\"!staticPermission; else static\"\n            bitInput\n            formControlName=\"permission\"\n            (blur)=\"handleBlur()\"\n          >\n            <option *ngFor=\"let p of permissionList\" [value]=\"p.perm\">\n              {{ p.labelId | i18n }}\n            </option>\n          </select>\n          <ng-template #static>\n            <span>{{ staticPermission | i18n }}</span>\n          </ng-template>\n        </td>\n        <td bitCell class=\"tw-w-0\">\n          <button\n            type=\"button\"\n            bitIconButton=\"bwi-close\"\n            buttonType=\"main\"\n            size=\"default\"\n            [attr.title]=\"'remove' | i18n\"\n            [attr.aria-label]=\"'remove' | i18n\"\n            (click)=\"selectionList.deselectItem(item.id); handleBlur()\"\n          ></button>\n        </td>\n      </tr>\n    </ng-container>\n  </ng-template>\n</bit-table>\n\n<ng-template #empty>\n  <div class=\"tw-mt-4 tw-text-center\">\n    {{ emptyMessage }}\n  </div>\n</ng-template>\n\n<ng-template #buttonMode>\n  <bit-form-field class=\"tw-grow\" [formGroup]=\"multiSelectFormGroup\">\n    <bit-label>{{ label }}</bit-label>\n    <bit-multi-select\n      class=\"tw-w-full\"\n      formControlName=\"multiSelect\"\n      [baseItems]=\"selectionList.deselectedItems\"\n      (blur)=\"handleBlur()\"\n    ></bit-multi-select>\n    <bit-hint>{{ hint }}</bit-hint>\n  </bit-form-field>\n\n  <div class=\"tw-ml-3 tw-mt-7 tw-shrink-0\">\n    <button type=\"button\" bitButton buttonType=\"secondary\" (click)=\"addButton()\">\n      {{ \"add\" | i18n }}\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-10 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, forwardRef, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALUE_ACCESSOR,\n} from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { ControlsOf } from \"@bitwarden/angular/types/controls-of\";\nimport { FormSelectionList } from \"@bitwarden/angular/utils/form-selection-list\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { SelectItemView } from \"@bitwarden/components\";\n\nimport { ApItemValueType } from \"./models/ap-item-value.type\";\nimport { ApItemViewType } from \"./models/ap-item-view.type\";\nimport { ApItemEnumUtil, ApItemEnum } from \"./models/enums/ap-item.enum\";\nimport { ApPermissionEnum } from \"./models/enums/ap-permission.enum\";\n\n@Component({\n  selector: \"sm-access-policy-selector\",\n  templateUrl: \"access-policy-selector.component.html\",\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AccessPolicySelectorComponent),\n      multi: true,\n    },\n  ],\n})\nexport class AccessPolicySelectorComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private notifyOnChange: (v: unknown) => void;\n  private notifyOnTouch: () => void;\n  private pauseChangeNotification: boolean;\n\n  /**\n   * The internal selection list that tracks the value of this form control / component.\n   * It's responsible for keeping items sorted and synced with the rendered form controls\n   * @protected\n   */\n  protected selectionList = new FormSelectionList<ApItemViewType, ApItemValueType>((item) => {\n    const initPermission = this.staticPermission ?? this.initialPermission;\n\n    const permissionControl = this.formBuilder.control(initPermission);\n    let currentUserInGroup = false;\n    let currentUser = false;\n    if (item.type == ApItemEnum.Group) {\n      currentUserInGroup = item.currentUserInGroup;\n    }\n    if (item.type == ApItemEnum.User) {\n      currentUser = item.currentUser;\n    }\n    const fg = this.formBuilder.group<ControlsOf<ApItemValueType>>({\n      id: new FormControl(item.id),\n      type: new FormControl(item.type),\n      permission: permissionControl,\n      currentUserInGroup: new FormControl(currentUserInGroup),\n      currentUser: new FormControl(currentUser),\n    });\n    return fg;\n  }, this._itemComparator.bind(this));\n\n  /**\n   * Internal form group for this component.\n   * @protected\n   */\n  protected formGroup = this.formBuilder.group({\n    items: this.selectionList.formArray,\n  });\n\n  protected multiSelectFormGroup = new FormGroup({\n    multiSelect: new FormControl([]),\n  });\n\n  disabled: boolean;\n\n  @Input() loading: boolean;\n  @Input() addButtonMode: boolean;\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() columnTitle: string;\n  @Input() emptyMessage: string;\n\n  @Input() permissionList = [\n    { perm: ApPermissionEnum.CanRead, labelId: \"canRead\" },\n    { perm: ApPermissionEnum.CanReadWrite, labelId: \"canReadWrite\" },\n  ];\n  @Input() initialPermission = ApPermissionEnum.CanRead;\n\n  // Pass in a static permission that wil be the only option for a given selector instance.\n  // Will ignore permissionList and initialPermission.\n  @Input() staticPermission: ApPermissionEnum;\n\n  @Input()\n  get items(): ApItemViewType[] {\n    return this.selectionList.allItems;\n  }\n\n  set items(val: ApItemViewType[]) {\n    if (val != null) {\n      const selected = this.selectionList.formArray.getRawValue() ?? [];\n      this.selectionList.populateItems(\n        val.map((m) => {\n          m.icon = m.icon ?? ApItemEnumUtil.itemIcon(m.type);\n          return m;\n        }),\n        selected,\n      );\n    }\n  }\n\n  constructor(\n    private readonly formBuilder: FormBuilder,\n    private readonly i18nService: I18nService,\n  ) {}\n\n  /** Required for NG_VALUE_ACCESSOR */\n  registerOnChange(fn: any): void {\n    this.notifyOnChange = fn;\n  }\n\n  /** Required for NG_VALUE_ACCESSOR */\n  registerOnTouched(fn: any): void {\n    this.notifyOnTouch = fn;\n  }\n\n  /** Required for NG_VALUE_ACCESSOR */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    // Keep the internal FormGroup in sync\n    if (this.disabled) {\n      this.formGroup.disable();\n      this.multiSelectFormGroup.disable();\n    } else {\n      this.formGroup.enable();\n      this.multiSelectFormGroup.enable();\n    }\n  }\n\n  /** Required for NG_VALUE_ACCESSOR */\n  writeValue(selectedItems: ApItemValueType[]): void {\n    // Modifying the selection list, mistakenly fires valueChanges in the\n    // internal form array, so we need to know to pause external notification\n    this.pauseChangeNotification = true;\n\n    // Always clear the internal selection list on a new value\n    this.selectionList.deselectAll();\n\n    // If the new value is null, then we're done\n    if (selectedItems == null) {\n      this.pauseChangeNotification = false;\n      return;\n    }\n\n    // Unable to handle other value types, throw\n    if (!Array.isArray(selectedItems)) {\n      throw new Error(\"The access selector component only supports Array form values!\");\n    }\n\n    // Iterate and internally select each item\n    for (const value of selectedItems) {\n      this.selectionList.selectItem(value.id, value);\n    }\n\n    this.pauseChangeNotification = false;\n  }\n\n  ngOnInit() {\n    // Watch the internal formArray for changes and propagate them\n    this.selectionList.formArray.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((v) => {\n      if (!this.notifyOnChange || this.pauseChangeNotification) {\n        return;\n      }\n\n      // Disabled form arrays emit values for disabled controls, we override this to emit an empty array to avoid\n      // emitting values for disabled controls that are \"readonly\" in the table\n      if (this.selectionList.formArray.disabled) {\n        this.notifyOnChange([]);\n        return;\n      }\n      this.notifyOnChange(v);\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected handleBlur() {\n    if (!this.notifyOnTouch) {\n      return;\n    }\n\n    this.notifyOnTouch();\n  }\n\n  protected selectItems(items: SelectItemView[]) {\n    this.pauseChangeNotification = true;\n    this.selectionList.selectItems(items.map((i) => i.id));\n    this.pauseChangeNotification = false;\n    if (this.notifyOnChange != undefined) {\n      this.notifyOnChange(this.selectionList.formArray.value);\n    }\n  }\n\n  protected addButton() {\n    this.selectItems(this.multiSelectFormGroup.value.multiSelect);\n    this.multiSelectFormGroup.reset();\n  }\n\n  private _itemComparator(a: ApItemViewType, b: ApItemViewType) {\n    return (\n      a.type - b.type ||\n      this.i18nService.collator.compare(a.listName, b.listName) ||\n      this.i18nService.collator.compare(a.labelName, b.labelName)\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <div class=\"tw-w-2/5\">\n    <p class=\"tw-mt-8\" *ngIf=\"!loading\">\n      {{ \"projectPeopleDescription\" | i18n }}\n    </p>\n    <sm-access-policy-selector\n      [loading]=\"loading\"\n      formControlName=\"accessPolicies\"\n      [addButtonMode]=\"true\"\n      [items]=\"potentialGrantees\"\n      [label]=\"'people' | i18n\"\n      [hint]=\"'projectPeopleSelectHint' | i18n\"\n      [columnTitle]=\"'name' | i18n\"\n      [emptyMessage]=\"'projectEmptyPeopleAccessPolicies' | i18n\"\n    >\n    </sm-access-policy-selector>\n    <button bitButton buttonType=\"primary\" bitFormButton type=\"submit\" class=\"tw-mt-7\">\n      {{ \"save\" | i18n }}\n    </button>\n  </div>\n</form>\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { combineLatest, Subject, switchMap, takeUntil, catchError, EMPTY } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { AccessPolicySelectorService } from \"../../shared/access-policies/access-policy-selector/access-policy-selector.service\";\nimport {\n  ApItemValueType,\n  convertToProjectPeopleAccessPoliciesView,\n} from \"../../shared/access-policies/access-policy-selector/models/ap-item-value.type\";\nimport {\n  ApItemViewType,\n  convertPotentialGranteesToApItemViewType,\n  convertToAccessPolicyItemViews,\n} from \"../../shared/access-policies/access-policy-selector/models/ap-item-view.type\";\nimport { ApItemEnum } from \"../../shared/access-policies/access-policy-selector/models/enums/ap-item.enum\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\n\n@Component({\n  selector: \"sm-project-people\",\n  templateUrl: \"./project-people.component.html\",\n})\nexport class ProjectPeopleComponent implements OnInit, OnDestroy {\n  private currentAccessPolicies: ApItemViewType[];\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private projectId: string;\n\n  private currentAccessPolicies$ = combineLatest([this.route.params]).pipe(\n    switchMap(([params]) =>\n      this.accessPolicyService.getProjectPeopleAccessPolicies(params.projectId).then((policies) => {\n        return convertToAccessPolicyItemViews(policies);\n      }),\n    ),\n    catchError(() => {\n      this.router.navigate([\"/sm\", this.organizationId, \"projects\"]);\n      return EMPTY;\n    }),\n  );\n\n  private potentialGrantees$ = combineLatest([this.route.params]).pipe(\n    switchMap(([params]) =>\n      this.accessPolicyService\n        .getPeoplePotentialGrantees(params.organizationId)\n        .then((grantees) => {\n          return convertPotentialGranteesToApItemViewType(grantees);\n        }),\n    ),\n  );\n\n  protected formGroup = new FormGroup({\n    accessPolicies: new FormControl([] as ApItemValueType[]),\n  });\n\n  protected loading = true;\n  protected potentialGrantees: ApItemViewType[];\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private changeDetectorRef: ChangeDetectorRef,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService,\n    private router: Router,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private accessPolicySelectorService: AccessPolicySelectorService,\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n\n    combineLatest([this.potentialGrantees$, this.currentAccessPolicies$])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([potentialGrantees, currentAccessPolicies]) => {\n        this.potentialGrantees = potentialGrantees;\n        this.setSelected(currentAccessPolicies);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const showAccessRemovalWarning =\n      await this.accessPolicySelectorService.showAccessRemovalWarning(\n        this.organizationId,\n        this.formGroup.value.accessPolicies,\n      );\n\n    if (showAccessRemovalWarning) {\n      const confirmed = await this.showWarning();\n      if (!confirmed) {\n        this.setSelected(this.currentAccessPolicies);\n        return;\n      }\n    }\n\n    try {\n      const projectPeopleView = convertToProjectPeopleAccessPoliciesView(\n        this.projectId,\n        this.formGroup.value.accessPolicies,\n      );\n      const peoplePoliciesViews = await this.accessPolicyService.putProjectPeopleAccessPolicies(\n        this.projectId,\n        projectPeopleView,\n      );\n      this.currentAccessPolicies = convertToAccessPolicyItemViews(peoplePoliciesViews);\n\n      if (showAccessRemovalWarning) {\n        this.router.navigate([\"sm\", this.organizationId, \"projects\"]);\n      }\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"projectAccessUpdated\"),\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n      this.setSelected(this.currentAccessPolicies);\n    }\n  };\n\n  private setSelected(policiesToSelect: ApItemViewType[]) {\n    this.loading = true;\n    this.currentAccessPolicies = policiesToSelect;\n    if (policiesToSelect != undefined) {\n      // Must detect changes so that AccessSelector @Inputs() are aware of the latest\n      // potentialGrantees, otherwise no selected values will be patched below\n      this.changeDetectorRef.detectChanges();\n      this.formGroup.patchValue({\n        accessPolicies: policiesToSelect.map((m) => ({\n          type: m.type,\n          id: m.id,\n          permission: m.permission,\n          currentUser: m.type == ApItemEnum.User ? m.currentUser : null,\n          currentUserInGroup: m.type == ApItemEnum.Group ? m.currentUserInGroup : null,\n        })),\n      });\n    }\n    this.loading = false;\n  }\n\n  private async showWarning(): Promise<boolean> {\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"smAccessRemovalWarningProjectTitle\" },\n      content: { key: \"smAccessRemovalWarningProjectMessage\" },\n      acceptButtonText: { key: \"removeAccess\" },\n      cancelButtonText: { key: \"cancel\" },\n      type: \"warning\",\n    });\n    return confirmed;\n  }\n}\n","import {\n  ProjectPeopleAccessPoliciesView,\n  UserProjectAccessPolicyView,\n  GroupProjectAccessPolicyView,\n  ServiceAccountPeopleAccessPoliciesView,\n  UserServiceAccountAccessPolicyView,\n  GroupServiceAccountAccessPolicyView,\n} from \"../../../../models/view/access-policy.view\";\n\nimport { ApItemEnum } from \"./enums/ap-item.enum\";\nimport { ApPermissionEnum, ApPermissionEnumUtil } from \"./enums/ap-permission.enum\";\n\nexport type ApItemValueType = {\n  id: string;\n  type: ApItemEnum;\n  permission: ApPermissionEnum;\n  currentUserInGroup?: boolean;\n  currentUser?: boolean;\n};\n\nexport function convertToProjectPeopleAccessPoliciesView(\n  projectId: string,\n  selectedPolicyValues: ApItemValueType[],\n): ProjectPeopleAccessPoliciesView {\n  const view = new ProjectPeopleAccessPoliciesView();\n  view.userAccessPolicies = selectedPolicyValues\n    .filter((x) => x.type == ApItemEnum.User)\n    .map((filtered) => {\n      const policyView = new UserProjectAccessPolicyView();\n      policyView.grantedProjectId = projectId;\n      policyView.organizationUserId = filtered.id;\n      policyView.read = ApPermissionEnumUtil.toRead(filtered.permission);\n      policyView.write = ApPermissionEnumUtil.toWrite(filtered.permission);\n      return policyView;\n    });\n\n  view.groupAccessPolicies = selectedPolicyValues\n    .filter((x) => x.type == ApItemEnum.Group)\n    .map((filtered) => {\n      const policyView = new GroupProjectAccessPolicyView();\n      policyView.grantedProjectId = projectId;\n      policyView.groupId = filtered.id;\n      policyView.read = ApPermissionEnumUtil.toRead(filtered.permission);\n      policyView.write = ApPermissionEnumUtil.toWrite(filtered.permission);\n      return policyView;\n    });\n  return view;\n}\n\nexport function convertToServiceAccountPeopleAccessPoliciesView(\n  serviceAccountId: string,\n  selectedPolicyValues: ApItemValueType[],\n): ServiceAccountPeopleAccessPoliciesView {\n  const view = new ServiceAccountPeopleAccessPoliciesView();\n  view.userAccessPolicies = selectedPolicyValues\n    .filter((x) => x.type == ApItemEnum.User)\n    .map((filtered) => {\n      const policyView = new UserServiceAccountAccessPolicyView();\n      policyView.grantedServiceAccountId = serviceAccountId;\n      policyView.organizationUserId = filtered.id;\n      policyView.read = ApPermissionEnumUtil.toRead(filtered.permission);\n      policyView.write = ApPermissionEnumUtil.toWrite(filtered.permission);\n      policyView.currentUser = filtered.currentUser;\n      return policyView;\n    });\n\n  view.groupAccessPolicies = selectedPolicyValues\n    .filter((x) => x.type == ApItemEnum.Group)\n    .map((filtered) => {\n      const policyView = new GroupServiceAccountAccessPolicyView();\n      policyView.grantedServiceAccountId = serviceAccountId;\n      policyView.groupId = filtered.id;\n      policyView.read = ApPermissionEnumUtil.toRead(filtered.permission);\n      policyView.write = ApPermissionEnumUtil.toWrite(filtered.permission);\n      return policyView;\n    });\n  return view;\n}\n","<ng-container *ngIf=\"{ project: project$ | async, secrets: secrets$ | async } as projectSecrets\">\n  <ng-container *ngIf=\"projectSecrets?.secrets && projectSecrets?.project; else spinner\">\n    <div\n      *ngIf=\"projectSecrets.secrets?.length > 0 && projectSecrets.project?.write\"\n      class=\"float-right tw-mt-3 tw-items-center\"\n    >\n      <button type=\"button\" bitButton buttonType=\"secondary\" (click)=\"openNewSecretDialog()\">\n        <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n        {{ \"newSecret\" | i18n }}\n      </button>\n    </div>\n    <sm-secrets-list\n      *ngIf=\"projectSecrets.secrets?.length > 0 || projectSecrets.project?.write; else contactAdmin\"\n      (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n      (newSecretEvent)=\"openNewSecretDialog()\"\n      (editSecretEvent)=\"openEditSecret($event)\"\n      (copySecretNameEvent)=\"copySecretName($event)\"\n      (copySecretValueEvent)=\"copySecretValue($event)\"\n      (copySecretUuidEvent)=\"copySecretUuid($event)\"\n      [secrets]=\"projectSecrets.secrets\"\n    ></sm-secrets-list>\n  </ng-container>\n</ng-container>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n\n<ng-template #contactAdmin>\n  <bit-no-items>\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"smProjectSecretsNoItemsNoAccess\" | i18n }}</ng-container>\n  </bit-no-items>\n</ng-template>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, combineLatestWith, filter, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../../secrets/secret.service\";\nimport { SecretsListComponent } from \"../../shared/secrets-list.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-project-secrets\",\n  templateUrl: \"./project-secrets.component.html\",\n})\nexport class ProjectSecretsComponent {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n  private projectId: string;\n  protected project$: Observable<ProjectView>;\n  private organizationEnabled: boolean;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private secretService: SecretService,\n    private dialogService: DialogService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n  ) {}\n\n  ngOnInit() {\n    // Refresh list if project is edited\n    const currentProjectEdited = this.projectService.project$.pipe(\n      filter((p) => p?.id === this.projectId),\n      startWith(null),\n    );\n\n    this.project$ = combineLatest([this.route.params, currentProjectEdited]).pipe(\n      switchMap(([params, _]) => {\n        return this.projectService.getByProjectId(params.projectId);\n      }),\n    );\n\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params, currentProjectEdited),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.projectId = params.projectId;\n        this.organizationEnabled = this.organizationService.get(params.organizationId)?.enabled;\n        return await this.getSecretsByProject();\n      }),\n    );\n  }\n\n  private async getSecretsByProject(): Promise<SecretListView[]> {\n    return await this.secretService.getSecretsByProject(this.organizationId, this.projectId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        projectId: this.projectId,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService,\n    );\n  }\n\n  copySecretUuid(id: string) {\n    SecretsListComponent.copySecretUuid(id, this.platformUtilsService, this.i18nService);\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-mt-5\">\n  <bit-form-field>\n    <bit-label>{{ label }}</bit-label>\n    <bit-multi-select\n      class=\"tw-mr-4 tw-w-full\"\n      formControlName=\"multiSelect\"\n      [baseItems]=\"selectItems$ | async\"\n      [loading]=\"loading\"\n    ></bit-multi-select>\n    <bit-hint>{{ hint }}</bit-hint>\n    <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n      {{ \"add\" | i18n }}\n    </button>\n  </bit-form-field>\n</form>\n\n<ng-container>\n  <bit-table *ngIf=\"rows$ | async as rows; else spinner\">\n    <ng-container header>\n      <tr>\n        <th bitCell colspan=\"2\">{{ columnTitle }}</th>\n        <th bitCell>{{ \"permissions\" | i18n }}</th>\n      </tr>\n    </ng-container>\n\n    <ng-template body>\n      <ng-container *ngIf=\"rows.length > 0; else empty\">\n        <tr bitRow *ngFor=\"let row of rows\">\n          <td bitCell class=\"tw-w-0 tw-pr-0\">\n            <i class=\"bwi {{ row.icon }} tw-text-muted\" aria-hidden=\"true\"></i>\n          </td>\n          <td bitCell class=\"tw-max-w-sm tw-truncate\">{{ row.name }}</td>\n          <td bitCell>\n            <bit-form-field\n              *ngIf=\"!row.static; else staticPermissions\"\n              class=\"tw-mb-auto tw-inline-block tw-w-auto\"\n            >\n              <select bitInput (change)=\"update($event.target, row)\" [disabled]=\"row.static\">\n                <option value=\"canRead\" [selected]=\"row.read && row.write != true\">\n                  {{ \"canRead\" | i18n }}\n                </option>\n                <option value=\"canReadWrite\" [selected]=\"row.read && row.write\">\n                  {{ \"canReadWrite\" | i18n }}\n                </option>\n              </select>\n            </bit-form-field>\n            <ng-template #staticPermissions>\n              <span *ngIf=\"row.read && row.write != true\">{{ \"canRead\" | i18n }}</span>\n              <span *ngIf=\"row.read != true && row.write\">{{ \"canWrite\" | i18n }}</span>\n              <span *ngIf=\"row.read && row.write\">{{ \"canReadWrite\" | i18n }}</span>\n            </ng-template>\n          </td>\n          <td bitCell class=\"tw-w-0\">\n            <button\n              type=\"button\"\n              bitIconButton=\"bwi-close\"\n              buttonType=\"main\"\n              size=\"default\"\n              [attr.title]=\"'remove' | i18n\"\n              [attr.aria-label]=\"'remove' | i18n\"\n              [bitAction]=\"delete(row)\"\n            ></button>\n          </td>\n        </tr>\n      </ng-container>\n    </ng-template>\n  </bit-table>\n</ng-container>\n\n<ng-template #empty>\n  <div class=\"tw-mt-4 tw-text-center\">\n    {{ emptyMessage }}\n  </div>\n</ng-template>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-10 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatest,\n  firstValueFrom,\n  map,\n  Observable,\n  share,\n  Subject,\n  switchMap,\n  tap,\n} from \"rxjs\";\n\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport { BaseAccessPolicyView } from \"../../models/view/access-policy.view\";\n\nimport { AccessPolicyService } from \"./access-policy.service\";\n\nexport type AccessSelectorRowView = {\n  type: \"user\" | \"group\" | \"serviceAccount\" | \"project\";\n  name: string;\n  id: string;\n  accessPolicyId: string;\n  read: boolean;\n  write: boolean;\n  icon: string;\n  userId?: string;\n  currentUserInGroup?: boolean;\n  static?: boolean;\n};\n\n@Component({\n  selector: \"sm-access-selector\",\n  templateUrl: \"./access-selector.component.html\",\n})\nexport class AccessSelectorComponent implements OnInit {\n  static readonly userIcon = \"bwi-user\";\n  static readonly groupIcon = \"bwi-family\";\n  static readonly serviceAccountIcon = \"bwi-wrench\";\n  static readonly projectIcon = \"bwi-collection\";\n\n  /**\n   * Emits the selected items on submit.\n   */\n  @Output() onCreateAccessPolicies = new EventEmitter<SelectItemView[]>();\n  @Output() onDeleteAccessPolicy = new EventEmitter<AccessSelectorRowView>();\n  @Output() onUpdateAccessPolicy = new EventEmitter<AccessSelectorRowView>();\n\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() columnTitle: string;\n  @Input() emptyMessage: string;\n  @Input() granteeType: \"people\" | \"serviceAccounts\" | \"projects\";\n\n  protected rows$ = new Subject<AccessSelectorRowView[]>();\n  @Input() private set rows(value: AccessSelectorRowView[]) {\n    const sorted = value.sort((a, b) => {\n      if (a.icon == b.icon) {\n        return a.name.localeCompare(b.name);\n      }\n      if (a.icon == AccessSelectorComponent.userIcon) {\n        return -1;\n      }\n      return 1;\n    });\n    this.rows$.next(sorted);\n  }\n\n  private maxLength = 15;\n  protected formGroup = new FormGroup({\n    multiSelect: new FormControl([], [Validators.required, Validators.maxLength(this.maxLength)]),\n  });\n  protected loading = true;\n\n  protected selectItems$: Observable<SelectItemView[]> = combineLatest([\n    this.rows$,\n    this.route.params,\n  ]).pipe(\n    switchMap(([rows, params]) =>\n      this.getPotentialGrantees(params.organizationId).then((grantees) =>\n        grantees\n          .filter((g) => !rows.some((row) => row.id === g.id))\n          .map((granteeView) => {\n            let icon: string;\n            let listName = granteeView.name;\n            let labelName = granteeView.name;\n            if (granteeView.type === \"user\") {\n              icon = AccessSelectorComponent.userIcon;\n              if (Utils.isNullOrWhitespace(granteeView.name)) {\n                listName = granteeView.email;\n                labelName = granteeView.email;\n              } else {\n                listName = `${granteeView.name} (${granteeView.email})`;\n              }\n            } else if (granteeView.type === \"group\") {\n              icon = AccessSelectorComponent.groupIcon;\n            } else if (granteeView.type === \"serviceAccount\") {\n              icon = AccessSelectorComponent.serviceAccountIcon;\n            } else if (granteeView.type === \"project\") {\n              icon = AccessSelectorComponent.projectIcon;\n            }\n            return {\n              icon: icon,\n              id: granteeView.id,\n              labelName: labelName,\n              listName: listName,\n            };\n          }),\n      ),\n    ),\n    map((selectItems) => selectItems.sort((a, b) => a.listName.localeCompare(b.listName))),\n    tap(() => {\n      this.loading = false;\n      this.formGroup.reset();\n      this.formGroup.enable();\n    }),\n    share(),\n  );\n\n  constructor(\n    private accessPolicyService: AccessPolicyService,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit(): void {\n    this.formGroup.disable();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n    this.formGroup.disable();\n    this.loading = true;\n\n    this.onCreateAccessPolicies.emit(this.formGroup.value.multiSelect);\n\n    return firstValueFrom(this.selectItems$);\n  };\n\n  async update(target: any, row: AccessSelectorRowView): Promise<void> {\n    if (target.value === \"canRead\") {\n      row.read = true;\n      row.write = false;\n    } else if (target.value === \"canReadWrite\") {\n      row.read = true;\n      row.write = true;\n    }\n    this.onUpdateAccessPolicy.emit(row);\n  }\n\n  delete = (row: AccessSelectorRowView) => async () => {\n    this.loading = true;\n    this.formGroup.disable();\n    this.onDeleteAccessPolicy.emit(row);\n    return firstValueFrom(this.selectItems$);\n  };\n\n  private getPotentialGrantees(organizationId: string) {\n    switch (this.granteeType) {\n      case \"people\":\n        return this.accessPolicyService.getPeoplePotentialGrantees(organizationId);\n      case \"serviceAccounts\":\n        return this.accessPolicyService.getServiceAccountsPotentialGrantees(organizationId);\n      case \"projects\":\n        return this.accessPolicyService.getProjectsPotentialGrantees(organizationId);\n    }\n  }\n\n  static getAccessItemType(item: SelectItemView) {\n    switch (item.icon) {\n      case AccessSelectorComponent.userIcon:\n        return \"user\";\n      case AccessSelectorComponent.groupIcon:\n        return \"group\";\n      case AccessSelectorComponent.serviceAccountIcon:\n        return \"serviceAccount\";\n      case AccessSelectorComponent.projectIcon:\n        return \"project\";\n    }\n  }\n\n  static getBaseAccessPolicyView(row: AccessSelectorRowView) {\n    const view = new BaseAccessPolicyView();\n    view.id = row.accessPolicyId;\n    view.read = row.read;\n    view.write = row.write;\n    return view;\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map, Observable, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components\";\n\nimport {\n  ProjectAccessPoliciesView,\n  ServiceAccountProjectAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\n\n@Component({\n  selector: \"sm-project-service-accounts\",\n  templateUrl: \"./project-service-accounts.component.html\",\n})\nexport class ProjectServiceAccountsComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private projectId: string;\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.projectAccessPolicyChanges$.pipe(\n      startWith(null),\n      switchMap(() =>\n        this.accessPolicyService.getProjectAccessPolicies(this.organizationId, this.projectId),\n      ),\n      map((policies) =>\n        policies.serviceAccountAccessPolicies.map((policy) => ({\n          type: \"serviceAccount\",\n          name: policy.serviceAccountName,\n          id: policy.serviceAccountId,\n          accessPolicyId: policy.id,\n          read: policy.read,\n          write: policy.write,\n          icon: AccessSelectorComponent.serviceAccountIcon,\n          static: false,\n        })),\n      ),\n    );\n\n  protected async handleUpdateAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      return await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(policy),\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const projectAccessPoliciesView = new ProjectAccessPoliciesView();\n    projectAccessPoliciesView.serviceAccountAccessPolicies = selected\n      .filter(\n        (selection) => AccessSelectorComponent.getAccessItemType(selection) === \"serviceAccount\",\n      )\n      .map((filtered) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.serviceAccountId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createProjectAccessPolicies(\n      this.organizationId,\n      this.projectId,\n      projectAccessPoliciesView,\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService,\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div class=\"tw-w-2/5\">\n  <p class=\"tw-mt-8\">\n    {{ \"projectServiceAccountsDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"serviceAccounts\"\n    [label]=\"'serviceAccounts' | i18n\"\n    [hint]=\"'projectServiceAccountsSelectHint' | i18n\"\n    [columnTitle]=\"'serviceAccounts' | i18n\"\n    [emptyMessage]=\"'projectEmptyServiceAccountAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n    (onUpdateAccessPolicy)=\"handleUpdateAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<app-header *ngIf=\"project$ | async as project\" [title]=\"project.name\" icon=\"bwi-collection\">\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{ \"projects\" | i18n }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['secrets']\">{{ \"secrets\" | i18n }}</bit-tab-link>\n    <ng-container *ngIf=\"project.write\">\n      <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n      <bit-tab-link [route]=\"['service-accounts']\">{{ \"serviceAccounts\" | i18n }}</bit-tab-link>\n    </ng-container>\n  </bit-tab-nav-bar>\n  <sm-new-menu></sm-new-menu>\n  <button\n    type=\"button\"\n    slot=\"secondary\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"openEditDialog()\"\n    *ngIf=\"project.write\"\n  >\n    {{ \"editProject\" | i18n }}\n  </button>\n</app-header>\n<router-outlet></router-outlet>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n  catchError,\n  combineLatest,\n  EMPTY,\n  filter,\n  Observable,\n  startWith,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport {\n  OperationType,\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../dialog/project-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-project\",\n  templateUrl: \"./project.component.html\",\n})\nexport class ProjectComponent implements OnInit, OnDestroy {\n  protected project$: Observable<ProjectView>;\n\n  private organizationId: string;\n  private projectId: string;\n  private organizationEnabled: boolean;\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private router: Router,\n    private dialogService: DialogService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n  ) {}\n\n  ngOnInit(): void {\n    // Update project if it is edited\n    const currentProjectEdited = this.projectService.project$.pipe(\n      filter((p) => p?.id === this.projectId),\n      startWith(null),\n    );\n\n    this.project$ = combineLatest([this.route.params, currentProjectEdited]).pipe(\n      switchMap(([params, _]) => this.projectService.getByProjectId(params.projectId)),\n      catchError(() => {\n        this.router.navigate([\"/sm\", this.organizationId, \"projects\"]).then(() => {\n          this.platformUtilsService.showToast(\n            \"error\",\n            null,\n            this.i18nService.t(\"notFound\", this.i18nService.t(\"project\")),\n          );\n        });\n        return EMPTY;\n      }),\n    );\n\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n      this.organizationEnabled = this.organizationService.get(params.organizationId)?.enabled;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async openEditDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        organizationEnabled: this.organizationEnabled,\n        projectId: this.projectId,\n      },\n    });\n  }\n}\n","<bit-dialog>\n  <ng-container bitDialogTitle>\n    {{ data.title | i18n }}\n  </ng-container>\n\n  <div bitDialogContent>\n    {{ data.message | i18n }}\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ data.columnTitle | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let detail of data.details\">\n          <td bitCell>{{ detail.name }}</td>\n          <td bitCell>{{ detail.description | i18n }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button\n      type=\"button\"\n      bitButton\n      buttonType=\"primary\"\n      bitFormButton\n      (click)=\"dialogRef.close(bulkConfirmationResult.Continue)\"\n    >\n      {{ \"continue\" | i18n }}\n    </button>\n    <button bitButton buttonType=\"secondary\" bitDialogClose type=\"button\">\n      {{ \"cancel\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nexport interface BulkConfirmationDetails {\n  title: string;\n  columnTitle: string;\n  message: string;\n  details: BulkConfirmationStatus[];\n}\n\nexport interface BulkConfirmationStatus {\n  id: string;\n  name: string;\n  description: string;\n}\n\nexport enum BulkConfirmationResult {\n  Continue,\n  Cancel,\n}\n\n@Component({\n  selector: \"sm-bulk-confirmation-dialog\",\n  templateUrl: \"./bulk-confirmation-dialog.component.html\",\n})\nexport class BulkConfirmationDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: BulkConfirmationDetails,\n  ) {}\n\n  protected bulkConfirmationResult = BulkConfirmationResult;\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.title ||\n      !this.data.columnTitle ||\n      !this.data.message ||\n      !(this.data.details?.length >= 1)\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The bulk confirmation dialog was not called with the appropriate operation values.\",\n      );\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, lastValueFrom, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  BulkConfirmationDetails,\n  BulkConfirmationDialogComponent,\n  BulkConfirmationResult,\n  BulkConfirmationStatus,\n} from \"../../shared/dialogs/bulk-confirmation-dialog.component\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../dialog/project-delete-dialog.component\";\nimport {\n  OperationType,\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../dialog/project-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-projects\",\n  templateUrl: \"./projects.component.html\",\n})\nexport class ProjectsComponent implements OnInit {\n  protected projects$: Observable<ProjectListView[]>;\n  protected search: string;\n\n  private organizationId: string;\n  private organizationEnabled: boolean;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private accessPolicyService: AccessPolicyService,\n    private dialogService: DialogService,\n    private organizationService: OrganizationService,\n  ) {}\n\n  ngOnInit() {\n    this.projects$ = combineLatest([\n      this.route.params,\n      this.projectService.project$.pipe(startWith(null)),\n      this.accessPolicyService.projectAccessPolicyChanges$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(async ([params]) => {\n        this.organizationId = params.organizationId;\n        this.organizationEnabled = this.organizationService.get(params.organizationId)?.enabled;\n\n        return await this.getProjects();\n      }),\n    );\n  }\n\n  private async getProjects(): Promise<ProjectListView[]> {\n    return await this.projectService.getProjects(this.organizationId);\n  }\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        organizationEnabled: this.organizationEnabled,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  async openDeleteProjectDialog(projects: ProjectListView[]) {\n    if (projects.some((project) => project.write == false)) {\n      const readOnlyProjects = projects.filter((project) => project.write == false);\n      const writeProjects = projects.filter((project) => project.write);\n\n      const dialogRef = this.dialogService.open<unknown, BulkConfirmationDetails>(\n        BulkConfirmationDialogComponent,\n        {\n          data: {\n            title: \"deleteProjects\",\n            columnTitle: \"projectName\",\n            message: \"smProjectsDeleteBulkConfirmation\",\n            details: this.getBulkConfirmationDetails(readOnlyProjects),\n          },\n        },\n      );\n\n      const result = await lastValueFrom(dialogRef.closed);\n\n      if (result == BulkConfirmationResult.Continue) {\n        this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n          data: {\n            projects: writeProjects,\n          },\n        });\n      }\n    } else {\n      this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n        data: {\n          projects,\n        },\n      });\n    }\n  }\n\n  private getBulkConfirmationDetails(projects: ProjectListView[]): BulkConfirmationStatus[] {\n    return projects.map((project) => {\n      return {\n        id: project.id,\n        name: project.name,\n        description: \"smProjectDeleteAccessRestricted\",\n      };\n    });\n  }\n}\n","<app-header>\n  <bit-search\n    [placeholder]=\"'searchProjects' | i18n\"\n    [(ngModel)]=\"search\"\n    class=\"tw-w-80\"\n  ></bit-search>\n  <sm-new-menu></sm-new-menu>\n</app-header>\n<sm-projects-list\n  (newProjectEvent)=\"openNewProjectDialog()\"\n  (editProjectEvent)=\"openEditProject($event)\"\n  (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n  [projects]=\"projects$ | async\"\n  [search]=\"search\"\n>\n</sm-projects-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ProjectsComponent,\n  },\n  {\n    path: \":projectId\",\n    component: ProjectComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"secrets\",\n      },\n      {\n        path: \"secrets\",\n        component: ProjectSecretsComponent,\n      },\n      {\n        path: \"people\",\n        component: ProjectPeopleComponent,\n      },\n      {\n        path: \"service-accounts\",\n        component: ProjectServiceAccountsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProjectsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { ProjectDeleteDialogComponent } from \"./dialog/project-delete-dialog.component\";\nimport { ProjectDialogComponent } from \"./dialog/project-dialog.component\";\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\nimport { ProjectsRoutingModule } from \"./projects-routing.module\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ProjectsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    ProjectsComponent,\n    ProjectDialogComponent,\n    ProjectDeleteDialogComponent,\n    ProjectPeopleComponent,\n    ProjectServiceAccountsComponent,\n    ProjectComponent,\n    ProjectSecretsComponent,\n  ],\n  providers: [],\n})\nexport class ProjectsModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretsListComponent } from \"../shared/secrets-list.component\";\n\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"./dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"./dialog/secret-dialog.component\";\nimport { SecretService } from \"./secret.service\";\n\n@Component({\n  selector: \"sm-secrets\",\n  templateUrl: \"./secrets.component.html\",\n})\nexport class SecretsComponent implements OnInit {\n  protected secrets$: Observable<SecretListView[]>;\n  protected search: string;\n\n  private organizationId: string;\n  private organizationEnabled: boolean;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.organizationEnabled = this.organizationService.get(params.organizationId)?.enabled;\n\n        return await this.getSecrets();\n      }),\n    );\n\n    if (this.route.snapshot.queryParams.search) {\n      this.search = this.route.snapshot.queryParams.search;\n    }\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getSecrets(this.organizationId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService,\n    );\n  }\n\n  copySecretUuid(id: string) {\n    SecretsListComponent.copySecretUuid(id, this.platformUtilsService, this.i18nService);\n  }\n}\n","<app-header>\n  <bit-search\n    [placeholder]=\"'searchSecrets' | i18n\"\n    [(ngModel)]=\"search\"\n    class=\"tw-w-80\"\n  ></bit-search>\n  <sm-new-menu></sm-new-menu>\n</app-header>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (newSecretEvent)=\"openNewSecretDialog()\"\n  (editSecretEvent)=\"openEditSecret($event)\"\n  (copySecretNameEvent)=\"copySecretName($event)\"\n  (copySecretValueEvent)=\"copySecretValue($event)\"\n  (copySecretUuidEvent)=\"copySecretUuid($event)\"\n  [secrets]=\"secrets$ | async\"\n  [search]=\"search\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { SecretsComponent } from \"./secrets.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SecretsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretDeleteDialogComponent } from \"./dialog/secret-delete.component\";\nimport { SecretDialogComponent } from \"./dialog/secret-dialog.component\";\nimport { SecretsRoutingModule } from \"./secrets-routing.module\";\nimport { SecretsComponent } from \"./secrets.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SecretsRoutingModule],\n  declarations: [SecretDeleteDialogComponent, SecretDialogComponent, SecretsComponent],\n  providers: [],\n})\nexport class SecretsModule {}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class AccessTokenRequest {\n  name: EncString;\n  encryptedPayload: EncString;\n  key: EncString;\n  expireAt: Date;\n}\n","export class RevokeAccessTokensRequest {\n  ids: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenCreationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  clientSecret: string;\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenResponse extends BaseResponse {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.scopes = this.getResponseProperty(\"Scopes\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","export class AccessTokenView {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: Date;\n  creationDate: Date;\n  revisionDate: Date;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { AccessTokenRequest } from \"../models/requests/access-token.request\";\nimport { RevokeAccessTokensRequest } from \"../models/requests/revoke-access-tokens.request\";\nimport { AccessTokenCreationResponse } from \"../models/responses/access-token-creation.response\";\nimport { AccessTokenResponse } from \"../models/responses/access-tokens.response\";\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessService {\n  private readonly _accessTokenVersion = \"0\";\n  protected _accessToken: Subject<AccessTokenView> = new Subject();\n\n  accessToken$ = this._accessToken.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private encryptService: EncryptService,\n  ) {}\n\n  async getAccessTokens(\n    organizationId: string,\n    serviceAccountId: string,\n  ): Promise<AccessTokenView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      null,\n      true,\n      true,\n    );\n    const results = new ListResponse(r, AccessTokenResponse);\n\n    return await this.createAccessTokenViews(organizationId, results.data);\n  }\n\n  async createAccessToken(\n    organizationId: string,\n    serviceAccountId: string,\n    accessTokenView: AccessTokenView,\n  ): Promise<string> {\n    const keyMaterial = await this.cryptoFunctionService.aesGenerateKey(128);\n    const key = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-accesstoken\",\n      \"sm-access-token\",\n      64,\n      \"sha256\",\n    );\n    const encryptionKey = new SymmetricCryptoKey(key);\n\n    const request = await this.createAccessTokenRequest(\n      organizationId,\n      encryptionKey,\n      accessTokenView,\n    );\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      request,\n      true,\n      true,\n    );\n    const result = new AccessTokenCreationResponse(r);\n    this._accessToken.next(null);\n    const b64Key = Utils.fromBufferToB64(keyMaterial);\n    return `${this._accessTokenVersion}.${result.id}.${result.clientSecret}:${b64Key}`;\n  }\n\n  async revokeAccessTokens(serviceAccountId: string, accessTokenIds: string[]): Promise<void> {\n    const request = new RevokeAccessTokensRequest();\n    request.ids = accessTokenIds;\n\n    await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens/revoke\",\n      request,\n      true,\n      false,\n    );\n\n    this._accessToken.next(null);\n  }\n\n  private async createAccessTokenRequest(\n    organizationId: string,\n    encryptionKey: SymmetricCryptoKey,\n    accessTokenView: AccessTokenView,\n  ): Promise<AccessTokenRequest> {\n    const organizationKey = await this.getOrganizationKey(organizationId);\n    const accessTokenRequest = new AccessTokenRequest();\n    const [name, encryptedPayload, key] = await Promise.all([\n      await this.encryptService.encrypt(accessTokenView.name, organizationKey),\n      await this.encryptService.encrypt(\n        JSON.stringify({ encryptionKey: organizationKey.keyB64 }),\n        encryptionKey,\n      ),\n      await this.encryptService.encrypt(encryptionKey.keyB64, organizationKey),\n    ]);\n\n    accessTokenRequest.name = name;\n    accessTokenRequest.encryptedPayload = encryptedPayload;\n    accessTokenRequest.key = key;\n    accessTokenRequest.expireAt = accessTokenView.expireAt;\n    return accessTokenRequest;\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async createAccessTokenViews(\n    organizationId: string,\n    accessTokenResponses: AccessTokenResponse[],\n  ): Promise<AccessTokenView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      accessTokenResponses.map(async (s) => {\n        const view = new AccessTokenView();\n        view.id = s.id;\n        view.name = await this.encryptService.decryptToUtf8(new EncString(s.name), orgKey);\n        view.scopes = s.scopes;\n        view.expireAt = s.expireAt ? new Date(s.expireAt) : null;\n        view.creationDate = new Date(s.creationDate);\n        view.revisionDate = new Date(s.revisionDate);\n        return view;\n      }),\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nexport interface AccessTokenDetails {\n  subTitle: string;\n  expirationDate?: Date;\n  accessToken: string;\n}\n\n@Component({\n  templateUrl: \"./access-token-dialog.component.html\",\n})\nexport class AccessTokenDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenDetails,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n  ) {\n    this.dialogRef.disableClose = true;\n  }\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (!this.data.subTitle || !this.data.accessToken) {\n      this.dialogRef.close();\n      throw new Error(\"The access token dialog was not called with the appropriate values.\");\n    }\n  }\n\n  copyAccessToken(): void {\n    this.platformUtilsService.copyToClipboard(this.data.accessToken);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"accessTokenCreatedAndCopied\"),\n    );\n    this.dialogRef.close();\n  }\n}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ \"newAccessToken\" | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.subTitle }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    <bit-callout type=\"info\" [title]=\"'accessTokenCallOutTitle' | i18n\">\n      {{ \"downloadAccessToken\" | i18n }}<br />\n      {{ \"expiresOnAccessToken\" | i18n }}\n      {{ data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date: \"medium\") }}\n    </bit-callout>\n\n    <bit-form-field class=\"tw-mb-0\">\n      <bit-label>{{ \"accessToken\" | i18n }}</bit-label>\n      <textarea bitInput disabled rows=\"4\">{{ data.accessToken }}</textarea>\n    </bit-form-field>\n    {{ \"expiresOnAccessToken\" | i18n }}\n    {{ data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date: \"medium\") }}\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" (click)=\"copyAccessToken()\">\n      <i class=\"bwi bwi-clone\" aria-hidden=\"true\"></i>\n      {{ \"copyToken\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","<ng-container [formGroup]=\"form\">\n  <bit-form-field>\n    <bit-label>{{ \"expires\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"expires\">\n      <option ngValue=\"never\">{{ \"never\" | i18n }}</option>\n      <option *ngFor=\"let day of expirationDayOptions\" [ngValue]=\"day\">\n        {{ \"days\" | i18n: day }}\n      </option>\n      <option ngValue=\"custom\">{{ \"custom\" | i18n }}</option>\n    </select>\n  </bit-form-field>\n  <bit-form-field *ngIf=\"form.value.expires === 'custom'\">\n    <bit-label>{{ \"expirationDate\" | i18n }}</bit-label>\n    <input\n      bitInput\n      type=\"datetime-local\"\n      [min]=\"currentDate | date: 'YYYY-MM-ddThh:mm'\"\n      formControlName=\"expireDateTime\"\n    />\n  </bit-form-field>\n</ng-container>\n","import { DatePipe } from \"@angular/common\";\nimport { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\n@Component({\n  selector: \"sm-expiration-options\",\n  templateUrl: \"./expiration-options.component.html\",\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n    {\n      provide: NG_VALIDATORS,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n  ],\n})\nexport class ExpirationOptionsComponent\n  implements ControlValueAccessor, Validator, OnInit, OnDestroy\n{\n  private destroy$ = new Subject<void>();\n\n  @Input() expirationDayOptions: number[];\n\n  @Input() set touched(val: boolean) {\n    if (val) {\n      this.form.markAllAsTouched();\n    }\n  }\n\n  currentDate = new Date();\n\n  protected form = new FormGroup({\n    expires: new FormControl(\"never\", [Validators.required]),\n    expireDateTime: new FormControl(\"\", [Validators.required, this.expiresInFutureValidator()]),\n  });\n\n  constructor(\n    private datePipe: DatePipe,\n    private i18nService: I18nService,\n  ) {}\n\n  async ngOnInit() {\n    this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this._onChange(this.getExpiresDate());\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private _onChange = (_value: Date | null): void => undefined;\n  registerOnChange(fn: (value: Date | null) => void): void {\n    this._onChange = fn;\n  }\n\n  onTouched = (): void => undefined;\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  validate(control: AbstractControl<any, any>): ValidationErrors {\n    if (\n      (this.form.value.expires == \"custom\" && !this.form.invalid) ||\n      this.form.value.expires !== \"custom\"\n    ) {\n      return null;\n    }\n    return {\n      required: true,\n    };\n  }\n\n  writeValue(value: Date | null): void {\n    if (value == null) {\n      this.form.setValue({ expires: \"never\", expireDateTime: null });\n    }\n    if (value) {\n      this.form.setValue({\n        expires: \"custom\",\n        expireDateTime: this.datePipe.transform(value, \"YYYY-MM-ddThh:mm\"),\n      });\n    }\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  private getExpiresDate(): Date | null {\n    if (this.form.value.expires == \"never\") {\n      return null;\n    }\n    if (this.form.value.expires == \"custom\") {\n      return new Date(this.form.value.expireDateTime);\n    }\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() + Number(this.form.value.expires));\n    return currentDate;\n  }\n\n  expiresInFutureValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const enteredDate = new Date(control.value);\n\n      if (enteredDate > new Date()) {\n        return null;\n      } else {\n        return {\n          ValidationError: {\n            message: this.i18nService.t(\"expirationDateError\"),\n          },\n        };\n      }\n    };\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { DialogService, BitValidators } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../../models/view/service-account.view\";\nimport { AccessTokenView } from \"../../models/view/access-token.view\";\nimport { AccessService } from \"../access.service\";\n\nimport { AccessTokenDetails, AccessTokenDialogComponent } from \"./access-token-dialog.component\";\n\nexport interface AccessTokenOperation {\n  serviceAccountView: ServiceAccountView;\n}\n\n@Component({\n  templateUrl: \"./access-token-create-dialog.component.html\",\n})\nexport class AccessTokenCreateDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", {\n      validators: [Validators.required, Validators.maxLength(80), BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n    expirationDateControl: new FormControl(null),\n  });\n  protected loading = false;\n\n  expirationDayOptions = [7, 30, 60];\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenOperation,\n    private dialogService: DialogService,\n    private accessService: AccessService,\n  ) {}\n\n  async ngOnInit() {\n    if (!this.data.serviceAccountView) {\n      this.dialogRef.close();\n      throw new Error(\n        `The access token create dialog was not called with the appropriate operation values.`,\n      );\n    }\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const accessTokenView = new AccessTokenView();\n    accessTokenView.name = this.formGroup.value.name;\n    accessTokenView.expireAt = this.formGroup.value.expirationDateControl;\n    const accessToken = await this.accessService.createAccessToken(\n      this.data.serviceAccountView.organizationId,\n      this.data.serviceAccountView.id,\n      accessTokenView,\n    );\n    this.openAccessTokenDialog(\n      this.data.serviceAccountView.name,\n      accessToken,\n      accessTokenView.expireAt,\n    );\n    this.dialogRef.close();\n  };\n\n  private openAccessTokenDialog(\n    serviceAccountName: string,\n    accessToken: string,\n    expirationDate?: Date,\n  ) {\n    this.dialogService.open<unknown, AccessTokenDetails>(AccessTokenDialogComponent, {\n      data: {\n        subTitle: serviceAccountName,\n        expirationDate: expirationDate,\n        accessToken: accessToken,\n      },\n    });\n  }\n\n  static openNewAccessTokenDialog(\n    dialogService: DialogService,\n    serviceAccountView: ServiceAccountView,\n  ) {\n    return dialogService.open<unknown, AccessTokenOperation>(AccessTokenCreateDialogComponent, {\n      data: {\n        serviceAccountView,\n      },\n    });\n  }\n}\n","<div *ngIf=\"!tokens\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"tokens?.length == 0\">\n  <ng-container slot=\"title\">{{ \"accessTokensNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"accessTokensNoItemsDesc\" | i18n }}</ng-container>\n  <button\n    type=\"button\"\n    slot=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newAccessTokenEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newAccessToken\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"tokens?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"tw-m-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"expires\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body>\n    <tr bitRow *ngFor=\"let token of tokens\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(token.id) : null\"\n          [checked]=\"selection.isSelected(token.id)\"\n        />\n      </td>\n      <td bitCell>{{ token.name }}</td>\n      <td bitCell>\n        {{ token.expireAt === null ? (\"never\" | i18n) : (token.expireAt | date: \"medium\") }}\n      </td>\n      <td bitCell>{{ token.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tokenMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #tokenMenu>\n        <button type=\"button\" bitMenuItem (click)=\"revokeAccessTokensEvent.emit([token])\">\n          <span class=\"tw-text-danger\">\n            <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n            {{ \"revokeAccessToken\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"revokeSelected()\">\n    <span class=\"tw-text-danger\">\n      <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n      {{ \"revokeAccessTokens\" | i18n }}\n    </span>\n  </button>\n</bit-menu>\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>\n      <span>{{ \"newAccessToken\" | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        {{ data.serviceAccountView.name }}\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-form-field>\n        <bit-label>{{ \"name\" | i18n }}</bit-label>\n        <input bitInput appAutofocus formControlName=\"name\" />\n      </bit-form-field>\n      <sm-expiration-options\n        formControlName=\"expirationDateControl\"\n        [expirationDayOptions]=\"expirationDayOptions\"\n        [touched]=\"formGroup.controls.expirationDateControl.touched\"\n      ></sm-expiration-options>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button class=\"tw-normal-case\" type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"newAccessToken\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Component({\n  selector: \"sm-access-list\",\n  templateUrl: \"./access-list.component.html\",\n})\nexport class AccessListComponent {\n  @Input()\n  get tokens(): AccessTokenView[] {\n    return this._tokens;\n  }\n  set tokens(secrets: AccessTokenView[]) {\n    this.selection.clear();\n    this._tokens = secrets;\n  }\n  private _tokens: AccessTokenView[];\n\n  @Output() newAccessTokenEvent = new EventEmitter();\n  @Output() revokeAccessTokensEvent = new EventEmitter<AccessTokenView[]>();\n\n  protected selection = new SelectionModel<string>(true, []);\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.tokens.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.tokens.map((s) => s.id));\n  }\n\n  protected revokeSelected() {\n    const selected = this.tokens.filter((s) => this.selection.selected.includes(s.id));\n    this.revokeAccessTokensEvent.emit(selected);\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatestWith,\n  firstValueFrom,\n  Observable,\n  startWith,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { openUserVerificationPrompt } from \"@bitwarden/web-vault/app/auth/shared/components/user-verification\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport { AccessTokenView } from \"../models/view/access-token.view\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nimport { AccessService } from \"./access.service\";\nimport { AccessTokenCreateDialogComponent } from \"./dialogs/access-token-create-dialog.component\";\n\n@Component({\n  selector: \"sm-access-tokens\",\n  templateUrl: \"./access-tokens.component.html\",\n})\nexport class AccessTokenComponent implements OnInit, OnDestroy {\n  accessTokens$: Observable<AccessTokenView[]>;\n\n  private destroy$ = new Subject<void>();\n  private serviceAccountView: ServiceAccountView;\n\n  constructor(\n    private route: ActivatedRoute,\n    private accessService: AccessService,\n    private dialogService: DialogService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private serviceAccountService: ServiceAccountService,\n  ) {}\n\n  ngOnInit() {\n    this.accessTokens$ = this.accessService.accessToken$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) =>\n        this.accessService.getAccessTokens(params.organizationId, params.serviceAccountId),\n      ),\n    );\n\n    this.serviceAccountService.serviceAccount$\n      .pipe(\n        startWith(null),\n        combineLatestWith(this.route.params),\n        switchMap(([_, params]) =>\n          this.serviceAccountService.getByServiceAccountId(\n            params.serviceAccountId,\n            params.organizationId,\n          ),\n        ),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((serviceAccountView) => {\n        this.serviceAccountView = serviceAccountView;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected async revoke(tokens: AccessTokenView[]) {\n    if (!tokens?.length) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"noAccessTokenSelected\"),\n      );\n      return;\n    }\n\n    if (!(await this.verifyUser())) {\n      return;\n    }\n\n    await this.accessService.revokeAccessTokens(\n      this.serviceAccountView.id,\n      tokens.map((t) => t.id),\n    );\n\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"accessTokenRevoked\"));\n  }\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountView,\n    );\n  }\n\n  private verifyUser() {\n    const ref = openUserVerificationPrompt(this.dialogService, {\n      data: {\n        confirmDescription: \"revokeAccessTokenDesc\",\n        confirmButtonText: \"revokeAccessToken\",\n        modalTitle: \"revokeAccessToken\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return firstValueFrom(ref.closed);\n  }\n}\n","<sm-access-list\n  [tokens]=\"accessTokens$ | async\"\n  (newAccessTokenEvent)=\"openNewAccessTokenDialog()\"\n  (revokeAccessTokensEvent)=\"revoke($event)\"\n></sm-access-list>\n","import { Injectable } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { EventResponse } from \"@bitwarden/common/models/response/event.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ServiceAccountEventLogApiService {\n  constructor(private apiService: ApiService) {}\n\n  async getEvents(\n    serviceAccountId: string,\n    start: string,\n    end: string,\n    token: string,\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      this.addEventParameters(\"/sm/events/service-accounts/\" + serviceAccountId, start, end, token),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  private addEventParameters(base: string, start: string, end: string, token: string) {\n    if (start != null) {\n      base += \"?start=\" + start;\n    }\n    if (end != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"end=\" + end;\n    }\n    if (token != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"continuationToken=\" + token;\n    }\n    return base;\n  }\n}\n","<div class=\"tw-mb-4\">\n  <h1>{{ \"eventLogs\" | i18n }}</h1>\n  <div class=\"tw-mt-4 tw-flex tw-items-center\">\n    <bit-form-field>\n      <bit-label>{{ \"from\" | i18n }}</bit-label>\n      <input\n        bitInput\n        type=\"datetime-local\"\n        placeholder=\"{{ 'startDate' | i18n }}\"\n        [(ngModel)]=\"start\"\n        (change)=\"dirtyDates = true\"\n      />\n    </bit-form-field>\n    <span class=\"tw-mx-2\">-</span>\n    <bit-form-field>\n      <bit-label>{{ \"to\" | i18n }}</bit-label>\n      <input\n        bitInput\n        type=\"datetime-local\"\n        placeholder=\"{{ 'endDate' | i18n }}\"\n        [(ngModel)]=\"end\"\n        (change)=\"dirtyDates = true\"\n      />\n    </bit-form-field>\n    <form #refreshForm [appApiAction]=\"refreshPromise\">\n      <button\n        class=\"tw-mx-3 tw-mt-1\"\n        type=\"button\"\n        bitButton\n        buttonType=\"primary\"\n        (click)=\"loadEvents(true)\"\n        [disabled]=\"loaded && refreshForm.loading\"\n      >\n        {{ \"update\" | i18n }}\n      </button>\n    </form>\n    <form #exportForm [appApiAction]=\"exportPromise\">\n      <button\n        type=\"button\"\n        class=\"tw-mt-1\"\n        bitButton\n        [ngClass]=\"{ loading: exportForm.loading }\"\n        (click)=\"exportEvents()\"\n        [disabled]=\"(loaded && exportForm.loading) || dirtyDates\"\n      >\n        <span>{{ \"export\" | i18n }}</span>\n        <i\n          class=\"bwi bwi-fw\"\n          aria-hidden=\"true\"\n          [ngClass]=\"{\n            'bwi-sign-in': !exportForm.loading,\n            'bwi-spinner bwi-spin': exportForm.loading\n          }\"\n        ></i>\n      </button>\n    </form>\n  </div>\n</div>\n<ng-container *ngIf=\"!loaded\">\n  <i\n    class=\"bwi bwi-spinner bwi-spin text-muted\"\n    title=\"{{ 'loading' | i18n }}\"\n    aria-hidden=\"true\"\n  ></i>\n  <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n</ng-container>\n<ng-container *ngIf=\"loaded\">\n  <p *ngIf=\"!events || !events.length\">{{ \"noEventsInList\" | i18n }}</p>\n  <bit-table *ngIf=\"events && events.length\">\n    <ng-container header>\n      <tr>\n        <th bitCell>{{ \"timestamp\" | i18n }}</th>\n        <th bitCell>{{ \"client\" | i18n }}</th>\n        <th bitCell>{{ \"event\" | i18n }}</th>\n      </tr>\n    </ng-container>\n    <ng-template body>\n      <tr bitRow *ngFor=\"let e of events\" alignContent=\"top\">\n        <td bitCell class=\"tw-whitespace-nowrap\">{{ e.date | date: \"medium\" }}</td>\n        <td bitCell>\n          <span title=\"{{ e.appName }}, {{ e.ip }}\">{{ e.appName }}</span>\n        </td>\n        <td bitCell [innerHTML]=\"e.message\"></td>\n      </tr>\n    </ng-template>\n  </bit-table>\n  <button\n    #moreBtn\n    [appApiAction]=\"morePromise\"\n    type=\"button\"\n    bitButton\n    buttonType=\"primary\"\n    (click)=\"loadEvents(false)\"\n    [disabled]=\"loaded && $any(moreBtn).loading\"\n    *ngIf=\"continuationToken\"\n  >\n    <i\n      class=\"bwi bwi-spinner bwi-spin\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n      *ngIf=\"moreBtn.loading\"\n    ></i>\n    <span>{{ \"loadMore\" | i18n }}</span>\n  </button>\n</ng-container>\n","import { Component, OnDestroy } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { BaseEventsComponent } from \"@bitwarden/web-vault/app/admin-console/common/base.events.component\";\nimport { EventService } from \"@bitwarden/web-vault/app/core\";\nimport { EventExportService } from \"@bitwarden/web-vault/app/tools/event-export\";\n\nimport { ServiceAccountEventLogApiService } from \"./service-account-event-log-api.service\";\n\n@Component({\n  selector: \"sm-service-accounts-events\",\n  templateUrl: \"./service-accounts-events.component.html\",\n})\nexport class ServiceAccountEventsComponent extends BaseEventsComponent implements OnDestroy {\n  exportFileName = \"service-account-events\";\n  private destroy$ = new Subject<void>();\n  private serviceAccountId: string;\n\n  constructor(\n    eventService: EventService,\n    private serviceAccountEventsApiService: ServiceAccountEventLogApiService,\n    private route: ActivatedRoute,\n    i18nService: I18nService,\n    exportService: EventExportService,\n    platformUtilsService: PlatformUtilsService,\n    logService: LogService,\n    fileDownloadService: FileDownloadService,\n  ) {\n    super(\n      eventService,\n      i18nService,\n      exportService,\n      platformUtilsService,\n      logService,\n      fileDownloadService,\n    );\n  }\n\n  async ngOnInit() {\n    // eslint-disable-next-line rxjs/no-async-subscribe\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe(async (params) => {\n      this.serviceAccountId = params.serviceAccountId;\n      await this.load();\n    });\n  }\n\n  async load() {\n    await this.loadEvents(true);\n    this.loaded = true;\n  }\n\n  protected requestEvents(startDate: string, endDate: string, continuationToken: string) {\n    return this.serviceAccountEventsApiService.getEvents(\n      this.serviceAccountId,\n      startDate,\n      endDate,\n      continuationToken,\n    );\n  }\n\n  protected getUserName() {\n    return {\n      name: this.i18nService.t(\"serviceAccount\") + \" \" + this.serviceAccountId,\n      email: \"\",\n    };\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <div class=\"tw-w-2/5\">\n    <p class=\"tw-mt-8\" *ngIf=\"!loading\">\n      {{ \"serviceAccountPeopleDescription\" | i18n }}\n    </p>\n    <sm-access-policy-selector\n      [loading]=\"loading\"\n      formControlName=\"accessPolicies\"\n      [addButtonMode]=\"true\"\n      [items]=\"potentialGrantees\"\n      [label]=\"'people' | i18n\"\n      [hint]=\"'projectPeopleSelectHint' | i18n\"\n      [columnTitle]=\"'name' | i18n\"\n      [emptyMessage]=\"'projectEmptyPeopleAccessPolicies' | i18n\"\n      [staticPermission]=\"staticPermission\"\n    >\n    </sm-access-policy-selector>\n    <button bitButton buttonType=\"primary\" bitFormButton type=\"submit\" class=\"tw-mt-7\">\n      {{ \"save\" | i18n }}\n    </button>\n  </div>\n</form>\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { catchError, combineLatest, EMPTY, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { AccessPolicySelectorService } from \"../../shared/access-policies/access-policy-selector/access-policy-selector.service\";\nimport {\n  ApItemValueType,\n  convertToServiceAccountPeopleAccessPoliciesView,\n} from \"../../shared/access-policies/access-policy-selector/models/ap-item-value.type\";\nimport {\n  ApItemViewType,\n  convertPotentialGranteesToApItemViewType,\n  convertToAccessPolicyItemViews,\n} from \"../../shared/access-policies/access-policy-selector/models/ap-item-view.type\";\nimport { ApItemEnum } from \"../../shared/access-policies/access-policy-selector/models/enums/ap-item.enum\";\nimport { ApPermissionEnum } from \"../../shared/access-policies/access-policy-selector/models/enums/ap-permission.enum\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\n\n@Component({\n  selector: \"sm-service-account-people\",\n  templateUrl: \"./service-account-people.component.html\",\n})\nexport class ServiceAccountPeopleComponent implements OnInit, OnDestroy {\n  private currentAccessPolicies: ApItemViewType[];\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private serviceAccountId: string;\n\n  private currentAccessPolicies$ = combineLatest([this.route.params]).pipe(\n    switchMap(([params]) =>\n      this.accessPolicyService\n        .getServiceAccountPeopleAccessPolicies(params.serviceAccountId)\n        .then((policies) => {\n          return convertToAccessPolicyItemViews(policies);\n        }),\n    ),\n    catchError(() => {\n      this.router.navigate([\"/sm\", this.organizationId, \"service-accounts\"]);\n      return EMPTY;\n    }),\n  );\n\n  private potentialGrantees$ = combineLatest([this.route.params]).pipe(\n    switchMap(([params]) =>\n      this.accessPolicyService\n        .getPeoplePotentialGrantees(params.organizationId)\n        .then((grantees) => {\n          return convertPotentialGranteesToApItemViewType(grantees);\n        }),\n    ),\n  );\n\n  protected formGroup = new FormGroup({\n    accessPolicies: new FormControl([] as ApItemValueType[]),\n  });\n\n  protected loading = true;\n  protected potentialGrantees: ApItemViewType[];\n  protected staticPermission = ApPermissionEnum.CanReadWrite;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private changeDetectorRef: ChangeDetectorRef,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService,\n    private router: Router,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private accessPolicySelectorService: AccessPolicySelectorService,\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.serviceAccountId = params.serviceAccountId;\n    });\n\n    combineLatest([this.potentialGrantees$, this.currentAccessPolicies$])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([potentialGrantees, currentAccessPolicies]) => {\n        this.potentialGrantees = potentialGrantees;\n        this.setSelected(currentAccessPolicies);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    if (this.isFormInvalid()) {\n      return;\n    }\n\n    const showAccessRemovalWarning =\n      await this.accessPolicySelectorService.showAccessRemovalWarning(\n        this.organizationId,\n        this.formGroup.value.accessPolicies,\n      );\n\n    if (\n      await this.handleAccessRemovalWarning(showAccessRemovalWarning, this.currentAccessPolicies)\n    ) {\n      return;\n    }\n\n    try {\n      const peoplePoliciesViews = await this.updateServiceAccountPeopleAccessPolicies(\n        this.serviceAccountId,\n        this.formGroup.value.accessPolicies,\n      );\n\n      await this.handleAccessTokenAvailableWarning(\n        showAccessRemovalWarning,\n        this.currentAccessPolicies,\n        this.formGroup.value.accessPolicies,\n      );\n\n      this.currentAccessPolicies = convertToAccessPolicyItemViews(peoplePoliciesViews);\n\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"serviceAccountAccessUpdated\"),\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n      this.setSelected(this.currentAccessPolicies);\n    }\n  };\n\n  private setSelected(policiesToSelect: ApItemViewType[]) {\n    this.loading = true;\n    this.currentAccessPolicies = policiesToSelect;\n    if (policiesToSelect != undefined) {\n      // Must detect changes so that AccessSelector @Inputs() are aware of the latest\n      // potentialGrantees, otherwise no selected values will be patched below\n      this.changeDetectorRef.detectChanges();\n      this.formGroup.patchValue({\n        accessPolicies: policiesToSelect.map((m) => ({\n          type: m.type,\n          id: m.id,\n          permission: m.permission,\n          currentUser: m.type == ApItemEnum.User ? m.currentUser : null,\n          currentUserInGroup: m.type == ApItemEnum.Group ? m.currentUserInGroup : null,\n        })),\n      });\n    }\n    this.loading = false;\n  }\n\n  private isFormInvalid(): boolean {\n    this.formGroup.markAllAsTouched();\n    return this.formGroup.invalid;\n  }\n\n  private async handleAccessRemovalWarning(\n    showAccessRemovalWarning: boolean,\n    currentAccessPolicies: ApItemViewType[],\n  ): Promise<boolean> {\n    if (showAccessRemovalWarning) {\n      const confirmed = await this.showWarning();\n      if (!confirmed) {\n        this.setSelected(currentAccessPolicies);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private async updateServiceAccountPeopleAccessPolicies(\n    serviceAccountId: string,\n    selectedPolicies: ApItemValueType[],\n  ) {\n    const serviceAccountPeopleView = convertToServiceAccountPeopleAccessPoliciesView(\n      serviceAccountId,\n      selectedPolicies,\n    );\n    return await this.accessPolicyService.putServiceAccountPeopleAccessPolicies(\n      serviceAccountId,\n      serviceAccountPeopleView,\n    );\n  }\n\n  private async handleAccessTokenAvailableWarning(\n    showAccessRemovalWarning: boolean,\n    currentAccessPolicies: ApItemViewType[],\n    selectedPolicies: ApItemValueType[],\n  ): Promise<void> {\n    if (showAccessRemovalWarning) {\n      this.router.navigate([\"sm\", this.organizationId, \"service-accounts\"]);\n    } else if (\n      this.accessPolicySelectorService.isAccessRemoval(currentAccessPolicies, selectedPolicies)\n    ) {\n      await this.showAccessTokenStillAvailableWarning();\n    }\n  }\n\n  private async showWarning(): Promise<boolean> {\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"smAccessRemovalWarningSaTitle\" },\n      content: { key: \"smAccessRemovalWarningSaMessage\" },\n      acceptButtonText: { key: \"removeAccess\" },\n      cancelButtonText: { key: \"cancel\" },\n      type: \"warning\",\n    });\n    return confirmed;\n  }\n\n  private async showAccessTokenStillAvailableWarning(): Promise<void> {\n    await this.dialogService.openSimpleDialog({\n      title: { key: \"saPeopleWarningTitle\" },\n      content: { key: \"saPeopleWarningMessage\" },\n      type: \"warning\",\n      acceptButtonText: { key: \"close\" },\n      cancelButtonText: null,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, map, Observable, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport { ServiceAccountProjectAccessPolicyView } from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\n\n@Component({\n  selector: \"sm-service-account-projects\",\n  templateUrl: \"./service-account-projects.component.html\",\n})\nexport class ServiceAccountProjectsComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private serviceAccountId: string;\n  private organizationId: string;\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.serviceAccountGrantedPolicyChanges$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(([_, params]) =>\n        this.accessPolicyService.getGrantedPolicies(params.serviceAccountId, params.organizationId),\n      ),\n      map((policies) => {\n        return policies.map((policy) => {\n          return {\n            type: \"project\",\n            name: policy.grantedProjectName,\n            id: policy.grantedProjectId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            icon: AccessSelectorComponent.projectIcon,\n            static: false,\n          } as AccessSelectorRowView;\n        });\n      }),\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const serviceAccountProjectAccessPolicyView = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"project\")\n      .map((filtered) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.serviceAccountId = this.serviceAccountId;\n        view.grantedProjectId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createGrantedPolicies(\n      this.organizationId,\n      this.serviceAccountId,\n      serviceAccountProjectAccessPolicyView,\n    );\n  }\n\n  protected async handleUpdateAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      return await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(policy),\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService,\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.serviceAccountId = params.serviceAccountId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div class=\"tw-mt-4 tw-w-2/5\">\n  <p class=\"tw-mt-6\">\n    {{ \"serviceAccountProjectsDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"projects\"\n    [label]=\"'projects' | i18n\"\n    [hint]=\"'newSaSelectAccess' | i18n\"\n    [columnTitle]=\"'projects' | i18n\"\n    [emptyMessage]=\"'serviceAccountEmptyProjectAccesspolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n    (onUpdateAccessPolicy)=\"handleUpdateAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<app-header\n  *ngIf=\"serviceAccount$ | async as serviceAccount\"\n  [title]=\"serviceAccount.name\"\n  icon=\"bwi-wrench\"\n>\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{\n      \"serviceAccounts\" | i18n\n    }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <sm-new-menu></sm-new-menu>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['projects']\">{{ \"projects\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['access']\">{{ \"accessTokens\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['events']\">{{ \"eventLogs\" | i18n }}</bit-tab-link>\n  </bit-tab-nav-bar>\n  <button\n    type=\"button\"\n    slot=\"secondary\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"openNewAccessTokenDialog()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newAccessToken\" | i18n }}\n  </button>\n</app-header>\n<router-outlet></router-outlet>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n  EMPTY,\n  Subject,\n  catchError,\n  combineLatest,\n  filter,\n  startWith,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-account\",\n  templateUrl: \"./service-account.component.html\",\n})\nexport class ServiceAccountComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private serviceAccountId: string;\n\n  private onChange$ = this.serviceAccountService.serviceAccount$.pipe(\n    filter((sa) => sa?.id === this.serviceAccountId),\n    startWith(null),\n  );\n\n  private serviceAccountView: ServiceAccountView;\n  protected serviceAccount$ = combineLatest([this.route.params, this.onChange$]).pipe(\n    switchMap(([params, _]) =>\n      this.serviceAccountService.getByServiceAccountId(\n        params.serviceAccountId,\n        params.organizationId,\n      ),\n    ),\n    catchError(() => {\n      this.router.navigate([\"/sm\", this.organizationId, \"service-accounts\"]).then(() => {\n        this.platformUtilsService.showToast(\n          \"error\",\n          null,\n          this.i18nService.t(\"notFound\", this.i18nService.t(\"serviceAccount\")),\n        );\n      });\n      return EMPTY;\n    }),\n  );\n\n  constructor(\n    private route: ActivatedRoute,\n    private serviceAccountService: ServiceAccountService,\n    private dialogService: DialogService,\n    private router: Router,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n  ) {}\n\n  ngOnInit(): void {\n    this.serviceAccount$.pipe(takeUntil(this.destroy$)).subscribe((serviceAccountView) => {\n      this.serviceAccountView = serviceAccountView;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountView,\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>\n      <span>{{ title }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.serviceAccounts.length == 1\">\n          {{ data.serviceAccounts[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.serviceAccounts.length > 1\">\n          {{ data.serviceAccounts.length }}\n          {{ \"serviceAccounts\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport interface ServiceAccountDeleteOperation {\n  serviceAccounts: ServiceAccountView[];\n}\n\n@Component({\n  templateUrl: \"./service-account-delete-dialog.component.html\",\n})\nexport class ServiceAccountDeleteDialogComponent {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ServiceAccountDeleteOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogService,\n  ) {}\n\n  get title() {\n    return this.data.serviceAccounts.length === 1\n      ? this.i18nService.t(\"deleteServiceAccount\")\n      : this.i18nService.t(\"deleteServiceAccounts\");\n  }\n\n  get dialogContent() {\n    return this.data.serviceAccounts.length === 1\n      ? this.i18nService.t(\"deleteServiceAccountDialogMessage\", this.data.serviceAccounts[0].name)\n      : this.i18nService.t(\"deleteServiceAccountsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.serviceAccountService.delete(this.data.serviceAccounts);\n\n    const errors = bulkResponses.filter((response) => response.errorMessage);\n    if (errors.length > 0) {\n      this.openBulkStatusDialog(errors);\n      return;\n    }\n\n    const message =\n      this.data.serviceAccounts.length === 1\n        ? \"deleteServiceAccountToast\"\n        : \"deleteServiceAccountsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteServiceAccounts\",\n        subTitle: \"serviceAccounts\",\n        columnTitle: \"serviceAccountName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.serviceAccounts?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.serviceAccounts[0].name)\n      : this.i18nService.t(\n          \"deleteServiceAccountsConfirmMessage\",\n          this.data.serviceAccounts?.length.toString(),\n        );\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","<div *ngIf=\"!serviceAccounts\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"serviceAccounts?.length == 0\">\n  <ng-container slot=\"title\">{{ \"serviceAccountsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"serviceAccountsNoItemsMessage\" | i18n }}</ng-container>\n  <button\n    slot=\"button\"\n    type=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newServiceAccountEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newServiceAccount\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"serviceAccounts?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell colspan=\"2\" bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"secrets\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let serviceAccount of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(serviceAccount.id) : null\"\n          [checked]=\"selection.isSelected(serviceAccount.id)\"\n        />\n      </td>\n      <td bitCell class=\"tw-w-0 tw-pr-0\">\n        <i class=\"bwi bwi-wrench tw-text-muted\" aria-hidden=\"true\"></i>\n      </td>\n      <td bitCell class=\"tw-break-all\">\n        <a bitLink [routerLink]=\"serviceAccount.id\">\n          {{ serviceAccount.name }}\n        </a>\n      </td>\n      <td bitCell>\n        <span> {{ serviceAccount.accessToSecrets }} </span>\n      </td>\n      <td bitCell>{{ serviceAccount.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"serviceAccountMenu\"\n        ></button>\n      </td>\n      <bit-menu #serviceAccountMenu>\n        <a type=\"button\" bitMenuItem [routerLink]=\"serviceAccount.id\">\n          <i class=\"bwi bwi-fw bwi-eye\" aria-hidden=\"true\"></i>\n          {{ \"viewServiceAccount\" | i18n }}\n        </a>\n        <button type=\"button\" bitMenuItem (click)=\"editServiceAccountEvent.emit(serviceAccount.id)\">\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editServiceAccount\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"delete(serviceAccount)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">\n            {{ \"deleteServiceAccount\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteServiceAccounts()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">\n      {{ \"deleteServiceAccounts\" | i18n }}\n    </span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport {\n  ServiceAccountSecretsDetailsView,\n  ServiceAccountView,\n} from \"../models/view/service-account.view\";\n\n@Component({\n  selector: \"sm-service-accounts-list\",\n  templateUrl: \"./service-accounts-list.component.html\",\n})\nexport class ServiceAccountsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<ServiceAccountSecretsDetailsView>();\n\n  @Input()\n  get serviceAccounts(): ServiceAccountSecretsDetailsView[] {\n    return this._serviceAccounts;\n  }\n  set serviceAccounts(serviceAccounts: ServiceAccountSecretsDetailsView[]) {\n    this.selection.clear();\n    this._serviceAccounts = serviceAccounts;\n    this.dataSource.data = serviceAccounts;\n  }\n  private _serviceAccounts: ServiceAccountSecretsDetailsView[];\n\n  @Input()\n  set search(search: string) {\n    this.selection.clear();\n    this.dataSource.filter = search;\n  }\n\n  @Output() newServiceAccountEvent = new EventEmitter();\n  @Output() deleteServiceAccountsEvent = new EventEmitter<ServiceAccountView[]>();\n  @Output() onServiceAccountCheckedEvent = new EventEmitter<string[]>();\n  @Output() editServiceAccountEvent = new EventEmitter<string>();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n  ) {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onServiceAccountCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    if (this.selection.selected?.length > 0) {\n      const numSelected = this.selection.selected.length;\n      const numRows = this.dataSource.filteredData.length;\n      return numSelected === numRows;\n    }\n    return false;\n  }\n\n  toggleAll() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n    } else {\n      this.selection.select(...this.dataSource.filteredData.map((s) => s.id));\n    }\n  }\n\n  delete(serviceAccount: ServiceAccountSecretsDetailsView) {\n    this.deleteServiceAccountsEvent.emit([serviceAccount as ServiceAccountView]);\n  }\n\n  bulkDeleteServiceAccounts() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteServiceAccountsEvent.emit(\n        this.serviceAccounts.filter((sa) => this.selection.isSelected(sa.id)),\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\"),\n      );\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  ServiceAccountSecretsDetailsView,\n  ServiceAccountView,\n} from \"../models/view/service-account.view\";\n\nimport {\n  ServiceAccountDeleteDialogComponent,\n  ServiceAccountDeleteOperation,\n} from \"./dialog/service-account-delete-dialog.component\";\nimport {\n  OperationType,\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-accounts\",\n  templateUrl: \"./service-accounts.component.html\",\n})\nexport class ServiceAccountsComponent implements OnInit {\n  protected serviceAccounts$: Observable<ServiceAccountSecretsDetailsView[]>;\n  protected search: string;\n\n  private organizationId: string;\n  private organizationEnabled: boolean;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private serviceAccountService: ServiceAccountService,\n    private organizationService: OrganizationService,\n  ) {}\n\n  ngOnInit() {\n    this.serviceAccounts$ = combineLatest([\n      this.route.params,\n      this.serviceAccountService.serviceAccount$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(async ([params]) => {\n        this.organizationId = params.organizationId;\n        this.organizationEnabled = this.organizationService.get(params.organizationId)?.enabled;\n\n        return await this.getServiceAccounts();\n      }),\n    );\n  }\n\n  openNewServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  openEditServiceAccountDialog(serviceAccountId: string) {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        serviceAccountId: serviceAccountId,\n        operation: OperationType.Edit,\n        organizationEnabled: this.organizationEnabled,\n      },\n    });\n  }\n\n  openDeleteDialog(event: ServiceAccountView[]) {\n    this.dialogService.open<unknown, ServiceAccountDeleteOperation>(\n      ServiceAccountDeleteDialogComponent,\n      {\n        data: {\n          serviceAccounts: event,\n        },\n      },\n    );\n  }\n\n  private async getServiceAccounts(): Promise<ServiceAccountSecretsDetailsView[]> {\n    return await this.serviceAccountService.getServiceAccounts(this.organizationId, true);\n  }\n}\n","<app-header>\n  <bit-search\n    [placeholder]=\"'searchServiceAccounts' | i18n\"\n    [(ngModel)]=\"search\"\n    class=\"tw-w-80\"\n  ></bit-search>\n  <sm-new-menu></sm-new-menu>\n</app-header>\n<sm-service-accounts-list\n  [serviceAccounts]=\"serviceAccounts$ | async\"\n  (newServiceAccountEvent)=\"openNewServiceAccountDialog()\"\n  (editServiceAccountEvent)=\"openEditServiceAccountDialog($event)\"\n  (deleteServiceAccountsEvent)=\"openDeleteDialog($event)\"\n  [search]=\"search\"\n></sm-service-accounts-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { ServiceAccountEventsComponent } from \"./event-logs/service-accounts-events.component\";\nimport { serviceAccountAccessGuard } from \"./guards/service-account-access.guard\";\nimport { ServiceAccountPeopleComponent } from \"./people/service-account-people.component\";\nimport { ServiceAccountProjectsComponent } from \"./projects/service-account-projects.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ServiceAccountsComponent,\n  },\n  {\n    path: \":serviceAccountId\",\n    component: ServiceAccountComponent,\n    canActivate: [serviceAccountAccessGuard],\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"projects\",\n      },\n      {\n        path: \"access\",\n        component: AccessTokenComponent,\n      },\n      {\n        path: \"people\",\n        component: ServiceAccountPeopleComponent,\n      },\n      {\n        path: \"projects\",\n        component: ServiceAccountProjectsComponent,\n      },\n      {\n        path: \"events\",\n        component: ServiceAccountEventsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ServiceAccountsRoutingModule {}\n","import { inject } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivateFn, createUrlTreeFromSnapshot } from \"@angular/router\";\n\nimport { ServiceAccountService } from \"../service-account.service\";\n\n/**\n * Redirects to service accounts page if the user doesn't have access to service account.\n */\nexport const serviceAccountAccessGuard: CanActivateFn = async (route: ActivatedRouteSnapshot) => {\n  const serviceAccountService = inject(ServiceAccountService);\n\n  try {\n    const serviceAccount = await serviceAccountService.getByServiceAccountId(\n      route.params.serviceAccountId,\n      route.params.organizationId,\n    );\n    if (serviceAccount) {\n      return true;\n    }\n  } catch {\n    return createUrlTreeFromSnapshot(route, [\n      \"/sm\",\n      route.params.organizationId,\n      \"service-accounts\",\n    ]);\n  }\n  return createUrlTreeFromSnapshot(route, [\"/sm\", route.params.organizationId, \"service-accounts\"]);\n};\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { AccessListComponent } from \"./access/access-list.component\";\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { AccessTokenDialogComponent } from \"./access/dialogs/access-token-dialog.component\";\nimport { ExpirationOptionsComponent } from \"./access/dialogs/expiration-options.component\";\nimport { ServiceAccountDeleteDialogComponent } from \"./dialog/service-account-delete-dialog.component\";\nimport { ServiceAccountDialogComponent } from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountEventsComponent } from \"./event-logs/service-accounts-events.component\";\nimport { ServiceAccountPeopleComponent } from \"./people/service-account-people.component\";\nimport { ServiceAccountProjectsComponent } from \"./projects/service-account-projects.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsListComponent } from \"./service-accounts-list.component\";\nimport { ServiceAccountsRoutingModule } from \"./service-accounts-routing.module\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ServiceAccountsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    AccessListComponent,\n    AccessTokenComponent,\n    AccessTokenCreateDialogComponent,\n    AccessTokenDialogComponent,\n    ExpirationOptionsComponent,\n    ServiceAccountComponent,\n    ServiceAccountDeleteDialogComponent,\n    ServiceAccountDialogComponent,\n    ServiceAccountEventsComponent,\n    ServiceAccountPeopleComponent,\n    ServiceAccountProjectsComponent,\n    ServiceAccountsComponent,\n    ServiceAccountsListComponent,\n    ServiceAccountPeopleComponent,\n  ],\n  providers: [],\n})\nexport class ServiceAccountsModule {}\n","import { SecretsManagerImportErrorLine } from \"./sm-import-error-line\";\n\nexport class SecretsManagerImportError extends Error {\n  constructor(message?: string) {\n    super(message);\n  }\n\n  lines: SecretsManagerImportErrorLine[];\n}\n","import { SecretsManagerImportedProjectRequest } from \"./sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"./sm-imported-secret.request\";\n\nexport class SecretsManagerImportRequest {\n  projects: SecretsManagerImportedProjectRequest[];\n  secrets: SecretsManagerImportedSecretRequest[];\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class SecretsManagerImportedProjectRequest {\n  id: string;\n  name: EncString;\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class SecretsManagerImportedSecretRequest {\n  id: string;\n  key: EncString;\n  value: EncString;\n  note: EncString;\n  projectIds: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedSecretResponse extends BaseResponse {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n\n    const projectIds = this.getResponseProperty(\"ProjectIds\");\n    this.projectIds = projectIds?.map((id: any) => id.toString());\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretsManagerExportedProjectResponse } from \"./sm-exported-project.response\";\nimport { SecretsManagerExportedSecretResponse } from \"./sm-exported-secret.response\";\n\nexport class SecretsManagerExportResponse extends BaseResponse {\n  projects: SecretsManagerExportedProjectResponse[];\n  secrets: SecretsManagerExportedSecretResponse[];\n\n  constructor(response: any) {\n    super(response);\n\n    const projects = this.getResponseProperty(\"Projects\");\n    const secrets = this.getResponseProperty(\"Secrets\");\n\n    this.projects = projects?.map((k: any) => new SecretsManagerExportedProjectResponse(k));\n    this.secrets = secrets?.map((k: any) => new SecretsManagerExportedSecretResponse(k));\n  }\n}\n","export class SecretsManagerExport {\n  projects: SecretsManagerExportProject[];\n  secrets: SecretsManagerExportSecret[];\n}\n\nexport class SecretsManagerExportProject {\n  id: string;\n  name: string;\n}\n\nexport class SecretsManagerExportSecret {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportRequest } from \"../models/requests/sm-import.request\";\nimport { SecretsManagerImportedProjectRequest } from \"../models/requests/sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"../models/requests/sm-imported-secret.request\";\nimport { SecretsManagerExportResponse } from \"../models/responses/sm-export.response\";\nimport {\n  SecretsManagerExport,\n  SecretsManagerExportProject,\n  SecretsManagerExportSecret,\n} from \"../models/sm-export\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingApiService {\n  constructor(\n    private apiService: ApiService,\n    private encryptService: EncryptService,\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n  ) {}\n\n  async export(organizationId: string): Promise<string> {\n    const response = await this.apiService.send(\n      \"GET\",\n      \"/sm/\" + organizationId + \"/export\",\n      null,\n      true,\n      true,\n    );\n\n    return JSON.stringify(\n      await this.decryptExport(organizationId, new SecretsManagerExportResponse(response)),\n      null,\n      \"  \",\n    );\n  }\n\n  async import(organizationId: string, fileContents: string): Promise<SecretsManagerImportError> {\n    let requestObject = {};\n\n    try {\n      requestObject = JSON.parse(fileContents);\n      const requestBody = await this.encryptImport(organizationId, requestObject);\n\n      await this.apiService.send(\n        \"POST\",\n        \"/sm/\" + organizationId + \"/import\",\n        requestBody,\n        true,\n        true,\n      );\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      return this.handleServerError(errorResponse, requestObject);\n    }\n  }\n\n  private async encryptImport(\n    organizationId: string,\n    importData: any,\n  ): Promise<SecretsManagerImportRequest> {\n    const encryptedImport = new SecretsManagerImportRequest();\n\n    try {\n      const orgKey = await this.cryptoService.getOrgKey(organizationId);\n      encryptedImport.projects = [];\n      encryptedImport.secrets = [];\n\n      encryptedImport.projects = await Promise.all(\n        importData.projects.map(async (p: any) => {\n          const project = new SecretsManagerImportedProjectRequest();\n          project.id = p.id;\n          project.name = await this.encryptService.encrypt(p.name, orgKey);\n          return project;\n        }),\n      );\n\n      encryptedImport.secrets = await Promise.all(\n        importData.secrets.map(async (s: any) => {\n          const secret = new SecretsManagerImportedSecretRequest();\n\n          [secret.key, secret.value, secret.note] = await Promise.all([\n            this.encryptService.encrypt(s.key, orgKey),\n            this.encryptService.encrypt(s.value, orgKey),\n            this.encryptService.encrypt(s.note, orgKey),\n          ]);\n\n          secret.id = s.id;\n          secret.projectIds = s.projectIds;\n\n          return secret;\n        }),\n      );\n    } catch (error) {\n      return null;\n    }\n\n    return encryptedImport;\n  }\n\n  private async decryptExport(\n    organizationId: string,\n    exportData: SecretsManagerExportResponse,\n  ): Promise<SecretsManagerExport> {\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const decryptedExport = new SecretsManagerExport();\n    decryptedExport.projects = [];\n    decryptedExport.secrets = [];\n\n    decryptedExport.projects = await Promise.all(\n      exportData.projects.map(async (p) => {\n        const project = new SecretsManagerExportProject();\n        project.id = p.id;\n        project.name = await this.encryptService.decryptToUtf8(new EncString(p.name), orgKey);\n        return project;\n      }),\n    );\n\n    decryptedExport.secrets = await Promise.all(\n      exportData.secrets.map(async (s) => {\n        const secret = new SecretsManagerExportSecret();\n\n        [secret.key, secret.value, secret.note] = await Promise.all([\n          this.encryptService.decryptToUtf8(new EncString(s.key), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.value), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.note), orgKey),\n        ]);\n\n        secret.id = s.id;\n        secret.projectIds = s.projectIds;\n\n        return secret;\n      }),\n    );\n\n    return decryptedExport;\n  }\n\n  private handleServerError(\n    errorResponse: ErrorResponse,\n    importResult: any,\n  ): SecretsManagerImportError {\n    if (errorResponse.validationErrors == null) {\n      return new SecretsManagerImportError(errorResponse.message);\n    }\n\n    const result = new SecretsManagerImportError();\n    result.lines = [];\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const id = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Projects\":\n          item = importResult.projects[id];\n          itemType = \"Project\";\n          break;\n        case \"Secrets\":\n          item = importResult.secrets[id];\n          itemType = \"Secret\";\n          break;\n        default:\n          return;\n      }\n\n      result.lines.push({\n        id: id + 1,\n        type: itemType == \"Project\" ? \"Project\" : \"Secret\",\n        key: item.key,\n        errorMessage: value.length > 0 ? value[0] : \"\",\n      });\n    });\n\n    return result;\n  }\n}\n","import { formatDate } from \"@angular/common\";\nimport { Injectable } from \"@angular/core\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingService {\n  constructor(private i18nService: I18nService) {}\n\n  async getFileName(prefix: string = null, extension = \"json\"): Promise<string> {\n    const locale = await firstValueFrom(this.i18nService.locale$);\n    const dateString = formatDate(new Date(), \"yyyyMMddHHmmss\", locale);\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n}\n","<app-header></app-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <div class=\"tw-my-4 tw-max-w-xl\">\n    <app-callout type=\"info\" title=\"{{ 'exportingOrganizationSecretDataTitle' | i18n }}\">\n      {{ \"exportingOrganizationSecretDataDescription\" | i18n: orgName }}\n    </app-callout>\n  </div>\n\n  <bit-form-field class=\"tw-max-w-sm\">\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"format\">\n      <option *ngFor=\"let format of exportFormats; let i = index\" [value]=\"i\">\n        {{ format.name }}\n      </option>\n    </select>\n  </bit-form-field>\n\n  <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n    {{ \"exportData\" | i18n }}\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { firstValueFrom, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { openUserVerificationPrompt } from \"@bitwarden/web-vault/app/auth/shared/components/user-verification\";\n\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"../services/sm-porting.service\";\n\ntype ExportFormat = {\n  name: string;\n  fileExtension: string;\n};\n\n@Component({\n  selector: \"sm-export\",\n  templateUrl: \"./sm-export.component.html\",\n})\nexport class SecretsManagerExportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  protected orgName: string;\n  protected orgId: string;\n  protected exportFormats: ExportFormat[] = [{ name: \"Bitwarden (json)\", fileExtension: \"json\" }];\n\n  protected formGroup = new FormGroup({\n    format: new FormControl(0, [Validators.required]),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    private smPortingService: SecretsManagerPortingService,\n    private fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private dialogService: DialogService,\n    private secretsManagerApiService: SecretsManagerPortingApiService,\n  ) {}\n\n  async ngOnInit() {\n    this.route.params\n      .pipe(\n        switchMap(async (params) => await this.organizationService.get(params.organizationId)),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((organization) => {\n        this.orgName = organization.name;\n        this.orgId = organization.id;\n      });\n\n    this.formGroup.get(\"format\").disable();\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    await this.doExport();\n  };\n\n  private async doExport() {\n    const fileExtension = this.exportFormats[this.formGroup.get(\"format\").value].fileExtension;\n    const exportData = await this.secretsManagerApiService.export(this.orgId);\n\n    await this.downloadFile(exportData, fileExtension);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"dataExportSuccess\"));\n  }\n\n  private async downloadFile(data: string, format: string) {\n    const fileName = await this.smPortingService.getFileName(null, format);\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: data,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n\n  private verifyUser() {\n    const ref = openUserVerificationPrompt(this.dialogService, {\n      data: {\n        confirmDescription: \"exportSecretsWarningDesc\",\n        confirmButtonText: \"exportSecrets\",\n        modalTitle: \"confirmSecretsExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return firstValueFrom(ref.closed);\n  }\n}\n","<bit-dialog dialogSize=\"large\">\n  <span bitDialogTitle>\n    {{ \"importError\" | i18n }}\n  </span>\n  <span bitDialogContent>\n    <div>{{ \"resolveTheErrorsBelowAndTryAgain\" | i18n }}</div>\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let line of errorLines\">\n          <td bitCell class=\"tw-whitespace-nowrap\">\n            [{{ line.id }}] [{{ line.type }}] {{ line.key }}\n          </td>\n          <td bitCell>{{ line.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportErrorLine } from \"../models/error/sm-import-error-line\";\n\nexport interface SecretsManagerImportErrorDialogOperation {\n  error: SecretsManagerImportError;\n}\n\n@Component({\n  templateUrl: \"./sm-import-error-dialog.component.html\",\n})\nexport class SecretsManagerImportErrorDialogComponent {\n  errorLines: SecretsManagerImportErrorLine[];\n\n  constructor(\n    public dialogRef: DialogRef,\n    private i18nService: I18nService,\n    @Inject(DIALOG_DATA) public data: SecretsManagerImportErrorDialogOperation,\n  ) {\n    this.errorLines = data.error.lines;\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  SecretsManagerImportErrorDialogComponent,\n  SecretsManagerImportErrorDialogOperation,\n} from \"../dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\n\n@Component({\n  selector: \"sm-import\",\n  templateUrl: \"./sm-import.component.html\",\n})\nexport class SecretsManagerImportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  protected orgId: string = null;\n  protected selectedFile: File;\n  protected formGroup = new FormGroup({\n    pastedContents: new FormControl(\"\"),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    protected fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private secretsManagerPortingApiService: SecretsManagerPortingApiService,\n    private dialogService: DialogService,\n  ) {}\n\n  async ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.orgId = params.organizationId;\n    });\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    const fileElement = document.getElementById(\"file\") as HTMLInputElement;\n    const importContents = await this.getImportContents(\n      fileElement,\n      this.formGroup.get(\"pastedContents\").value.trim(),\n    );\n\n    if (importContents == null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\"),\n      );\n      return;\n    }\n\n    try {\n      const error = await this.secretsManagerPortingApiService.import(this.orgId, importContents);\n\n      if (error?.lines?.length > 0) {\n        this.openImportErrorDialog(error);\n        return;\n      } else if (!Utils.isNullOrWhitespace(error?.message)) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          this.i18nService.t(\"errorOccurred\"),\n          error.message,\n        );\n        return;\n      } else if (error != null) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          this.i18nService.t(\"errorOccurred\"),\n          this.i18nService.t(\"errorReadingImportFile\"),\n        );\n        return;\n      }\n\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.clearForm();\n    } catch (error) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"errorReadingImportFile\"),\n      );\n      this.logService.error(error);\n    }\n  };\n\n  protected async getImportContents(\n    fileElement: HTMLInputElement,\n    pastedContents: string,\n  ): Promise<string> {\n    const files = fileElement.files;\n\n    if (\n      (files == null || files.length === 0) &&\n      (pastedContents == null || pastedContents === \"\")\n    ) {\n      return null;\n    }\n\n    let fileContents = pastedContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      return null;\n    }\n\n    return fileContents;\n  }\n\n  protected setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    const file = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n    this.selectedFile = file;\n  }\n\n  private clearForm() {\n    (document.getElementById(\"file\") as HTMLInputElement).value = \"\";\n    this.selectedFile = null;\n    this.formGroup.reset({\n      pastedContents: \"\",\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private openImportErrorDialog(error: SecretsManagerImportError) {\n    this.dialogService.open<unknown, SecretsManagerImportErrorDialogOperation>(\n      SecretsManagerImportErrorDialogComponent,\n      {\n        data: {\n          error: error,\n        },\n      },\n    );\n  }\n}\n","<app-header></app-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-max-w-xl\">\n  <bit-form-field>\n    <bit-label>{{ \"fileUpload\" | i18n }}</bit-label>\n    <div class=\"file-selector\">\n      <button bitButton type=\"button\" buttonType=\"secondary\" (click)=\"fileSelector.click()\">\n        {{ \"chooseFile\" | i18n }}\n      </button>\n      {{ selectedFile?.name ?? (\"noFileChosen\" | i18n) }}\n    </div>\n    <input\n      #fileSelector\n      hidden\n      bitInput\n      type=\"file\"\n      id=\"file\"\n      class=\"form-control-file\"\n      name=\"file\"\n      (change)=\"setSelectedFile($event)\"\n      accept=\"application/JSON\"\n    />\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} Bitwarden (json)</bit-hint>\n  </bit-form-field>\n  <div class=\"my-4\">\n    {{ \"or\" | i18n }}\n  </div>\n  <bit-form-field>\n    <bit-label for=\"pastedContents\">{{ \"copyPasteImportContents\" | i18n }}</bit-label>\n    <textarea\n      bitInput\n      id=\"pastedContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      formControlName=\"pastedContents\"\n    ></textarea>\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} Bitwarden (json)</bit-hint>\n  </bit-form-field>\n  <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n    {{ \"importData\" | i18n }}\n  </button>\n</form>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { OrganizationPermissionsGuard } from \"@bitwarden/web-vault/app/admin-console/organizations/guards/org-permissions.guard\";\n\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\n\nconst routes: Routes = [\n  {\n    path: \"import\",\n    component: SecretsManagerImportComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"importData\",\n      organizationPermissions: (org: Organization) => org.isAdmin,\n    },\n  },\n  {\n    path: \"export\",\n    component: SecretsManagerExportComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"exportData\",\n      organizationPermissions: (org: Organization) => org.isAdmin,\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretsManagerImportErrorDialogComponent } from \"./dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\nimport { SecretsManagerPortingApiService } from \"./services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"./services/sm-porting.service\";\nimport { SettingsRoutingModule } from \"./settings-routing.module\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SettingsRoutingModule],\n  declarations: [\n    SecretsManagerImportComponent,\n    SecretsManagerExportComponent,\n    SecretsManagerImportErrorDialogComponent,\n  ],\n  providers: [SecretsManagerPortingService, SecretsManagerPortingApiService],\n})\nexport class SettingsModule {}\n","import { svgIcon } from \"../icon\";\n\nexport const NoAccess = svgIcon`\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"154\" height=\"130\" fill=\"none\">\n  <path class=\"tw-stroke-secondary-500\" d=\"M60.795 112.1h55.135a4 4 0 0 0 4-4V59.65M32.9 51.766V6a4 4 0 0 1 4-4h79.03a4 4 0 0 1 4 4v19.992\"  stroke-width=\"4\"/>\n  <path class=\"tw-stroke-secondary-500\" d=\"M46.997 21.222h13.806M69.832 21.222h13.806M93.546 21.222h13.806M46.997 44.188h13.806M69.832 44.188h13.806M93.546 44.188h13.806M50.05 67.02h10.753M69.832 67.02h13.806M93.546 67.02h13.806M46.997 90.118h13.806M69.832 90.118h13.806M93.546 90.118h13.806\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n  <path class=\"tw-stroke-secondary-500\" d=\"M30.914 89.366c10.477 0 18.97-8.493 18.97-18.97 0-10.476-8.493-18.97-18.97-18.97-10.476 0-18.969 8.494-18.969 18.97 0 10.477 8.493 18.97 18.97 18.97ZM2.313 117.279c2.183-16.217 15.44-27.362 29.623-27.362 14.07 0 25.942 11.022 27.898 27.33.167 1.39-.988 2.753-2.719 2.753H5c-1.741 0-2.87-1.366-2.687-2.721Z\" stroke-width=\"4\"/>\n  <path class=\"tw-stroke-danger-500\" d=\"m147.884 50.361-15.89-27.522c-2.31-4-8.083-4-10.392 0l-15.891 27.523c-2.309 4 .578 9 5.196 9h31.781c4.619 0 7.505-5 5.196-9Z\" stroke-width=\"4\"/>\n  <path class=\"tw-stroke-danger-500\" d=\"M126.798 29.406v16.066\" stroke-width=\"4\" stroke-linecap=\"round\"/>\n  <path class=\"tw-fill-danger-500\" d=\"M126.798 54.727a2.635 2.635 0 1 0 0-5.27 2.635 2.635 0 0 0 0 5.27Z\" />\n</svg>\n`;\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Icon, Icons } from \"@bitwarden/components\";\n\n@Component({\n  templateUrl: \"./org-suspended.component.html\",\n})\nexport class OrgSuspendedComponent {\n  constructor(\n    private organizationService: OrganizationService,\n    private route: ActivatedRoute,\n  ) {}\n\n  protected NoAccess: Icon = Icons.NoAccess;\n  protected organizationName$ = this.route.params.pipe(\n    map((params) => this.organizationService.get(params.organizationId)?.name),\n  );\n}\n","<app-header [title]=\"organizationName$ | async\">\n  <sm-new-menu></sm-new-menu>\n</app-header>\n<bit-no-items [icon]=\"NoAccess\">\n  <ng-container slot=\"title\">{{ \"organizationIsDisabled\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"secretsAccessSuspended\" | i18n }}</ng-container>\n</bit-no-items>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SecretService } from \"../../secrets/secret.service\";\n\nexport interface SecretHardDeleteOperation {\n  secretIds: string[];\n  organizationId: string;\n}\n\n@Component({\n  templateUrl: \"./secret-hard-delete.component.html\",\n})\nexport class SecretHardDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretHardDeleteOperation,\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"hardDeleteSecret\" : \"hardDeleteSecrets\";\n  }\n\n  get submitButtonText() {\n    return this.data.secretIds.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    await this.secretService.deleteTrashed(this.data.organizationId, this.data.secretIds);\n    const message =\n      this.data.secretIds.length === 1 ? \"hardDeleteSuccessToast\" : \"hardDeletesSuccessToast\";\n    this.dialogRef.close(this.data.secretIds);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    {{\n      data.secretIds.length === 1\n        ? (\"hardDeleteSecretConfirmation\" | i18n)\n        : (\"hardDeleteSecretsConfirmation\" | i18n)\n    }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ submitButtonText | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SecretService } from \"../../secrets/secret.service\";\n\nexport interface SecretRestoreOperation {\n  secretIds: string[];\n  organizationId: string;\n}\n\n@Component({\n  templateUrl: \"./secret-restore.component.html\",\n})\nexport class SecretRestoreDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretRestoreOperation,\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"restoreSecret\" : \"restoreSecrets\";\n  }\n\n  restore = async () => {\n    let message = \"\";\n    await this.secretService.restoreTrashed(this.data.organizationId, this.data.secretIds);\n    message =\n      this.data.secretIds.length === 1\n        ? \"secretRestoredSuccessToast\"\n        : \"secretsRestoredSuccessToast\";\n    this.dialogRef.close(this.data.secretIds);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    {{\n      data.secretIds.length === 1 ? (\"restoreSecretPrompt\" | i18n) : (\"restoreSecretsPrompt\" | i18n)\n    }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"restore\">\n      {{ title | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretService } from \"../secrets/secret.service\";\nimport { SecretsListComponent } from \"../shared/secrets-list.component\";\n\nimport {\n  SecretHardDeleteDialogComponent,\n  SecretHardDeleteOperation,\n} from \"./dialog/secret-hard-delete.component\";\nimport {\n  SecretRestoreDialogComponent,\n  SecretRestoreOperation,\n} from \"./dialog/secret-restore.component\";\n\n@Component({\n  selector: \"sm-trash\",\n  templateUrl: \"./trash.component.html\",\n})\nexport class TrashComponent implements OnInit {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private dialogService: DialogService,\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getSecrets();\n      }),\n    );\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getTrashedSecrets(this.organizationId);\n  }\n\n  openDeleteSecret(secrets: SecretListView[]) {\n    const secretIds = secrets.map((secret) => secret.id);\n\n    this.dialogService.open<unknown, SecretHardDeleteOperation>(SecretHardDeleteDialogComponent, {\n      data: {\n        secretIds: secretIds,\n        organizationId: this.organizationId,\n      },\n    });\n  }\n\n  openRestoreSecret(secretIds: string[]) {\n    this.dialogService.open<unknown, SecretRestoreOperation>(SecretRestoreDialogComponent, {\n      data: {\n        secretIds: secretIds,\n        organizationId: this.organizationId,\n      },\n    });\n  }\n\n  copySecretUuid(id: string) {\n    SecretsListComponent.copySecretUuid(id, this.platformUtilsService, this.i18nService);\n  }\n}\n","<app-header>\n  <sm-new-menu></sm-new-menu>\n</app-header>\n<bit-callout type=\"warning\" [title]=\"'warning' | i18n\">{{\n  \"trashCleanupWarning\" | i18n\n}}</bit-callout>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (restoreSecretsEvent)=\"openRestoreSecret($event)\"\n  [secrets]=\"secrets$ | async\"\n  [trash]=\"true\"\n  (copySecretUuidEvent)=\"copySecretUuid($event)\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { TrashComponent } from \"./trash.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: TrashComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TrashRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretHardDeleteDialogComponent } from \"./dialog/secret-hard-delete.component\";\nimport { SecretRestoreDialogComponent } from \"./dialog/secret-restore.component\";\nimport { TrashRoutingModule } from \"./trash-routing.module\";\nimport { TrashComponent } from \"./trash.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, TrashRoutingModule],\n  declarations: [SecretHardDeleteDialogComponent, SecretRestoreDialogComponent, TrashComponent],\n  providers: [],\n})\nexport class TrashModule {}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AuthGuard } from \"@bitwarden/angular/auth/guards\";\nimport { buildFlaggedRoute } from \"@bitwarden/web-vault/app/oss-routing.module\";\n\nimport { organizationEnabledGuard } from \"./guards/sm-org-enabled.guard\";\nimport { canActivateSM } from \"./guards/sm.guard\";\nimport { LayoutComponent } from \"./layout/layout.component\";\nimport { NavigationComponent } from \"./layout/navigation.component\";\nimport { OverviewModule } from \"./overview/overview.module\";\nimport { ProjectsModule } from \"./projects/projects.module\";\nimport { SecretsModule } from \"./secrets/secrets.module\";\nimport { ServiceAccountsModule } from \"./service-accounts/service-accounts.module\";\nimport { SettingsModule } from \"./settings/settings.module\";\nimport { OrgSuspendedComponent } from \"./shared/org-suspended.component\";\nimport { TrashModule } from \"./trash/trash.module\";\n\nconst routes: Routes = [\n  buildFlaggedRoute(\"secretsManager\", {\n    path: \"\",\n    children: [\n      {\n        path: \"\",\n        canActivate: [canActivateSM],\n        pathMatch: \"full\",\n        children: [],\n      },\n      {\n        path: \":organizationId\",\n        component: LayoutComponent,\n        canActivate: [AuthGuard],\n        children: [\n          {\n            path: \"\",\n            component: NavigationComponent,\n            outlet: \"sidebar\",\n          },\n          {\n            path: \"\",\n            canActivate: [organizationEnabledGuard],\n            children: [\n              {\n                path: \"secrets\",\n                loadChildren: () => SecretsModule,\n                data: {\n                  titleId: \"secrets\",\n                },\n              },\n              {\n                path: \"projects\",\n                loadChildren: () => ProjectsModule,\n                data: {\n                  titleId: \"projects\",\n                },\n              },\n              {\n                path: \"service-accounts\",\n                loadChildren: () => ServiceAccountsModule,\n                data: {\n                  titleId: \"serviceAccounts\",\n                },\n              },\n              {\n                path: \"trash\",\n                loadChildren: () => TrashModule,\n                data: {\n                  titleId: \"trash\",\n                },\n              },\n              {\n                path: \"settings\",\n                loadChildren: () => SettingsModule,\n              },\n              {\n                path: \"\",\n                loadChildren: () => OverviewModule,\n                pathMatch: \"full\",\n              },\n            ],\n          },\n          {\n            path: \"organization-suspended\",\n            component: OrgSuspendedComponent,\n          },\n        ],\n      },\n    ],\n  }),\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsManagerRoutingModule {}\n","import { inject } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  createUrlTreeFromSnapshot,\n  RouterStateSnapshot,\n} from \"@angular/router\";\n\nimport { AuthGuard } from \"@bitwarden/angular/auth/guards\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\n\n/**\n * Redirects from root `/sm` to first organization with access to SM\n */\nexport const canActivateSM: CanActivateFn = async (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n) => {\n  const syncService = inject(SyncService);\n  const authService = inject(AuthService);\n  const orgService = inject(OrganizationService);\n  const authGuard = inject(AuthGuard);\n\n  /** Workaround to avoid service initialization race condition. */\n  if ((await syncService.getLastSync()) == null) {\n    await syncService.fullSync(false);\n  }\n\n  if ((await authService.getAuthStatus()) !== AuthenticationStatus.Unlocked) {\n    return authGuard.canActivate(route, state);\n  }\n\n  const orgs = await orgService.getAll();\n  const smOrg = orgs.find((o) => o.canAccessSecretsManager);\n  if (smOrg) {\n    return createUrlTreeFromSnapshot(route, [\"/sm\", smOrg.id]);\n  }\n  return createUrlTreeFromSnapshot(route, [\"/vault\"]);\n};\n","import { inject } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivateFn, createUrlTreeFromSnapshot } from \"@angular/router\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\n\n/**\n * Redirects from root `/sm` to first organization with access to SM\n */\nexport const organizationEnabledGuard: CanActivateFn = async (route: ActivatedRouteSnapshot) => {\n  const syncService = inject(SyncService);\n  const orgService = inject(OrganizationService);\n\n  /** Workaround to avoid service initialization race condition. */\n  if ((await syncService.getLastSync()) == null) {\n    await syncService.fullSync(false);\n  }\n\n  const org = orgService.get(route.params.organizationId);\n  if (org == null || !org.canAccessSecretsManager) {\n    return createUrlTreeFromSnapshot(route, [\"/\"]);\n  }\n\n  if (!org.enabled) {\n    return createUrlTreeFromSnapshot(route, [\"/sm\", org.id, \"organization-suspended\"]);\n  }\n\n  return true;\n};\n","import { NgModule } from \"@angular/core\";\n\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { LayoutModule } from \"./layout/layout.module\";\nimport { SecretsManagerSharedModule } from \"./shared/sm-shared.module\";\nimport { SecretsManagerRoutingModule } from \"./sm-routing.module\";\n\n@NgModule({\n  imports: [SharedModule, SecretsManagerSharedModule, SecretsManagerRoutingModule, LayoutModule],\n})\nexport class SecretsManagerModule {}\n","<div [ngClass]=\"outerBarStyles\">\n  <div\n    [ngClass]=\"innerBarStyles\"\n    role=\"progressbar\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n    attr.aria-valuenow=\"{{ barWidth }}\"\n    [ngStyle]=\"{ width: barWidth + '%' }\"\n  >\n    <div\n      *ngIf=\"displayText\"\n      class=\"tw-flex tw-h-full tw-flex-wrap tw-items-center tw-overflow-hidden\"\n    >\n      <!-- If text is too long to fit, wrap it below to hide -->\n      <div class=\"tw-h-full\">&nbsp;</div>\n      <div class=\"tw-pr-1\">{{ textContent }}</div>\n    </div>\n  </div>\n</div>\n","import { Component, Input } from \"@angular/core\";\n\ntype SizeTypes = \"small\" | \"default\" | \"large\";\ntype BackgroundTypes = \"danger\" | \"primary\" | \"success\" | \"warning\";\n\nconst SizeClasses: Record<SizeTypes, string[]> = {\n  small: [\"tw-h-1\"],\n  default: [\"tw-h-4\"],\n  large: [\"tw-h-6\"],\n};\n\nconst BackgroundClasses: Record<BackgroundTypes, string[]> = {\n  danger: [\"tw-bg-danger-500\"],\n  primary: [\"tw-bg-primary-500\"],\n  success: [\"tw-bg-success-500\"],\n  warning: [\"tw-bg-warning-500\"],\n};\n\n@Component({\n  selector: \"bit-progress\",\n  templateUrl: \"./progress.component.html\",\n})\nexport class ProgressComponent {\n  @Input() barWidth = 0;\n  @Input() bgColor: BackgroundTypes = \"primary\";\n  @Input() showText = true;\n  @Input() size: SizeTypes = \"default\";\n  @Input() text?: string;\n\n  get displayText() {\n    return this.showText && this.size !== \"small\";\n  }\n\n  get outerBarStyles() {\n    return [\"tw-overflow-hidden\", \"tw-rounded\", \"tw-bg-secondary-100\"].concat(\n      SizeClasses[this.size],\n    );\n  }\n\n  get innerBarStyles() {\n    return [\n      \"tw-flex\",\n      \"tw-justify-center\",\n      \"tw-items-center\",\n      \"tw-whitespace-nowrap\",\n      \"tw-text-xs\",\n      \"tw-font-semibold\",\n      \"tw-text-contrast\",\n      \"tw-transition-all\",\n    ]\n      .concat(SizeClasses[this.size])\n      .concat(BackgroundClasses[this.bgColor]);\n  }\n\n  get textContent() {\n    return this.text || this.barWidth + \"%\";\n  }\n}\n"],"names":["NavigationModule","LayoutComponent","variant","LayoutModule","HeaderModule","D","SecretsManagerSharedModule","ngOnInit","document","body","classList","remove","NavBaseComponent","treeDepth","hideActiveStyles","mainContentClicked","setActive","NavItemComponent","_active","rlaOptions","paths","queryParams","fragment","matrixParams","focusVisibleWithin$","BehaviorSubject","fvwStyles$","this","pipe","map","value","isActive","showActiveStyles","exactMatch","val","onFocusIn","target","next","matches","onFocusOut","toggle","NavGroupComponent","contentId","Math","random","toString","substring","open","openChange","event","stopPropagation","emit","initNestedStyles","nestedGroups","nestedItems","forEach","navGroupOrItem","ngAfterContentInit","NavDividerComponent","OrgSwitcherComponent","constructor","route","organizationService","organizations$","orgs","filter","org","sort","a","b","name","localeCompare","enabled","activeOrganization$","combineLatest","paramMap","params","find","id","get","hideNewButton","NavigationComponent","logo","orgFilter","canAccessSecretsManager","isAdmin$","organizationId","isAdmin","OnboardingModule","BulkOperationStatus","BulkStatusDialogComponent","dialogRef","data","title","subTitle","columnTitle","message","details","length","close","Error","ProjectListView","ProjectView","ProjectRequest","ProjectListItemResponse","response","super","getResponseProperty","creationDate","revisionDate","read","write","ProjectResponse","ProjectService","cryptoService","apiService","encryptService","_project","Subject","project$","asObservable","getByProjectId","projectId","r","send","projectResponse","createProjectView","getProjects","results","L","createProjectsListView","create","projectView","request","getProjectRequest","project","update","delete","projects","projectIds","element","bulkOperationStatus","errorMessage","error","getOrganizationKey","getOrgKey","orgKey","encrypt","decryptToUtf8","Promise","all","s","projectListView","ProjectDeleteDialogComponent","projectService","i18nService","platformUtilsService","dialogService","formGroup","confirmDelete","matchConfirmationMessageValidator","submit","markAllAsTouched","invalid","dialogContent","t","dialogConfirmationLabel","dialogConfirmationMessage","bulkResponses","openBulkStatusDialog","showToast","bulkStatusResults","control","toLowerCase","confirmationDoesntMatchError","trimValidator","trim","setValue","OperationType","ProjectDialogComponent","router","validators","required","maxLength","updateOn","loading","organizationEnabled","getProjectView","operation","Add","newProject","createProject","navigate","updateProject","Edit","loadData","SecretListView","SecretProjectView","SecretView","SecretRequest","SecretProjectResponse","SecretListItemResponse","k","SecretWithProjectsListResponse","secrets","dr","SecretResponse","note","SecretService","_secret","secret$","getBySecretId","secretId","secretResponse","createSecretView","getSecrets","createSecretsListView","getSecretsByProject","secretView","getSecretRequest","secretIds","secret","getTrashedSecrets","deleteTrashed","restoreTrashed","key","encryptedString","e","push","decryptProjectsMappedToSecrets","projectsMappedToSecretsView","secretListView","p","includes","projectsMappedToSecretView","SecretDeleteDialogComponent","secretService","showSoftDeleteSecretWarning","submitButtonText","openDeleteSecretDialog","SecretDialogComponent","notes","newProjectName","destroy$","addNewProject","newProjectGuid","newGuid","getSecretView","getNewProjectView","createSecret","updateSecret","loadProjects","addNewProjectOptionToProjectsDropDown","removeValidators","updateValueAndValidity","disable","enable","filterByPermission","then","ngOnDestroy","complete","valueChanges","takeUntil","subscribe","dropDownSelected","unshift","addValidators","clearValidators","showSpinner","deleteButtonIsVisible","getSecretListView","lastValueFrom","closed","closeData","undefined","secretListViews","emptyProjects","ServiceAccountView","ServiceAccountSecretsDetailsView","ServiceAccountRequest","ServiceAccountResponse","ServiceAccountSecretsDetailsResponse","accessToSecrets","ServiceAccountService","_serviceAccount","serviceAccount$","getServiceAccounts","includeAccessToSecrets","URLSearchParams","set","createServiceAccountSecretsDetailsViews","getByServiceAccountId","serviceAccountId","createServiceAccountView","serviceAccountView","getServiceAccountRequest","serviceAccounts","ids","serviceAccount","sa","organizationKey","serviceAccountResponse","createServiceAccountSecretsDetailsView","view","serviceAccountResponses","ServiceAccountDialogComponent","serviceAccountService","getServiceAccountView","serviceAccountMessage","patchValue","newSecretEvent","editSecretEvent","copySecretNameEvent","copySecretValueEvent","restoreSecretsEvent","deleteSecretsEvent","$event","selection","copySecretUuidEvent","toggleAll","bulkRestoreSecrets","SecretsListComponent","_secrets","clear","dataSource","search","onSecretCheckedEvent","sortProjects","aProjects","bProjects","changed","_","selected","isAllSelected","filteredData","select","bulkDeleteSecrets","isSelected","static","copyToClipboard","copyToClipboardAsync","text","isSafari","navigator","clipboard","ClipboardItem","lock","logout","WebHeaderComponent","stateService","vaultTimeoutSettingsService","messagingService","hostname","location","routeData$","titleId","selfHosted","isSelfHost","account$","activeAccount$","accounts$","activeAccount","accounts","profile","canLock$","availableVaultTimeoutActions$","actions","Lock","NewMenuComponent","openSecretDialog","openProjectDialog","openServiceAccountDialog","newProjectEvent","editProjectEvent","deleteProject","ProjectsListComponent","_projects","deleteProjectEvent","hasWriteAccessOnSelected$","selectedHasWriteAccess","bulkDeleteProjects","some","OnboardingTaskComponent","completed","icon","handleClick","ev","OnboardingComponent","dismiss","visible","amountCompleted","tasks","task","barWidth","SectionComponent","openNewProjectDialog","hideOnboarding","openEditProject","openDeleteProjectDialog","openDeleteSecret","openNewSecretDialog","openEditSecret","copySecretName","copySecretValue","copySecretUuid","OverviewComponent","tableSize","showOnboarding","orgId$","distinctUntilChanged","orgId","organizationName","userIsAdmin","projects$","startWith","switchMap","share","secrets$","serviceAccounts$","view$","latestProjects","getRecentItems","latestSecrets","allProjects","allSecrets","saveCompletedTasks","importSecrets","createServiceAccount","take","Object","values","items","Date","getTime","slice","orgTasks","prevTasks","getSMOnboardingTasks","newlyCompletedOrgTasks","fromEntries","entries","_k","v","nextOrgTasks","setSMOnboardingTasks","routes","path","component","OverviewRoutingModule","forChild","OverviewModule","ApItemEnum","ApPermissionEnum","ApItemEnumUtil","type","User","Group","ServiceAccount","Project","ApPermissionEnumUtil","CanReadWrite","CanRead","permission","AccessPolicySelectorService","showAccessRemovalWarning","selectedPoliciesValues","organization","isOwner","selectedUserReadWritePolicy","currentUser","selectedGroupReadWritePolicies","currentUserInGroup","isAccessRemoval","current","isAnyCurrentIdNotInSelectedIds","currentIds","x","selectedIds","every","BaseAccessPolicyView","UserProjectAccessPolicyView","UserServiceAccountAccessPolicyView","GroupProjectAccessPolicyView","GroupServiceAccountAccessPolicyView","ServiceAccountProjectAccessPolicyView","ProjectAccessPoliciesView","ProjectPeopleAccessPoliciesView","ServiceAccountPeopleAccessPoliciesView","convertToAccessPolicyItemViews","accessPolicies","userAccessPolicies","policy","itemIcon","organizationUserId","accessPolicyId","labelName","organizationUserName","listName","toApPermissionEnum","userId","groupAccessPolicies","groupId","groupName","convertPotentialGranteesToApItemViewType","grantees","granteeView","isNullOrWhitespace","email","PotentialGranteeView","AccessPoliciesCreateRequest","PeopleAccessPoliciesRequest","BaseAccessPolicyResponse","UserProjectAccessPolicyResponse","grantedProjectId","UserServiceAccountAccessPolicyResponse","grantedServiceAccountId","GroupProjectAccessPolicyResponse","GroupServiceAccountAccessPolicyResponse","ServiceAccountProjectAccessPolicyResponse","serviceAccountName","grantedProjectName","ProjectAccessPoliciesResponse","serviceAccountAccessPolicies","AccessPolicyUpdateRequest","AccessPolicyRequest","GrantedPolicyRequest","PotentialGranteeResponse","ProjectPeopleAccessPoliciesResponse","ServiceAccountPeopleAccessPoliciesResponse","AccessPolicyService","_projectAccessPolicyChanges$","_serviceAccountGrantedPolicyChanges$","projectAccessPolicyChanges$","serviceAccountGrantedPolicyChanges$","refreshProjectAccessPolicyChanges","getGrantedPolicies","createServiceAccountProjectAccessPolicyViews","createGrantedPolicies","policies","getGrantedPoliciesCreateRequest","views","getProjectAccessPolicies","createProjectAccessPoliciesView","getProjectPeopleAccessPolicies","createProjectPeopleAccessPoliciesView","putProjectPeopleAccessPolicies","peoplePoliciesView","getPeopleAccessPoliciesRequest","getServiceAccountPeopleAccessPolicies","createServiceAccountPeopleAccessPoliciesView","putServiceAccountPeopleAccessPolicies","createProjectAccessPolicies","projectAccessPoliciesView","getAccessPoliciesCreateRequest","deleteAccessPolicy","updateAccessPolicy","baseAccessPolicyView","payload","projectAccessPoliciesResponse","ap","createUserProjectAccessPolicyView","createGroupProjectAccessPolicyView","createServiceAccountProjectAccessPolicyView","peopleAccessPoliciesResponse","createUserServiceAccountAccessPolicyView","createGroupServiceAccountAccessPolicyView","createRequest","userAccessPolicyRequests","getAccessPolicyRequest","groupAccessPolicyRequests","serviceAccountAccessPolicyRequests","createBaseAccessPolicyView","getPeoplePotentialGrantees","createPotentialGranteeViews","getServiceAccountsPotentialGrantees","getProjectsPotentialGrantees","granteeId","grantedId","responses","handleBlur","selectItems","selectionList","addButton","AccessPolicySelectorComponent","allItems","formArray","getRawValue","populateItems","m","formBuilder","item","initPermission","staticPermission","initialPermission","permissionControl","group","_itemComparator","bind","multiSelectFormGroup","multiSelect","permissionList","perm","labelId","registerOnChange","fn","notifyOnChange","registerOnTouched","notifyOnTouch","setDisabledState","isDisabled","disabled","writeValue","selectedItems","pauseChangeNotification","deselectAll","Array","isArray","selectItem","i","reset","collator","compare","provide","useExisting","multi","ProjectPeopleComponent","changeDetectorRef","validationService","accessPolicyService","accessPolicySelectorService","currentAccessPolicies$","catchError","E","potentialGrantees$","showWarning","setSelected","currentAccessPolicies","projectPeopleView","selectedPolicyValues","filtered","policyView","toRead","toWrite","convertToProjectPeopleAccessPoliciesView","peoplePoliciesViews","showError","potentialGrantees","policiesToSelect","detectChanges","openSimpleDialog","content","acceptButtonText","cancelButtonText","ProjectSecretsComponent","currentProjectEdited","combineLatestWith","AccessSelectorComponent","rows","sorted","userIcon","rows$","onCreateAccessPolicies","onDeleteAccessPolicy","onUpdateAccessPolicy","selectItems$","getPotentialGrantees","g","row","groupIcon","serviceAccountIcon","projectIcon","tap","firstValueFrom","granteeType","ProjectServiceAccountsComponent","handleUpdateAccessPolicy","getBaseAccessPolicyView","handleCreateAccessPolicies","getAccessItemType","handleDeleteAccessPolicy","openEditDialog","ProjectComponent","BulkConfirmationResult","BulkConfirmationDialogComponent","bulkConfirmationResult","ProjectsComponent","readOnlyProjects","writeProjects","getBulkConfirmationDetails","Continue","description","children","pathMatch","redirectTo","ProjectsRoutingModule","ProjectsModule","SecretsComponent","snapshot","SecretsRoutingModule","SecretsModule","AccessTokenRequest","RevokeAccessTokensRequest","AccessTokenCreationResponse","clientSecret","expireAt","AccessTokenResponse","scopes","AccessTokenView","AccessService","cryptoFunctionService","_accessTokenVersion","_accessToken","accessToken$","getAccessTokens","createAccessTokenViews","createAccessToken","accessTokenView","keyMaterial","aesGenerateKey","hkdf","encryptionKey","createAccessTokenRequest","result","b64Key","fromBufferToB64","revokeAccessTokens","accessTokenIds","accessTokenRequest","encryptedPayload","JSON","stringify","keyB64","accessTokenResponses","AccessTokenDialogComponent","disableClose","accessToken","copyAccessToken","ExpirationOptionsComponent","touched","form","datePipe","currentDate","expires","expireDateTime","expiresInFutureValidator","_onChange","_value","onTouched","getExpiresDate","validate","transform","setDate","getDate","Number","ValidationError","AccessTokenCreateDialogComponent","accessService","expirationDateControl","expirationDayOptions","openAccessTokenDialog","expirationDate","newAccessTokenEvent","revokeAccessTokensEvent","AccessListComponent","tokens","_tokens","revokeSelected","AccessTokenComponent","accessTokens$","revoke","verifyUser","openNewAccessTokenDialog","ref","confirmDescription","confirmButtonText","modalTitle","ServiceAccountEventLogApiService","getEvents","start","end","token","addEventParameters","base","indexOf","loadEvents","ServiceAccountEventsComponent","eventService","serviceAccountEventsApiService","exportService","logService","fileDownloadService","exportFileName","load","loaded","requestEvents","startDate","endDate","continuationToken","getUserName","exportEvents","ServiceAccountPeopleComponent","isFormInvalid","handleAccessRemovalWarning","updateServiceAccountPeopleAccessPolicies","handleAccessTokenAvailableWarning","selectedPolicies","serviceAccountPeopleView","convertToServiceAccountPeopleAccessPoliciesView","showAccessTokenStillAvailableWarning","ServiceAccountProjectsComponent","serviceAccountProjectAccessPolicyView","ServiceAccountComponent","onChange$","ServiceAccountDeleteDialogComponent","errors","newServiceAccountEvent","editServiceAccountEvent","ServiceAccountsListComponent","_serviceAccounts","deleteServiceAccountsEvent","onServiceAccountCheckedEvent","bulkDeleteServiceAccounts","ServiceAccountsComponent","openNewServiceAccountDialog","openEditServiceAccountDialog","openDeleteDialog","canActivate","ServiceAccountsRoutingModule","ServiceAccountsModule","SecretsManagerImportError","SecretsManagerImportRequest","SecretsManagerImportedProjectRequest","SecretsManagerImportedSecretRequest","SecretsManagerExportedProjectResponse","SecretsManagerExportedSecretResponse","SecretsManagerExportResponse","SecretsManagerExport","SecretsManagerExportProject","SecretsManagerExportSecret","SecretsManagerPortingApiService","export","decryptExport","import","fileContents","requestObject","parse","requestBody","encryptImport","errorResponse","handleServerError","importData","encryptedImport","exportData","decryptedExport","importResult","validationErrors","lines","index","itemType","match","SecretsManagerPortingService","getFileName","prefix","extension","locale","locale$","dateString","SecretsManagerExportComponent","smPortingService","secretsManagerApiService","exportFormats","fileExtension","format","doExport","orgName","downloadFile","fileName","download","blobData","blobOptions","SecretsManagerImportErrorDialogComponent","errorLines","SecretsManagerImportComponent","secretsManagerPortingApiService","pastedContents","fileElement","getElementById","importContents","getImportContents","openImportErrorDialog","clearForm","files","getFileContents","setSelectedFile","fileInputEl","file","selectedFile","resolve","reject","reader","FileReader","readAsText","onload","evt","onerror","organizationPermissions","SettingsRoutingModule","SettingsModule","NoAccess","OrgSuspendedComponent","organizationName$","SecretHardDeleteDialogComponent","SecretRestoreDialogComponent","restore","TrashComponent","openRestoreSecret","TrashRoutingModule","TrashModule","state","syncService","authService","orgService","authGuard","getLastSync","fullSync","getAuthStatus","Unlocked","smOrg","getAll","o","outlet","loadChildren","SecretsManagerRoutingModule","SecretsManagerModule","SizeClasses","small","default","large","BackgroundClasses","danger","primary","success","warning","ProgressComponent","bgColor","showText","size","displayText","outerBarStyles","concat","innerBarStyles","textContent"],"sourceRoot":""}