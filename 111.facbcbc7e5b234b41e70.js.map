{"version":3,"file":"111.facbcbc7e5b234b41e70.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/common/src/tools/enums/encrypted-export-type.enum.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/vault-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/vault-export/export.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.ts"],"sourcesContent":["export enum EncryptedExportType {\n  AccountEncrypted = 0,\n  FileEncrypted = 1,\n}\n","import { Directive, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { concat, map, merge, Observable, startWith, Subject, takeUntil } from \"rxjs\";\n\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport {\n  OrganizationService,\n  canAccessImportExport,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { EncryptedExportType } from \"@bitwarden/common/tools/enums/encrypted-export-type.enum\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { PasswordStrengthComponent } from \"../../password-strength/password-strength.component\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n  @ViewChild(PasswordStrengthComponent) passwordStrengthComponent: PasswordStrengthComponent;\n\n  filePasswordValue: string = null;\n  formPromise: Promise<string>;\n  private _disabledByPolicy = false;\n  protected organizationId: string = null;\n  organizations$: Observable<Organization[]>;\n\n  protected get disabledByPolicy(): boolean {\n    return this._disabledByPolicy;\n  }\n\n  exportForm = this.formBuilder.group({\n    vaultSelector: [\n      \"myVault\",\n      {\n        nonNullable: true,\n        validators: [Validators.required],\n      },\n    ],\n    format: [\"json\", Validators.required],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: VaultExportServiceAbstraction,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService,\n    protected dialogService: DialogService,\n    protected organizationService: OrganizationService\n  ) {}\n\n  async ngOnInit() {\n    this.organizations$ = concat(\n      this.organizationService.memberOrganizations$.pipe(\n        canAccessImportExport(this.i18nService),\n        map((orgs) => orgs.sort(Utils.getSortFunction(this.i18nService, \"name\")))\n      )\n    );\n\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._disabledByPolicy = policyAppliesToActiveUser;\n        if (this.disabledByPolicy) {\n          this.exportForm.disable();\n        }\n      });\n\n    if (this.organizationId) {\n      this.exportForm.controls.vaultSelector.patchValue(this.organizationId);\n      this.exportForm.controls.vaultSelector.disable();\n    } else {\n      this.exportForm.controls.vaultSelector.valueChanges\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((value) => {\n          this.organizationId = value != \"myVault\" ? value : undefined;\n        });\n\n      this.exportForm.controls.vaultSelector.setValue(\"myVault\");\n    }\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content:\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \" \" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        acceptButtonText: { key: \"exportVault\" },\n        type: \"warning\",\n      });\n    } else {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content: { key: \"exportWarningDesc\" },\n        acceptButtonText: { key: \"exportVault\" },\n        type: \"warning\",\n      });\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <h1 bitTypography=\"h1\">{{ \"exportVault\" | i18n }}</h1>\n\n  <bit-callout type=\"danger\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </bit-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <bit-form-field *ngIf=\"flexibleCollectionsEnabled$ | async\">\n    <bit-label>{{ \"exportFrom\" | i18n }}</bit-label>\n    <bit-select formControlName=\"vaultSelector\">\n      <bit-option [label]=\"'myVault' | i18n\" value=\"myVault\" icon=\"bwi-user\" />\n      <bit-option\n        *ngFor=\"let o of organizations$ | async\"\n        [value]=\"o.id\"\n        [label]=\"o.name\"\n        icon=\"bwi-business\"\n      />\n    </bit-select>\n  </bit-form-field>\n\n  <bit-form-field>\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <bit-select formControlName=\"format\">\n      <bit-option *ngFor=\"let f of formatOptions\" [value]=\"f.value\" [label]=\"f.name\" />\n    </bit-select>\n  </bit-form-field>\n\n  <ng-container *ngIf=\"format === 'encrypted_json'\">\n    <bit-radio-group formControlName=\"fileEncryptionType\" aria-label=\"exportTypeHeading\">\n      <bit-label>{{ \"exportTypeHeading\" | i18n }}</bit-label>\n\n      <bit-radio-button\n        id=\"AccountEncrypted\"\n        name=\"fileEncryptionType\"\n        class=\"tw-block\"\n        [value]=\"encryptedExportType.AccountEncrypted\"\n        checked=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n      >\n        <bit-label>{{ \"accountRestricted\" | i18n }}</bit-label>\n        <bit-hint>{{ \"accountRestrictedOptionDescription\" | i18n }}</bit-hint>\n      </bit-radio-button>\n\n      <bit-radio-button\n        id=\"FileEncrypted\"\n        name=\"fileEncryptionType\"\n        class=\"tw-block\"\n        [value]=\"encryptedExportType.FileEncrypted\"\n        checked=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n      >\n        <bit-label>{{ \"passwordProtected\" | i18n }}</bit-label>\n        <bit-hint>{{ \"passwordProtectedOptionDescription\" | i18n }}</bit-hint>\n      </bit-radio-button>\n    </bit-radio-group>\n\n    <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n      <div class=\"tw-mb-3\">\n        <bit-form-field>\n          <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n          <input\n            bitInput\n            type=\"password\"\n            id=\"filePassword\"\n            formControlName=\"filePassword\"\n            name=\"password\"\n          />\n          <button\n            type=\"button\"\n            bitSuffix\n            bitIconButton\n            bitPasswordInputToggle\n            [(toggled)]=\"showFilePassword\"\n          ></button>\n          <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n        </bit-form-field>\n        <app-password-strength [password]=\"filePassword\" [showText]=\"true\"> </app-password-strength>\n      </div>\n      <bit-form-field>\n        <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n        <input\n          bitInput\n          type=\"password\"\n          id=\"confirmFilePassword\"\n          formControlName=\"confirmFilePassword\"\n          name=\"confirmFilePassword\"\n        />\n        <button\n          type=\"button\"\n          bitSuffix\n          bitIconButton\n          bitPasswordInputToggle\n          [(toggled)]=\"showFilePassword\"\n        ></button>\n      </bit-form-field>\n    </ng-container>\n  </ng-container>\n\n  <button\n    bitButton\n    type=\"submit\"\n    buttonType=\"primary\"\n    [loading]=\"form.loading\"\n    [disabled]=\"disabledByPolicy\"\n  >\n    {{ \"confirmFormat\" | i18n }}\n  </button>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/tools/export/components/export.component\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config.service.abstraction\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { EncryptedExportType } from \"@bitwarden/common/tools/enums/encrypted-export-type.enum\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { openUserVerificationPrompt } from \"../../auth/shared/components/user-verification\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  protected flexibleCollectionsEnabled$ = this.configService.getFeatureFlag$(\n    FeatureFlag.FlexibleCollections,\n    false\n  );\n\n  constructor(\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: VaultExportServiceAbstraction,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    dialogService: DialogService,\n    organizationService: OrganizationService,\n    protected configService: ConfigServiceAbstraction\n  ) {\n    super(\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService,\n      dialogService,\n      organizationService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = openUserVerificationPrompt(this.dialogService, {\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return firstValueFrom(ref.closed);\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  private _organizationId: string;\n\n  get organizationId(): string {\n    return this._organizationId;\n  }\n\n  @Input() set organizationId(value: string) {\n    this._organizationId = value;\n    this.getScopeMessage(this._organizationId);\n  }\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n\n    await this.getScopeMessage(this.organizationId);\n    this.show = true;\n  }\n\n  private async getScopeMessage(organizationId: string) {\n    this.scopeConfig =\n      organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDesc\",\n            scopeIdentifier: this.organizationService.get(organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingIndividualVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n  }\n}\n"],"names":["EncryptedExportType","disabledByPolicy","this","_disabledByPolicy","constructor","i18nService","platformUtilsService","exportService","eventCollectionService","policyService","logService","userVerificationService","formBuilder","fileDownloadService","dialogService","organizationService","onSaved","filePasswordValue","organizationId","exportForm","group","vaultSelector","nonNullable","validators","required","format","secret","filePassword","confirmFilePassword","fileEncryptionType","AccountEncrypted","formatOptions","name","value","destroy$","Subject","ngOnInit","organizations$","concat","memberOrganizations$","pipe","map","orgs","sort","getSortFunction","policyAppliesToActiveUser$","DisablePersonalVaultExport","takeUntil","subscribe","policyAppliesToActiveUser","disable","controls","patchValue","valueChanges","undefined","setValue","merge","get","startWith","adjustValidators","ngOnDestroy","next","encryptedFormat","doExport","formPromise","getExportData","data","downloadFile","saved","collectEvent","clearValidators","e","error","submit","showToast","t","warningDialog","verifyUser","message","openSimpleDialog","title","key","content","acceptButtonText","type","emit","FileEncrypted","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","User_ClientExportedVault","reset","enable","csv","fileName","download","blobData","blobOptions","ExportComponent","configService","super","encryptedExportType","flexibleCollectionsEnabled$","getFeatureFlag$","FlexibleCollections","isFileEncryptedExport","markAllAsTouched","valid","confirmDescription","isAccountEncryptedExport","ref","confirmButtonText","modalTitle","firstValueFrom","closed","ExportScopeCalloutComponent","_organizationId","getScopeMessage","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail"],"sourceRoot":""}