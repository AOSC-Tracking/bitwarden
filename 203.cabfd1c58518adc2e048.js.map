{"version":3,"file":"203.cabfd1c58518adc2e048.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/validators/comma-separated-emails.validator.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/validators/free-org-inv-limit-reached.validator.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/nested-checkbox.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/nested-checkbox.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/member-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/member-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/member-dialog/member-dialog.module.ts","webpack://@bitwarden/web-vault/../../libs/common/src/abstractions/organization-user/requests/organization-user-confirm.request.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/core/views/organization-user.view.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-enable-sm-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-enable-sm-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-restore-revoke.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/bulk/bulk-restore-revoke.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/reset-password.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/components/reset-password.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/people.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/people.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/members-routing.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/members/members.module.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, Validators } from \"@angular/forms\";\n\nfunction validateEmails(emails: string) {\n  return (\n    emails\n      .split(\",\")\n      .map((email) => Validators.email(<AbstractControl>{ value: email.trim() }))\n      .find((_) => _ !== null) === undefined\n  );\n}\n\nexport function commaSeparatedEmails(control: AbstractControl): ValidationErrors | null {\n  if (control.value === \"\" || !control.value || validateEmails(control.value)) {\n    return null;\n  }\n  return { multipleEmails: { message: \"multipleInputEmails\" } };\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\n\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ProductType } from \"@bitwarden/common/enums\";\n\n/**\n * Checks if the limit of free organization seats has been reached when adding new users\n * @param organization An object representing the organization\n * @param allOrganizationUserEmails An array of strings with existing user email addresses\n * @param errorMessage A localized string to display if validation fails\n * @returns A function that validates an `AbstractControl` and returns `ValidationErrors` or `null`\n */\nexport function freeOrgSeatLimitReachedValidator(\n  organization: Organization,\n  allOrganizationUserEmails: string[],\n  errorMessage: string\n): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (control.value === \"\" || !control.value) {\n      return null;\n    }\n\n    const newEmailsToAdd = control.value\n      .split(\",\")\n      .filter(\n        (newEmailToAdd: string) =>\n          newEmailToAdd &&\n          !allOrganizationUserEmails.some((existingEmail) => existingEmail === newEmailToAdd)\n      );\n\n    return organization.planProductType === ProductType.Free &&\n      allOrganizationUserEmails.length + newEmailsToAdd.length > organization.seats\n      ? { freePlanLimitReached: { message: errorMessage } }\n      : null;\n  };\n}\n","<div [formGroup]=\"checkboxes\">\n  <input\n    type=\"checkbox\"\n    [name]=\"pascalize(parentId)\"\n    [id]=\"parentId\"\n    [formControlName]=\"parentId\"\n    [indeterminate]=\"parentIndeterminate\"\n  />\n  <label class=\"!tw-font-normal\" [for]=\"parentId\">\n    {{ parentId | i18n }}\n  </label>\n  <div class=\"tw-ml-6\">\n    <ng-container *ngFor=\"let c of checkboxes.controls | keyvalue; trackBy: key\">\n      <div class=\"\" *ngIf=\"c.key != parentId\">\n        <input\n          class=\"\"\n          type=\"checkbox\"\n          [name]=\"pascalize(c.key)\"\n          [id]=\"c.key\"\n          [formControl]=\"c.value\"\n          (change)=\"onChildCheck()\"\n        />\n        <label class=\"!tw-font-normal\" [for]=\"c.key\">\n          {{ c.key | i18n }}\n        </label>\n      </div>\n    </ng-container>\n  </div>\n</div>\n","import { KeyValue } from \"@angular/common\";\nimport { Component, EventEmitter, Input, Output, OnInit, OnDestroy } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\n@Component({\n  selector: \"app-nested-checkbox\",\n  templateUrl: \"nested-checkbox.component.html\",\n})\nexport class NestedCheckboxComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  @Input() parentId: string;\n  @Input() checkboxes: FormGroup<Record<string, FormControl<boolean>>>;\n  @Output() onSavedUser = new EventEmitter();\n  @Output() onDeletedUser = new EventEmitter();\n\n  get parentIndeterminate() {\n    return (\n      this.children.some(([key, control]) => control.value == true) &&\n      !this.children.every(([key, control]) => control.value == true)\n    );\n  }\n\n  ngOnInit(): void {\n    this.checkboxes.controls[this.parentId].valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        Object.values(this.checkboxes.controls).forEach((control) =>\n          control.setValue(value, { emitEvent: false })\n        );\n      });\n  }\n\n  private get parentCheckbox() {\n    return this.checkboxes.controls[this.parentId];\n  }\n\n  get children() {\n    return Object.entries(this.checkboxes.controls).filter(([key, value]) => key != this.parentId);\n  }\n\n  protected onChildCheck() {\n    const parentChecked = this.children.every(([key, value]) => value.value == true);\n    this.parentCheckbox.setValue(parentChecked, { emitEvent: false });\n  }\n\n  protected key(index: number, item: KeyValue<string, FormControl<boolean>>) {\n    return item.key;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  pascalize(s: string) {\n    return Utils.camelToPascalCase(s);\n  }\n}\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { combineLatest, of, shareReplay, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport {\n  OrganizationUserStatusType,\n  OrganizationUserType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { PermissionsApi } from \"@bitwarden/common/admin-console/models/api/permissions.api\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { flagEnabled } from \"../../../../../../utils/flags\";\nimport { CollectionAdminService } from \"../../../../../vault/core/collection-admin.service\";\nimport {\n  CollectionAccessSelectionView,\n  GroupService,\n  GroupView,\n  OrganizationUserAdminView,\n  UserAdminService,\n} from \"../../../core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  convertToPermission,\n  convertToSelectionView,\n  PermissionMode,\n} from \"../../../shared/components/access-selector\";\n\nimport { commaSeparatedEmails } from \"./validators/comma-separated-emails.validator\";\nimport { freeOrgSeatLimitReachedValidator } from \"./validators/free-org-inv-limit-reached.validator\";\n\nexport enum MemberDialogTab {\n  Role = 0,\n  Groups = 1,\n  Collections = 2,\n}\n\nexport interface MemberDialogParams {\n  name: string;\n  organizationId: string;\n  organizationUserId: string;\n  allOrganizationUserEmails: string[];\n  usesKeyConnector: boolean;\n  initialTab?: MemberDialogTab;\n}\n\nexport enum MemberDialogResult {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n  Deleted = \"deleted\",\n  Revoked = \"revoked\",\n  Restored = \"restored\",\n}\n\n@Component({\n  templateUrl: \"member-dialog.component.html\",\n})\nexport class MemberDialogComponent implements OnInit, OnDestroy {\n  loading = true;\n  editMode = false;\n  isRevoked = false;\n  title: string;\n  access: \"all\" | \"selected\" = \"selected\";\n  collections: CollectionView[] = [];\n  organizationUserType = OrganizationUserType;\n  canUseCustomPermissions: boolean;\n  PermissionMode = PermissionMode;\n  canUseSecretsManager: boolean;\n  showNoMasterPasswordWarning = false;\n\n  protected organization: Organization;\n  protected collectionAccessItems: AccessItemView[] = [];\n  protected groupAccessItems: AccessItemView[] = [];\n  protected tabIndex: MemberDialogTab;\n  protected formGroup = this.formBuilder.group({\n    emails: [\"\", { updateOn: \"blur\" }],\n    type: OrganizationUserType.User,\n    externalId: this.formBuilder.control({ value: \"\", disabled: true }),\n    accessAllCollections: false,\n    accessSecretsManager: false,\n    access: [[] as AccessItemValue[]],\n    groups: [[] as AccessItemValue[]],\n  });\n\n  protected permissionsGroup = this.formBuilder.group({\n    manageAssignedCollectionsGroup: this.formBuilder.group<Record<string, boolean>>({\n      manageAssignedCollections: false,\n      editAssignedCollections: false,\n      deleteAssignedCollections: false,\n    }),\n    manageAllCollectionsGroup: this.formBuilder.group<Record<string, boolean>>({\n      manageAllCollections: false,\n      createNewCollections: false,\n      editAnyCollection: false,\n      deleteAnyCollection: false,\n    }),\n    accessEventLogs: false,\n    accessImportExport: false,\n    accessReports: false,\n    manageGroups: false,\n    manageSso: false,\n    managePolicies: false,\n    manageUsers: false,\n    manageResetPassword: false,\n  });\n\n  private destroy$ = new Subject<void>();\n\n  get customUserTypeSelected(): boolean {\n    return this.formGroup.value.type === OrganizationUserType.Custom;\n  }\n\n  get accessAllCollections(): boolean {\n    return this.formGroup.value.accessAllCollections;\n  }\n\n  constructor(\n    @Inject(DIALOG_DATA) protected params: MemberDialogParams,\n    private dialogRef: DialogRef<MemberDialogResult>,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private organizationService: OrganizationService,\n    private formBuilder: FormBuilder,\n    // TODO: We should really look into consolidating naming conventions for these services\n    private collectionAdminService: CollectionAdminService,\n    private groupService: GroupService,\n    private userService: UserAdminService,\n    private organizationUserService: OrganizationUserService,\n    private dialogService: DialogService\n  ) {}\n\n  async ngOnInit() {\n    this.editMode = this.params.organizationUserId != null;\n    this.tabIndex = this.params.initialTab ?? MemberDialogTab.Role;\n    this.title = this.i18nService.t(this.editMode ? \"editMember\" : \"inviteMember\");\n\n    const organization$ = of(this.organizationService.get(this.params.organizationId)).pipe(\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n    const groups$ = organization$.pipe(\n      switchMap((organization) => {\n        if (!organization.useGroups) {\n          return of([] as GroupView[]);\n        }\n\n        return this.groupService.getAll(this.params.organizationId);\n      })\n    );\n\n    combineLatest({\n      organization: organization$,\n      collections: this.collectionAdminService.getAll(this.params.organizationId),\n      userDetails: this.params.organizationUserId\n        ? this.userService.get(this.params.organizationId, this.params.organizationUserId)\n        : of(null),\n      groups: groups$,\n    })\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(({ organization, collections, userDetails, groups }) => {\n        this.organization = organization;\n        this.canUseCustomPermissions = organization.useCustomPermissions;\n        this.canUseSecretsManager = organization.useSecretsManager && flagEnabled(\"secretsManager\");\n\n        const emailsControlValidators = [\n          Validators.required,\n          commaSeparatedEmails,\n          freeOrgSeatLimitReachedValidator(\n            this.organization,\n            this.params.allOrganizationUserEmails,\n            this.i18nService.t(\"subscriptionFreePlan\", organization.seats)\n          ),\n        ];\n\n        const emailsControl = this.formGroup.get(\"emails\");\n        emailsControl.setValidators(emailsControlValidators);\n        emailsControl.updateValueAndValidity();\n\n        this.collectionAccessItems = [].concat(\n          collections.map((c) => mapCollectionToAccessItemView(c))\n        );\n\n        this.groupAccessItems = [].concat(\n          groups.map<AccessItemView>((g) => mapGroupToAccessItemView(g))\n        );\n\n        if (this.params.organizationUserId) {\n          if (!userDetails) {\n            throw new Error(\"Could not find user to edit.\");\n          }\n          this.isRevoked = userDetails.status === OrganizationUserStatusType.Revoked;\n          this.showNoMasterPasswordWarning =\n            userDetails.status > OrganizationUserStatusType.Invited &&\n            userDetails.hasMasterPassword === false;\n          const assignedCollectionsPermissions = {\n            editAssignedCollections: userDetails.permissions.editAssignedCollections,\n            deleteAssignedCollections: userDetails.permissions.deleteAssignedCollections,\n            manageAssignedCollections:\n              userDetails.permissions.editAssignedCollections &&\n              userDetails.permissions.deleteAssignedCollections,\n          };\n          const allCollectionsPermissions = {\n            createNewCollections: userDetails.permissions.createNewCollections,\n            editAnyCollection: userDetails.permissions.editAnyCollection,\n            deleteAnyCollection: userDetails.permissions.deleteAnyCollection,\n            manageAllCollections:\n              userDetails.permissions.createNewCollections &&\n              userDetails.permissions.editAnyCollection &&\n              userDetails.permissions.deleteAnyCollection,\n          };\n          if (userDetails.type === OrganizationUserType.Custom) {\n            this.permissionsGroup.patchValue({\n              accessEventLogs: userDetails.permissions.accessEventLogs,\n              accessImportExport: userDetails.permissions.accessImportExport,\n              accessReports: userDetails.permissions.accessReports,\n              manageGroups: userDetails.permissions.manageGroups,\n              manageSso: userDetails.permissions.manageSso,\n              managePolicies: userDetails.permissions.managePolicies,\n              manageUsers: userDetails.permissions.manageUsers,\n              manageResetPassword: userDetails.permissions.manageResetPassword,\n              manageAssignedCollectionsGroup: assignedCollectionsPermissions,\n              manageAllCollectionsGroup: allCollectionsPermissions,\n            });\n          }\n\n          const collectionsFromGroups = groups\n            .filter((group) => userDetails.groups.includes(group.id))\n            .flatMap((group) =>\n              group.collections.map((accessSelection) => {\n                const collection = collections.find((c) => c.id === accessSelection.id);\n                return { group, collection, accessSelection };\n              })\n            );\n\n          this.collectionAccessItems = this.collectionAccessItems.concat(\n            collectionsFromGroups.map(({ collection, accessSelection, group }) =>\n              mapCollectionToAccessItemView(collection, accessSelection, group)\n            )\n          );\n\n          const accessSelections = mapToAccessSelections(userDetails);\n          const groupAccessSelections = mapToGroupAccessSelections(userDetails.groups);\n\n          this.formGroup.removeControl(\"emails\");\n          this.formGroup.patchValue({\n            type: userDetails.type,\n            externalId: userDetails.externalId,\n            accessAllCollections: userDetails.accessAll,\n            access: accessSelections,\n            accessSecretsManager: userDetails.accessSecretsManager,\n            groups: groupAccessSelections,\n          });\n        }\n\n        this.loading = false;\n      });\n  }\n\n  check(c: CollectionView, select?: boolean) {\n    (c as any).checked = select == null ? !(c as any).checked : select;\n    if (!(c as any).checked) {\n      c.readOnly = false;\n    }\n  }\n\n  selectAll(select: boolean) {\n    this.collections.forEach((c) => this.check(c, select));\n  }\n\n  setRequestPermissions(p: PermissionsApi, clearPermissions: boolean): PermissionsApi {\n    if (clearPermissions) {\n      return new PermissionsApi();\n    }\n    const partialPermissions: Partial<PermissionsApi> = {\n      accessEventLogs: this.permissionsGroup.value.accessEventLogs,\n      accessImportExport: this.permissionsGroup.value.accessImportExport,\n      accessReports: this.permissionsGroup.value.accessReports,\n      manageGroups: this.permissionsGroup.value.manageGroups,\n      manageSso: this.permissionsGroup.value.manageSso,\n      managePolicies: this.permissionsGroup.value.managePolicies,\n      manageUsers: this.permissionsGroup.value.manageUsers,\n      manageResetPassword: this.permissionsGroup.value.manageResetPassword,\n      createNewCollections:\n        this.permissionsGroup.value.manageAllCollectionsGroup.createNewCollections,\n      editAnyCollection: this.permissionsGroup.value.manageAllCollectionsGroup.editAnyCollection,\n      deleteAnyCollection:\n        this.permissionsGroup.value.manageAllCollectionsGroup.deleteAnyCollection,\n      editAssignedCollections:\n        this.permissionsGroup.value.manageAssignedCollectionsGroup.editAssignedCollections,\n      deleteAssignedCollections:\n        this.permissionsGroup.value.manageAssignedCollectionsGroup.deleteAssignedCollections,\n    };\n\n    return Object.assign(p, partialPermissions);\n  }\n\n  handleDependentPermissions() {\n    // Manage Password Reset (Account Recovery) must have Manage Users enabled\n    if (\n      this.permissionsGroup.value.manageResetPassword &&\n      !this.permissionsGroup.value.manageUsers\n    ) {\n      this.permissionsGroup.value.manageUsers = true;\n      (document.getElementById(\"manageUsers\") as HTMLInputElement).checked = true;\n      this.platformUtilsService.showToast(\n        \"info\",\n        null,\n        this.i18nService.t(\"accountRecoveryManageUsers\")\n      );\n    }\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      if (this.tabIndex !== MemberDialogTab.Role) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          null,\n          this.i18nService.t(\"fieldOnTabRequiresAttention\", this.i18nService.t(\"role\"))\n        );\n      }\n      return;\n    }\n\n    if (!this.canUseCustomPermissions && this.customUserTypeSelected) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"customNonEnterpriseError\")\n      );\n      return;\n    }\n\n    const userView = new OrganizationUserAdminView();\n    userView.id = this.params.organizationUserId;\n    userView.organizationId = this.params.organizationId;\n    userView.accessAll = this.accessAllCollections;\n    userView.type = this.formGroup.value.type;\n    userView.permissions = this.setRequestPermissions(\n      userView.permissions ?? new PermissionsApi(),\n      userView.type !== OrganizationUserType.Custom\n    );\n    userView.collections = this.formGroup.value.access\n      .filter((v) => v.type === AccessItemType.Collection)\n      .map(convertToSelectionView);\n    userView.groups = this.formGroup.value.groups.map((m) => m.id);\n    userView.accessSecretsManager = this.formGroup.value.accessSecretsManager;\n\n    if (this.editMode) {\n      await this.userService.save(userView);\n    } else {\n      userView.id = this.params.organizationUserId;\n      const emails = [...new Set(this.formGroup.value.emails.trim().split(/\\s*,\\s*/))];\n      if (emails.length > 20) {\n        this.formGroup.controls.emails.setErrors({\n          tooManyEmails: { message: this.i18nService.t(\"tooManyEmails\", 20) },\n        });\n        return;\n      }\n      await this.userService.invite(emails, userView);\n    }\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(this.editMode ? \"editedUserId\" : \"invitedUsers\", this.params.name)\n    );\n    this.close(MemberDialogResult.Saved);\n  };\n\n  delete = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    const message = this.params.usesKeyConnector\n      ? \"removeUserConfirmationKeyConnector\"\n      : \"removeOrgUserConfirmation\";\n\n    let confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"removeUserIdAccess\", placeholders: [this.params.name] },\n      content: { key: message },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (this.showNoMasterPasswordWarning) {\n      confirmed = await this.noMasterPasswordConfirmationDialog();\n\n      if (!confirmed) {\n        return false;\n      }\n    }\n\n    await this.organizationUserService.deleteOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId\n    );\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"removedUserId\", this.params.name)\n    );\n    this.close(MemberDialogResult.Deleted);\n  };\n\n  revoke = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    let confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"revokeUserId\", placeholders: [this.params.name] },\n      content: { key: \"revokeUserConfirmation\" },\n      acceptButtonText: { key: \"revokeAccess\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (this.showNoMasterPasswordWarning) {\n      confirmed = await this.noMasterPasswordConfirmationDialog();\n\n      if (!confirmed) {\n        return false;\n      }\n    }\n\n    await this.organizationUserService.revokeOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId\n    );\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"revokedUserId\", this.params.name)\n    );\n    this.isRevoked = true;\n    this.close(MemberDialogResult.Revoked);\n  };\n\n  restore = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    await this.organizationUserService.restoreOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId\n    );\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"restoredUserId\", this.params.name)\n    );\n    this.isRevoked = false;\n    this.close(MemberDialogResult.Restored);\n  };\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected async cancel() {\n    this.close(MemberDialogResult.Canceled);\n  }\n\n  private close(result: MemberDialogResult) {\n    this.dialogRef.close(result);\n  }\n\n  private noMasterPasswordConfirmationDialog() {\n    return this.dialogService.openSimpleDialog({\n      title: {\n        key: \"removeOrgUserNoMasterPasswordTitle\",\n      },\n      content: {\n        key: \"removeOrgUserNoMasterPasswordDesc\",\n        placeholders: [this.params.name],\n      },\n      type: \"warning\",\n    });\n  }\n}\n\nfunction mapCollectionToAccessItemView(\n  collection: CollectionView,\n  accessSelection?: CollectionAccessSelectionView,\n  group?: GroupView\n): AccessItemView {\n  return {\n    type: AccessItemType.Collection,\n    id: group ? `${collection.id}-${group.id}` : collection.id,\n    labelName: collection.name,\n    listName: collection.name,\n    readonly: group !== undefined,\n    readonlyPermission: accessSelection ? convertToPermission(accessSelection) : undefined,\n    viaGroupName: group?.name,\n  };\n}\n\nfunction mapGroupToAccessItemView(group: GroupView): AccessItemView {\n  return {\n    type: AccessItemType.Group,\n    id: group.id,\n    labelName: group.name,\n    listName: group.name,\n  };\n}\n\nfunction mapToAccessSelections(user: OrganizationUserAdminView): AccessItemValue[] {\n  if (user == undefined) {\n    return [];\n  }\n  return [].concat(\n    user.collections.map<AccessItemValue>((selection) => ({\n      id: selection.id,\n      type: AccessItemType.Collection,\n      permission: convertToPermission(selection),\n    }))\n  );\n}\n\nfunction mapToGroupAccessSelections(groups: string[]): AccessItemValue[] {\n  if (groups == undefined) {\n    return [];\n  }\n  return [].concat(\n    groups.map((groupId) => ({\n      id: groupId,\n      type: AccessItemType.Group,\n    }))\n  );\n}\n\n/**\n * Strongly typed helper to open a UserDialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Configuration for the dialog\n */\nexport function openUserAddEditDialog(\n  dialogService: DialogService,\n  config: DialogConfig<MemberDialogParams>\n) {\n  return dialogService.open<MemberDialogResult, MemberDialogParams>(MemberDialogComponent, config);\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog [disablePadding]=\"!loading\" dialogSize=\"large\">\n    <span bitDialogTitle>\n      {{ title }}\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\" *ngIf=\"!loading && params.name\">{{\n        params.name\n      }}</span>\n      <span bitBadge badgeType=\"secondary\" *ngIf=\"isRevoked\">{{ \"revoked\" | i18n }}</span>\n    </span>\n    <div bitDialogContent>\n      <ng-container *ngIf=\"loading\">\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n      </ng-container>\n      <bit-tab-group *ngIf=\"!loading\" [(selectedIndex)]=\"tabIndex\">\n        <bit-tab [label]=\"'role' | i18n\">\n          <ng-container *ngIf=\"!editMode\">\n            <p>{{ \"inviteUserDesc\" | i18n }}</p>\n            <bit-form-field>\n              <bit-label>{{ \"email\" | i18n }}</bit-label>\n              <input id=\"emails\" type=\"text\" appAutoFocus bitInput formControlName=\"emails\" />\n              <bit-hint>{{ \"inviteMultipleEmailDesc\" | i18n : \"20\" }}</bit-hint>\n            </bit-form-field>\n          </ng-container>\n          <fieldset role=\"radiogroup\" aria-labelledby=\"roleGroupLabel\" class=\"tw-mb-6\">\n            <legend\n              id=\"roleGroupLabel\"\n              class=\"tw-mb-2 tw-block tw-text-base tw-font-semibold tw-text-main\"\n            >\n              {{ \"memberRole\" | i18n }}\n              <a\n                target=\"_blank\"\n                rel=\"noopener\"\n                appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n                href=\"https://bitwarden.com/help/user-types-access-control/\"\n              >\n                <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n              </a>\n            </legend>\n            <div class=\"tw-mb-2 tw-flex tw-items-baseline\">\n              <input\n                type=\"radio\"\n                id=\"userTypeUser\"\n                [value]=\"organizationUserType.User\"\n                class=\"tw-relative tw-bottom-[-1px] tw-mr-2\"\n                formControlName=\"type\"\n                name=\"type\"\n              />\n              <label class=\"tw-m-0\" for=\"userTypeUser\">\n                {{ \"user\" | i18n }}\n                <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                  {{ \"userDesc\" | i18n }}\n                </div>\n              </label>\n            </div>\n            <div class=\"tw-mb-2 tw-flex tw-items-baseline\">\n              <input\n                type=\"radio\"\n                id=\"userTypeManager\"\n                [value]=\"organizationUserType.Manager\"\n                class=\"tw-relative tw-bottom-[-1px] tw-mr-2\"\n                formControlName=\"type\"\n                name=\"type\"\n              />\n              <label class=\"tw-m-0\" for=\"userTypeManager\">\n                {{ \"manager\" | i18n }}\n                <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                  {{ \"managerDesc\" | i18n }}\n                </div>\n              </label>\n            </div>\n            <div class=\"tw-mb-2 tw-flex tw-items-baseline\">\n              <input\n                type=\"radio\"\n                id=\"userTypeAdmin\"\n                [value]=\"organizationUserType.Admin\"\n                class=\"tw-relative tw-bottom-[-1px] tw-mr-2\"\n                formControlName=\"type\"\n                name=\"type\"\n              />\n              <label class=\"tw-m-0\" for=\"userTypeAdmin\">\n                {{ \"admin\" | i18n }}\n                <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                  {{ \"adminDesc\" | i18n }}\n                </div>\n              </label>\n            </div>\n            <div class=\"tw-mb-2 tw-flex tw-items-baseline\">\n              <input\n                type=\"radio\"\n                id=\"userTypeOwner\"\n                [value]=\"organizationUserType.Owner\"\n                class=\"tw-relative tw-bottom-[-1px] tw-mr-2\"\n                formControlName=\"type\"\n                name=\"type\"\n              />\n              <label class=\"tw-m-0\" for=\"userTypeOwner\">\n                {{ \"owner\" | i18n }}\n                <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                  {{ \"ownerDesc\" | i18n }}\n                </div>\n              </label>\n            </div>\n            <div class=\"tw-flex tw-items-baseline\">\n              <input\n                type=\"radio\"\n                id=\"userTypeCustom\"\n                [value]=\"organizationUserType.Custom\"\n                formControlName=\"type\"\n                name=\"type\"\n                class=\"tw-relative tw-bottom-[-1px] tw-mr-2\"\n                [attr.disabled]=\"!canUseCustomPermissions || null\"\n              />\n              <label class=\"tw-m-0\" for=\"userTypeCustom\">\n                {{ \"custom\" | i18n }}\n                <ng-container *ngIf=\"!canUseCustomPermissions; else enterprise\">\n                  <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                    {{ \"customDescNonEnterpriseStart\" | i18n\n                    }}<a href=\"https://bitwarden.com/contact/\" target=\"_blank\">{{\n                      \"customDescNonEnterpriseLink\" | i18n\n                    }}</a\n                    >{{ \"customDescNonEnterpriseEnd\" | i18n }}\n                  </div>\n                </ng-container>\n                <ng-template #enterprise>\n                  <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                    {{ \"customDesc\" | i18n }}\n                  </div>\n                </ng-template>\n              </label>\n            </div>\n          </fieldset>\n          <ng-container *ngIf=\"customUserTypeSelected\">\n            <h3 class=\"mt-4 d-flex tw-font-semibold\">\n              {{ \"permissions\" | i18n }}\n            </h3>\n            <div class=\"row\" [formGroup]=\"permissionsGroup\">\n              <div class=\"col-6\">\n                <div class=\"mb-3\">\n                  <label class=\"tw-font-semibold\">{{ \"managerPermissions\" | i18n }}</label>\n                  <hr class=\"tw-mb-2 tw-mr-2 tw-mt-0\" />\n                  <app-nested-checkbox\n                    parentId=\"manageAssignedCollections\"\n                    [checkboxes]=\"permissionsGroup.controls.manageAssignedCollectionsGroup\"\n                  >\n                  </app-nested-checkbox>\n                </div>\n              </div>\n              <div class=\"col-6\">\n                <div class=\"mb-3\">\n                  <label class=\"tw-font-semibold\">{{ \"adminPermissions\" | i18n }}</label>\n                  <hr class=\"tw-mb-2 tw-mr-2 tw-mt-0\" />\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"accessEventLogs\"\n                      id=\"accessEventLogs\"\n                      formControlName=\"accessEventLogs\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"accessEventLogs\">\n                      {{ \"accessEventLogs\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"accessImportExport\"\n                      id=\"accessImportExport\"\n                      formControlName=\"accessImportExport\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"accessImportExport\">\n                      {{ \"accessImportExport\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"accessReports\"\n                      id=\"accessReports\"\n                      formControlName=\"accessReports\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"accessReports\">\n                      {{ \"accessReports\" | i18n }}\n                    </label>\n                  </div>\n                  <app-nested-checkbox\n                    parentId=\"manageAllCollections\"\n                    [checkboxes]=\"permissionsGroup.controls.manageAllCollectionsGroup\"\n                  >\n                  </app-nested-checkbox>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"manageGroups\"\n                      id=\"manageGroups\"\n                      formControlName=\"manageGroups\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"manageGroups\">\n                      {{ \"manageGroups\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"manageSso\"\n                      id=\"manageSso\"\n                      formControlName=\"manageSso\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"manageSso\">\n                      {{ \"manageSso\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"managePolicies\"\n                      id=\"managePolicies\"\n                      formControlName=\"managePolicies\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"managePolicies\">\n                      {{ \"managePolicies\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"manageUsers\"\n                      id=\"manageUsers\"\n                      formControlName=\"manageUsers\"\n                      (change)=\"handleDependentPermissions()\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"manageUsers\">\n                      {{ \"manageUsers\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"manageResetPassword\"\n                      id=\"manageResetPassword\"\n                      formControlName=\"manageResetPassword\"\n                      (change)=\"handleDependentPermissions()\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"manageResetPassword\">\n                      {{ \"manageAccountRecovery\" | i18n }}\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </ng-container>\n          <ng-container *ngIf=\"canUseSecretsManager\">\n            <h3 class=\"mt-4\">\n              {{ \"secretsManager\" | i18n }}\n              <a\n                target=\"_blank\"\n                rel=\"noopener\"\n                appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n                href=\"https://bitwarden.com/help/manage-your-organization/#access-to-secrets-manager\"\n              >\n                <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n              </a>\n            </h3>\n            <p class=\"tw-text-muted\">{{ \"secretsManagerAccessDescription\" | i18n }}</p>\n            <bit-form-control>\n              <input type=\"checkbox\" bitCheckbox formControlName=\"accessSecretsManager\" />\n              <bit-label>\n                {{ \"userAccessSecretsManagerGA\" | i18n }}\n              </bit-label>\n            </bit-form-control>\n          </ng-container>\n          <bit-form-field>\n            <bit-label>{{ \"externalId\" | i18n }}</bit-label>\n            <input bitInput type=\"text\" formControlName=\"externalId\" />\n            <bit-hint>{{ \"externalIdDesc\" | i18n }}</bit-hint>\n          </bit-form-field>\n        </bit-tab>\n        <bit-tab *ngIf=\"organization.useGroups\" [label]=\"'groups' | i18n\">\n          <div class=\"tw-mb-6\">\n            {{ \"groupAccessUserDesc\" | i18n }}\n          </div>\n          <bit-access-selector\n            formControlName=\"groups\"\n            [items]=\"groupAccessItems\"\n            [columnHeader]=\"'groups' | i18n\"\n            [selectorLabelText]=\"'selectGroups' | i18n\"\n            [emptySelectionText]=\"'noGroupsAdded' | i18n\"\n          ></bit-access-selector>\n        </bit-tab>\n        <bit-tab [label]=\"'collections' | i18n\">\n          <div *ngIf=\"organization.useGroups\" class=\"tw-mb-6\">\n            {{ \"userPermissionOverrideHelper\" | i18n }}\n          </div>\n          <div class=\"tw-mb-6\">\n            <bit-form-control>\n              <input type=\"checkbox\" bitCheckbox formControlName=\"accessAllCollections\" />\n              <bit-label>\n                {{ \"accessAllCollectionsDesc\" | i18n }}\n                <a\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                  appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n                  href=\"https://bitwarden.com/help/user-types-access-control/#access-control\"\n                >\n                  <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n                </a>\n              </bit-label>\n              <bit-hint>{{ \"accessAllCollectionsHelp\" | i18n }}</bit-hint>\n            </bit-form-control>\n          </div>\n          <bit-access-selector\n            *ngIf=\"!accessAllCollections\"\n            [permissionMode]=\"PermissionMode.Edit\"\n            formControlName=\"access\"\n            [showGroupColumn]=\"organization.useGroups\"\n            [items]=\"collectionAccessItems\"\n            [columnHeader]=\"'collection' | i18n\"\n            [selectorLabelText]=\"'selectCollections' | i18n\"\n            [emptySelectionText]=\"'noCollectionsAdded' | i18n\"\n          ></bit-access-selector\n        ></bit-tab>\n      </bit-tab-group>\n    </div>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton bitFormButton buttonType=\"primary\" [disabled]=\"loading\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button\n        type=\"button\"\n        bitButton\n        bitFormButton\n        buttonType=\"secondary\"\n        (click)=\"cancel()\"\n        [disabled]=\"loading\"\n      >\n        {{ \"cancel\" | i18n }}\n      </button>\n      <div class=\"tw-ml-auto\">\n        <button\n          *ngIf=\"editMode && isRevoked\"\n          type=\"button\"\n          bitButton\n          bitFormButton\n          buttonType=\"secondary\"\n          [bitAction]=\"restore\"\n          [disabled]=\"loading\"\n        >\n          {{ \"restoreAccess\" | i18n }}\n        </button>\n        <button\n          *ngIf=\"editMode && !isRevoked\"\n          type=\"button\"\n          bitButton\n          bitFormButton\n          buttonType=\"secondary\"\n          [bitAction]=\"revoke\"\n          [disabled]=\"loading\"\n        >\n          {{ \"revokeAccess\" | i18n }}\n        </button>\n        <button\n          *ngIf=\"editMode\"\n          type=\"button\"\n          bitIconButton=\"bwi-trash\"\n          buttonType=\"danger\"\n          bitFormButton\n          [appA11yTitle]=\"'delete' | i18n\"\n          [bitAction]=\"delete\"\n          [disabled]=\"loading\"\n        ></button>\n      </div>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { NgModule } from \"@angular/core\";\n\nimport { RadioButtonModule } from \"@bitwarden/components\";\n\nimport { SharedOrganizationModule } from \"../../../shared\";\n\nimport { MemberDialogComponent } from \"./member-dialog.component\";\nimport { NestedCheckboxComponent } from \"./nested-checkbox.component\";\n\n@NgModule({\n  declarations: [MemberDialogComponent, NestedCheckboxComponent],\n  imports: [SharedOrganizationModule, RadioButtonModule],\n  exports: [MemberDialogComponent],\n})\nexport class UserDialogModule {}\n","export class OrganizationUserConfirmRequest {\n  key: string;\n}\n","import { OrganizationUserUserDetailsResponse } from \"@bitwarden/common/abstractions/organization-user/responses\";\nimport {\n  OrganizationUserStatusType,\n  OrganizationUserType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { PermissionsApi } from \"@bitwarden/common/admin-console/models/api/permissions.api\";\n\nimport { CollectionAccessSelectionView } from \"./collection-access-selection.view\";\n\nexport class OrganizationUserView {\n  id: string;\n  userId: string;\n  type: OrganizationUserType;\n  status: OrganizationUserStatusType;\n  accessAll: boolean;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  name: string;\n  email: string;\n  avatarColor: string;\n  twoFactorEnabled: boolean;\n  usesKeyConnector: boolean;\n  hasMasterPassword: boolean;\n\n  collections: CollectionAccessSelectionView[] = [];\n  groups: string[] = [];\n\n  groupNames: string[] = [];\n  collectionNames: string[] = [];\n\n  static fromResponse(response: OrganizationUserUserDetailsResponse): OrganizationUserView {\n    const view = Object.assign(new OrganizationUserView(), response) as OrganizationUserView;\n\n    if (response.collections != undefined) {\n      view.collections = response.collections.map((c) => new CollectionAccessSelectionView(c));\n    }\n\n    if (response.groups != undefined) {\n      view.groups = response.groups;\n    }\n\n    return view;\n  }\n}\n","<bit-dialog dialogSize=\"large\">\n  <span bitDialogTitle>{{ \"activateSecretsManager\" | i18n }}</span>\n  <span bitDialogContent>\n    <p>{{ \"bulkEnableSecretsManagerDescription\" | i18n }}</p>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"member\" | i18n }}</th>\n          <th bitCell>{{ \"role\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let u of rows$ | async\">\n          <td bitCell>\n            <div class=\"tw-flex tw-items-center\">\n              <bit-avatar\n                size=\"small\"\n                [text]=\"u | userName\"\n                [id]=\"u.userId\"\n                [color]=\"u.avatarColor\"\n                class=\"tw-mr-3\"\n              ></bit-avatar>\n              <div class=\"tw-flex tw-flex-col\">\n                <div>\n                  {{ u | userName }}\n                </div>\n                <div class=\"tw-text-sm tw-text-muted\" *ngIf=\"u.name\">\n                  {{ u.email }}\n                </div>\n              </div>\n            </div>\n          </td>\n          <td bitCell>{{ u.type | userType }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"submit\">\n      {{ \"activateAccess\" | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService, TableDataSource } from \"@bitwarden/components\";\n\nimport { OrganizationUserView } from \"../../../core\";\n\nexport type BulkEnableSecretsManagerDialogData = {\n  orgId: string;\n  users: OrganizationUserView[];\n};\n\n@Component({\n  templateUrl: `bulk-enable-sm-dialog.component.html`,\n})\nexport class BulkEnableSecretsManagerDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<OrganizationUserView>();\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: BulkEnableSecretsManagerDialogData,\n    private organizationUserService: OrganizationUserService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit(): void {\n    this.dataSource.data = this.data.users;\n  }\n\n  submit = async () => {\n    await this.organizationUserService.putOrganizationUserBulkEnableSecretsManager(\n      this.data.orgId,\n      this.dataSource.data.map((u) => u.id)\n    );\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"activatedAccessToSecretsManager\")\n    );\n    this.dialogRef.close();\n  };\n\n  static open(dialogService: DialogService, data: BulkEnableSecretsManagerDialogData) {\n    return dialogService.open<unknown, BulkEnableSecretsManagerDialogData>(\n      BulkEnableSecretsManagerDialogComponent,\n      { data }\n    );\n  }\n}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"bulkTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable modal-lg\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"bulkTitle\">\n          {{ bulkTitle }}\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <app-callout type=\"danger\" *ngIf=\"users.length <= 0\">\n          {{ \"noSelectedUsersApplicable\" | i18n }}\n        </app-callout>\n        <app-callout type=\"error\" *ngIf=\"error\">\n          {{ error }}\n        </app-callout>\n        <ng-container *ngIf=\"!done\">\n          <app-callout type=\"warning\" *ngIf=\"users.length > 0 && !error && isRevoking\">\n            <p>{{ \"revokeUsersWarning\" | i18n }}</p>\n            <p *ngIf=\"this.showNoMasterPasswordWarning\">\n              {{ \"removeMembersWithoutMasterPasswordWarning\" | i18n }}\n            </p>\n          </app-callout>\n          <table class=\"table table-hover table-list\">\n            <thead>\n              <tr>\n                <th colspan=\"2\">{{ \"user\" | i18n }}</th>\n                <th *ngIf=\"this.showNoMasterPasswordWarning\">{{ \"details\" | i18n }}</th>\n              </tr>\n            </thead>\n            <tr *ngFor=\"let user of users\">\n              <td width=\"30\">\n                <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n              </td>\n              <td>\n                {{ user.email }}\n                <small class=\"text-muted d-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n              </td>\n              <td *ngIf=\"this.showNoMasterPasswordWarning\">\n                <span class=\"text-muted d-block tw-lowercase\">\n                  <ng-container *ngIf=\"user.hasMasterPassword === true\"> - </ng-container>\n                  <ng-container *ngIf=\"user.hasMasterPassword === false\">\n                    <i class=\"bwi bwi-exclamation-triangle\" aria-hidden=\"true\"></i>\n                    {{ \"noMasterPassword\" | i18n }}\n                  </ng-container>\n                </span>\n              </td>\n            </tr>\n          </table>\n        </ng-container>\n        <ng-container *ngIf=\"done\">\n          <table class=\"table table-hover table-list\">\n            <thead>\n              <tr>\n                <th colspan=\"2\">{{ \"user\" | i18n }}</th>\n                <th>{{ \"status\" | i18n }}</th>\n              </tr>\n            </thead>\n            <tr *ngFor=\"let user of users\">\n              <td width=\"30\">\n                <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n              </td>\n              <td>\n                {{ user.email }}\n                <small class=\"text-muted d-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n              </td>\n              <td *ngIf=\"statuses.has(user.id)\">\n                {{ statuses.get(user.id) }}\n              </td>\n              <td *ngIf=\"!statuses.has(user.id)\">\n                {{ \"bulkFilteredMessage\" | i18n }}\n              </td>\n            </tr>\n          </table>\n        </ng-container>\n      </div>\n      <div class=\"modal-footer\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary btn-submit\"\n          *ngIf=\"!done && users.length > 0\"\n          [disabled]=\"loading\"\n          (click)=\"submit()\"\n        >\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ bulkTitle }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"close\" | i18n }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from \"@angular/core\";\n\nimport { ModalConfig } from \"@bitwarden/angular/services/modal.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\n@Component({\n  selector: \"app-bulk-restore-revoke\",\n  templateUrl: \"bulk-restore-revoke.component.html\",\n})\nexport class BulkRestoreRevokeComponent {\n  isRevoking: boolean;\n  organizationId: string;\n  users: BulkUserDetails[];\n\n  statuses: Map<string, string> = new Map();\n\n  loading = false;\n  done = false;\n  error: string;\n  showNoMasterPasswordWarning = false;\n\n  constructor(\n    protected i18nService: I18nService,\n    private organizationUserService: OrganizationUserService,\n    config: ModalConfig\n  ) {\n    this.isRevoking = config.data.isRevoking;\n    this.organizationId = config.data.organizationId;\n    this.users = config.data.users;\n    this.showNoMasterPasswordWarning = this.users.some((u) => u.hasMasterPassword === false);\n  }\n\n  get bulkTitle() {\n    const titleKey = this.isRevoking ? \"revokeUsers\" : \"restoreUsers\";\n    return this.i18nService.t(titleKey);\n  }\n\n  async submit() {\n    this.loading = true;\n    try {\n      const response = await this.performBulkUserAction();\n\n      const bulkMessage = this.isRevoking ? \"bulkRevokedMessage\" : \"bulkRestoredMessage\";\n      response.data.forEach((entry) => {\n        const error = entry.error !== \"\" ? entry.error : this.i18nService.t(bulkMessage);\n        this.statuses.set(entry.id, error);\n      });\n      this.done = true;\n    } catch (e) {\n      this.error = e.message;\n    }\n\n    this.loading = false;\n  }\n\n  protected async performBulkUserAction() {\n    const userIds = this.users.map((user) => user.id);\n    if (this.isRevoking) {\n      return await this.organizationUserService.revokeManyOrganizationUsers(\n        this.organizationId,\n        userIds\n      );\n    } else {\n      return await this.organizationUserService.restoreManyOrganizationUsers(\n        this.organizationId,\n        userIds\n      );\n    }\n  }\n}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"resetPasswordTitle\">\n  <div class=\"modal-dialog\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\" [appApiAction]=\"formPromise\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"resetPasswordTitle\">\n          {{ \"recoverAccount\" | i18n }}\n          <small class=\"text-muted\" *ngIf=\"name\">{{ name }}</small>\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <app-callout type=\"warning\"\n          >{{ \"resetPasswordLoggedOutWarning\" | i18n : loggedOutWarningName }}\n        </app-callout>\n        <auth-password-callout\n          [policy]=\"enforcedPolicyOptions\"\n          message=\"resetPasswordMasterPasswordPolicyInEffect\"\n          *ngIf=\"enforcedPolicyOptions\"\n        >\n        </auth-password-callout>\n        <div class=\"row\">\n          <div class=\"col form-group\">\n            <div class=\"d-flex\">\n              <label for=\"newPassword\">{{ \"newPassword\" | i18n }}</label>\n              <div class=\"ml-auto d-flex\">\n                <a\n                  href=\"#\"\n                  class=\"d-block mr-2 bwi-icon-above-input\"\n                  appStopClick\n                  appA11yTitle=\"{{ 'generatePassword' | i18n }}\"\n                  (click)=\"generatePassword()\"\n                >\n                  <i class=\"bwi bwi-lg bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n                </a>\n              </div>\n            </div>\n            <div class=\"input-group mb-1\">\n              <input\n                id=\"newPassword\"\n                class=\"form-control text-monospace\"\n                appAutofocus\n                type=\"{{ showPassword ? 'text' : 'password' }}\"\n                name=\"NewPassword\"\n                [(ngModel)]=\"newPassword\"\n                required\n                appInputVerbatim\n                autocomplete=\"new-password\"\n              />\n              <div class=\"input-group-append\">\n                <button\n                  type=\"button\"\n                  class=\"btn btn-outline-secondary\"\n                  appA11yTitle=\"{{ 'toggleVisibility' | i18n }}\"\n                  (click)=\"togglePassword()\"\n                >\n                  <i\n                    class=\"bwi bwi-lg\"\n                    aria-hidden=\"true\"\n                    [ngClass]=\"{ 'bwi-eye': !showPassword, 'bwi-eye-slash': showPassword }\"\n                  ></i>\n                </button>\n                <button\n                  type=\"button\"\n                  class=\"btn btn-outline-secondary\"\n                  appA11yTitle=\"{{ 'copyPassword' | i18n }}\"\n                  (click)=\"copy(newPassword)\"\n                >\n                  <i class=\"bwi bwi-lg bwi-clone\" aria-hidden=\"true\"></i>\n                </button>\n              </div>\n            </div>\n            <app-password-strength\n              [password]=\"newPassword\"\n              [email]=\"email\"\n              [showText]=\"true\"\n              (passwordStrengthResult)=\"getStrengthResult($event)\"\n            >\n            </app-password-strength>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary btn-submit\" [disabled]=\"form.loading\">\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ \"save\" | i18n }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\nimport zxcvbn from \"zxcvbn\";\n\nimport { PasswordStrengthComponent } from \"@bitwarden/angular/shared/components/password-strength/password-strength.component\";\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\nimport { OrganizationUserResetPasswordRequest } from \"@bitwarden/common/abstractions/organization-user/requests\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { MasterPasswordPolicyOptions } from \"@bitwarden/common/admin-console/models/domain/master-password-policy-options\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport {\n  SymmetricCryptoKey,\n  UserKey,\n} from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { PasswordGenerationServiceAbstraction } from \"@bitwarden/common/tools/generator/password\";\nimport { DialogService } from \"@bitwarden/components\";\n\n@Component({\n  selector: \"app-reset-password\",\n  templateUrl: \"reset-password.component.html\",\n})\nexport class ResetPasswordComponent implements OnInit, OnDestroy {\n  @Input() name: string;\n  @Input() email: string;\n  @Input() id: string;\n  @Input() organizationId: string;\n  @Output() onPasswordReset = new EventEmitter();\n  @ViewChild(PasswordStrengthComponent) passwordStrengthComponent: PasswordStrengthComponent;\n\n  enforcedPolicyOptions: MasterPasswordPolicyOptions;\n  newPassword: string = null;\n  showPassword = false;\n  passwordStrengthResult: zxcvbn.ZXCVBNResult;\n  formPromise: Promise<any>;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private passwordGenerationService: PasswordGenerationServiceAbstraction,\n    private policyService: PolicyService,\n    private cryptoService: CryptoService,\n    private logService: LogService,\n    private organizationUserService: OrganizationUserService,\n    private dialogService: DialogService\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .masterPasswordPolicyOptions$()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (enforcedPasswordPolicyOptions) =>\n          (this.enforcedPolicyOptions = enforcedPasswordPolicyOptions)\n      );\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  get loggedOutWarningName() {\n    return this.name != null ? this.name : this.i18nService.t(\"thisUser\");\n  }\n\n  async generatePassword() {\n    const options = (await this.passwordGenerationService.getOptions())?.[0] ?? {};\n    this.newPassword = await this.passwordGenerationService.generatePassword(options);\n    this.passwordStrengthComponent.updatePasswordStrength(this.newPassword);\n  }\n\n  togglePassword() {\n    this.showPassword = !this.showPassword;\n    document.getElementById(\"newPassword\").focus();\n  }\n\n  copy(value: string) {\n    if (value == null) {\n      return;\n    }\n\n    this.platformUtilsService.copyToClipboard(value, { window: window });\n    this.platformUtilsService.showToast(\n      \"info\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(\"password\"))\n    );\n  }\n\n  async submit() {\n    // Validation\n    if (this.newPassword == null || this.newPassword === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"masterPasswordRequired\")\n      );\n      return false;\n    }\n\n    if (this.newPassword.length < Utils.minimumPasswordLength) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"masterPasswordMinlength\", Utils.minimumPasswordLength)\n      );\n      return false;\n    }\n\n    if (\n      this.enforcedPolicyOptions != null &&\n      !this.policyService.evaluateMasterPassword(\n        this.passwordStrengthResult.score,\n        this.newPassword,\n        this.enforcedPolicyOptions\n      )\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"masterPasswordPolicyRequirementsNotMet\")\n      );\n      return;\n    }\n\n    if (this.passwordStrengthResult.score < 3) {\n      const result = await this.dialogService.openSimpleDialog({\n        title: { key: \"weakMasterPassword\" },\n        content: { key: \"weakMasterPasswordDesc\" },\n        type: \"warning\",\n      });\n\n      if (!result) {\n        return false;\n      }\n    }\n\n    // Get user Information (kdf type, kdf iterations, resetPasswordKey, private key) and change password\n    try {\n      this.formPromise = this.organizationUserService\n        .getOrganizationUserResetPasswordDetails(this.organizationId, this.id)\n        .then(async (response) => {\n          if (response == null) {\n            throw new Error(this.i18nService.t(\"resetPasswordDetailsError\"));\n          }\n\n          const kdfType = response.kdf;\n          const kdfIterations = response.kdfIterations;\n          const kdfMemory = response.kdfMemory;\n          const kdfParallelism = response.kdfParallelism;\n          const resetPasswordKey = response.resetPasswordKey;\n          const encryptedPrivateKey = response.encryptedPrivateKey;\n\n          // Decrypt Organization's encrypted Private Key with org key\n          const orgSymKey = await this.cryptoService.getOrgKey(this.organizationId);\n          const decPrivateKey = await this.cryptoService.decryptToBytes(\n            new EncString(encryptedPrivateKey),\n            orgSymKey\n          );\n\n          // Decrypt User's Reset Password Key to get UserKey\n          const decValue = await this.cryptoService.rsaDecrypt(resetPasswordKey, decPrivateKey);\n          const existingUserKey = new SymmetricCryptoKey(decValue) as UserKey;\n\n          // Create new master key and hash new password\n          const newMasterKey = await this.cryptoService.makeMasterKey(\n            this.newPassword,\n            this.email.trim().toLowerCase(),\n            kdfType,\n            new KdfConfig(kdfIterations, kdfMemory, kdfParallelism)\n          );\n          const newMasterKeyHash = await this.cryptoService.hashMasterKey(\n            this.newPassword,\n            newMasterKey\n          );\n\n          // Create new encrypted user key for the User\n          const newUserKey = await this.cryptoService.encryptUserKeyWithMasterKey(\n            newMasterKey,\n            existingUserKey\n          );\n\n          // Create request\n          const request = new OrganizationUserResetPasswordRequest();\n          request.key = newUserKey[1].encryptedString;\n          request.newMasterPasswordHash = newMasterKeyHash;\n\n          // Change user's password\n          return this.organizationUserService.putOrganizationUserResetPassword(\n            this.organizationId,\n            this.id,\n            request\n          );\n        });\n\n      await this.formPromise;\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"resetPasswordSuccess\")\n      );\n      this.onPasswordReset.emit();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  getStrengthResult(result: zxcvbn.ZXCVBNResult) {\n    this.passwordStrengthResult = result;\n  }\n}\n","<div class=\"container page-content\">\n  <div class=\"tw-mb-4 tw-flex tw-flex-col tw-space-y-4\">\n    <h1>{{ \"members\" | i18n }}</h1>\n    <div class=\"tw-flex tw-items-center tw-justify-end tw-space-x-3\">\n      <bit-toggle-group\n        [selected]=\"status\"\n        (selectedChange)=\"filter($event)\"\n        [attr.aria-label]=\"'memberStatusFilter' | i18n\"\n      >\n        <bit-toggle [value]=\"null\">\n          {{ \"all\" | i18n }} <span bitBadge badgeType=\"info\" *ngIf=\"allCount\">{{ allCount }}</span>\n        </bit-toggle>\n\n        <bit-toggle [value]=\"userStatusType.Invited\">\n          {{ \"invited\" | i18n }}\n          <span bitBadge badgeType=\"info\" *ngIf=\"invitedCount\">{{ invitedCount }}</span>\n        </bit-toggle>\n\n        <bit-toggle [value]=\"userStatusType.Accepted\">\n          {{ \"needsConfirmation\" | i18n }}\n          <span bitBadge badgeType=\"info\" *ngIf=\"acceptedCount\">{{ acceptedCount }}</span>\n        </bit-toggle>\n\n        <bit-toggle [value]=\"userStatusType.Revoked\">\n          {{ \"revoked\" | i18n }}\n          <span bitBadge badgeType=\"info\" *ngIf=\"revokedCount\">{{ revokedCount }}</span>\n        </bit-toggle>\n      </bit-toggle-group>\n\n      <bit-search\n        class=\"tw-grow\"\n        [(ngModel)]=\"searchText\"\n        [placeholder]=\"'searchMembers' | i18n\"\n      ></bit-search>\n\n      <button type=\"button\" bitButton buttonType=\"primary\" (click)=\"invite()\">\n        <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n        {{ \"inviteMember\" | i18n }}\n      </button>\n    </div>\n  </div>\n  <ng-container *ngIf=\"loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n  </ng-container>\n  <ng-container\n    *ngIf=\"\n      !loading &&\n      (isPaging()\n        ? pagedUsers\n        : (users | search : searchText : 'name' : 'email' : 'id')) as searchedUsers\n    \"\n  >\n    <p *ngIf=\"!searchedUsers.length\">{{ \"noMembersInList\" | i18n }}</p>\n    <ng-container *ngIf=\"searchedUsers.length\">\n      <app-callout\n        type=\"info\"\n        title=\"{{ 'confirmUsers' | i18n }}\"\n        icon=\"bwi bwi-check-circle\"\n        *ngIf=\"showConfirmUsers\"\n      >\n        {{ \"usersNeedConfirmed\" | i18n }}\n      </app-callout>\n      <bit-table\n        infinite-scroll\n        [infiniteScrollDistance]=\"1\"\n        [infiniteScrollDisabled]=\"!isPaging()\"\n        (scrolled)=\"loadMore()\"\n      >\n        <ng-container header>\n          <tr>\n            <th bitCell class=\"tw-w-20\">\n              <input\n                type=\"checkbox\"\n                bitCheckbox\n                class=\"tw-mr-1\"\n                (change)=\"selectAll($any($event.target).checked)\"\n                id=\"selectAll\"\n              />\n              <label class=\"tw-mb-0 !tw-font-bold !tw-text-muted\" for=\"selectAll\">{{\n                \"all\" | i18n\n              }}</label>\n            </th>\n            <th bitCell>{{ \"name\" | i18n }}</th>\n            <th bitCell>{{ (organization.useGroups ? \"groups\" : \"collections\") | i18n }}</th>\n            <th bitCell>{{ \"role\" | i18n }}</th>\n            <th bitCell>{{ \"policies\" | i18n }}</th>\n            <th bitCell class=\"tw-w-10\">\n              <button\n                [bitMenuTriggerFor]=\"headerMenu\"\n                type=\"button\"\n                bitIconButton=\"bwi-ellipsis-v\"\n                size=\"small\"\n                appA11yTitle=\"{{ 'options' | i18n }}\"\n              ></button>\n\n              <bit-menu #headerMenu>\n                <ng-container *ngIf=\"canUseSecretsManager$ | async\">\n                  <button type=\"button\" bitMenuItem (click)=\"bulkEnableSM()\">\n                    {{ \"activateSecretsManager\" | i18n }}\n                  </button>\n                  <bit-menu-divider></bit-menu-divider>\n                </ng-container>\n                <button type=\"button\" bitMenuItem (click)=\"bulkReinvite()\">\n                  <i class=\"bwi bwi-fw bwi-envelope\" aria-hidden=\"true\"></i>\n                  {{ \"reinviteSelected\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"bulkConfirm()\"\n                  *ngIf=\"showBulkConfirmUsers\"\n                >\n                  <span class=\"tw-text-success\">\n                    <i class=\"bwi bwi-fw bwi-check\" aria-hidden=\"true\"></i>\n                    {{ \"confirmSelected\" | i18n }}\n                  </span>\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"bulkRestore()\">\n                  <i class=\"bwi bwi-fw bwi-plus-circle\" aria-hidden=\"true\"></i>\n                  {{ \"restoreAccess\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"bulkRevoke()\">\n                  <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n                  {{ \"revokeAccess\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"bulkRemove()\">\n                  <span class=\"tw-text-danger\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-close\"></i>\n                    {{ \"remove\" | i18n }}\n                  </span>\n                </button>\n              </bit-menu>\n            </th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let u of searchedUsers\" alignContent=\"middle\">\n            <td bitCell (click)=\"checkUser(u)\">\n              <input type=\"checkbox\" bitCheckbox [(ngModel)]=\"$any(u).checked\" />\n            </td>\n            <td bitCell (click)=\"edit(u)\" class=\"tw-cursor-pointer\">\n              <div class=\"tw-flex tw-items-center\">\n                <bit-avatar\n                  size=\"small\"\n                  [text]=\"u | userName\"\n                  [id]=\"u.userId\"\n                  [color]=\"u.avatarColor\"\n                  class=\"tw-mr-3\"\n                ></bit-avatar>\n                <div class=\"tw-flex tw-flex-col\">\n                  <div>\n                    <button type=\"button\" bitLink>\n                      {{ u.name ?? u.email }}\n                    </button>\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      badgeType=\"secondary\"\n                      *ngIf=\"u.status === userStatusType.Invited\"\n                      >{{ \"invited\" | i18n }}</span\n                    >\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      badgeType=\"warning\"\n                      *ngIf=\"u.status === userStatusType.Accepted\"\n                      >{{ \"needsConfirmation\" | i18n }}</span\n                    >\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      badgeType=\"secondary\"\n                      *ngIf=\"u.status === userStatusType.Revoked\"\n                      >{{ \"revoked\" | i18n }}</span\n                    >\n                  </div>\n                  <div class=\"tw-text-sm tw-text-muted\" *ngIf=\"u.name\">\n                    {{ u.email }}\n                  </div>\n                </div>\n              </div>\n            </td>\n\n            <td\n              bitCell\n              (click)=\"edit(u, organization.useGroups ? memberTab.Groups : memberTab.Collections)\"\n              class=\"tw-cursor-pointer\"\n            >\n              <bit-badge-list\n                *ngIf=\"organization.useGroups || !u.accessAll\"\n                [items]=\"organization.useGroups ? u.groupNames : u.collectionNames\"\n                [maxItems]=\"3\"\n                badgeType=\"secondary\"\n              ></bit-badge-list>\n              <span *ngIf=\"!organization.useGroups && u.accessAll\">{{ \"all\" | i18n }}</span>\n            </td>\n\n            <td\n              bitCell\n              (click)=\"edit(u, memberTab.Role)\"\n              class=\"tw-cursor-pointer tw-text-sm tw-text-muted\"\n            >\n              {{ u.type | userType }}\n            </td>\n\n            <td bitCell class=\"tw-text-muted\">\n              <ng-container *ngIf=\"u.twoFactorEnabled\">\n                <i\n                  class=\"bwi bwi-lock\"\n                  title=\"{{ 'userUsingTwoStep' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"userUsingTwoStep\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"showEnrolledStatus($any(u))\">\n                <i\n                  class=\"bwi bwi-key\"\n                  title=\"{{ 'enrolledAccountRecovery' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"enrolledAccountRecovery\" | i18n }}</span>\n              </ng-container>\n            </td>\n            <td bitCell>\n              <button\n                [bitMenuTriggerFor]=\"rowMenu\"\n                type=\"button\"\n                bitIconButton=\"bwi-ellipsis-v\"\n                size=\"small\"\n                appA11yTitle=\"{{ 'options' | i18n }}\"\n              ></button>\n\n              <bit-menu #rowMenu>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"reinvite(u)\"\n                  *ngIf=\"u.status === userStatusType.Invited\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-envelope\"></i>\n                  {{ \"resendInvitation\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"confirm(u)\"\n                  *ngIf=\"u.status === userStatusType.Accepted\"\n                >\n                  <span class=\"tw-text-success\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-check\"></i> {{ \"confirm\" | i18n }}\n                  </span>\n                </button>\n                <bit-menu-divider\n                  *ngIf=\"\n                    u.status === userStatusType.Accepted || u.status === userStatusType.Invited\n                  \"\n                ></bit-menu-divider>\n                <button type=\"button\" bitMenuItem (click)=\"edit(u, memberTab.Role)\">\n                  <i aria-hidden=\"true\" class=\"bwi bwi-user\"></i> {{ \"memberRole\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"edit(u, memberTab.Groups)\"\n                  *ngIf=\"organization.useGroups\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-users\"></i> {{ \"groups\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"edit(u, memberTab.Collections)\">\n                  <i aria-hidden=\"true\" class=\"bwi bwi-collection\"></i> {{ \"collections\" | i18n }}\n                </button>\n                <bit-menu-divider></bit-menu-divider>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"events(u)\"\n                  *ngIf=\"organization.useEvents && u.status === userStatusType.Confirmed\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-file-text\"></i> {{ \"eventLogs\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"resetPassword(u)\"\n                  *ngIf=\"allowResetPassword(u)\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-key\"></i> {{ \"recoverAccount\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"restore(u)\"\n                  *ngIf=\"u.status === userStatusType.Revoked\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-plus-circle\"></i>\n                  {{ \"restoreAccess\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"revoke(u)\"\n                  *ngIf=\"u.status !== userStatusType.Revoked\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-minus-circle\"></i>\n                  {{ \"revokeAccess\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"remove(u)\">\n                  <span class=\"tw-text-danger\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-close\"></i> {{ \"remove\" | i18n }}\n                  </span>\n                </button>\n              </bit-menu>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </ng-container>\n  <ng-template #addEdit></ng-template>\n  <ng-template #groupsTemplate></ng-template>\n  <ng-template #confirmTemplate></ng-template>\n  <ng-template #resetPasswordTemplate></ng-template>\n  <ng-template #bulkStatusTemplate></ng-template>\n  <ng-template #bulkConfirmTemplate></ng-template>\n  <ng-template #bulkRemoveTemplate></ng-template>\n</div>\n","import { Component, OnDestroy, OnInit, ViewChild, ViewContainerRef } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n  combineLatest,\n  concatMap,\n  firstValueFrom,\n  from,\n  lastValueFrom,\n  map,\n  Observable,\n  shareReplay,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { SearchPipe } from \"@bitwarden/angular/pipes/search.pipe\";\nimport { UserNamePipe } from \"@bitwarden/angular/pipes/user-name.pipe\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\nimport { OrganizationUserConfirmRequest } from \"@bitwarden/common/abstractions/organization-user/requests\";\nimport {\n  OrganizationUserBulkResponse,\n  OrganizationUserUserDetailsResponse,\n} from \"@bitwarden/common/abstractions/organization-user/responses\";\nimport { SearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { OrganizationApiServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/organization/organization-api.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyApiServiceAbstraction as PolicyApiService } from \"@bitwarden/common/admin-console/abstractions/policy/policy-api.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport {\n  OrganizationUserStatusType,\n  OrganizationUserType,\n  PolicyType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { OrganizationKeysRequest } from \"@bitwarden/common/admin-console/models/request/organization-keys.request\";\nimport { ProductType } from \"@bitwarden/common/enums\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CollectionData } from \"@bitwarden/common/vault/models/data/collection.data\";\nimport { Collection } from \"@bitwarden/common/vault/models/domain/collection\";\nimport { CollectionDetailsResponse } from \"@bitwarden/common/vault/models/response/collection.response\";\nimport { DialogService, SimpleDialogOptions } from \"@bitwarden/components\";\n\nimport { flagEnabled } from \"../../../../utils/flags\";\nimport { openEntityEventsDialog } from \"../../../admin-console/organizations/manage/entity-events.component\";\nimport { BasePeopleComponent } from \"../../../common/base.people.component\";\nimport { GroupService } from \"../core\";\nimport { OrganizationUserView } from \"../core/views/organization-user.view\";\n\nimport { BulkConfirmComponent } from \"./components/bulk/bulk-confirm.component\";\nimport { BulkEnableSecretsManagerDialogComponent } from \"./components/bulk/bulk-enable-sm-dialog.component\";\nimport { BulkRemoveComponent } from \"./components/bulk/bulk-remove.component\";\nimport { BulkRestoreRevokeComponent } from \"./components/bulk/bulk-restore-revoke.component\";\nimport { BulkStatusComponent } from \"./components/bulk/bulk-status.component\";\nimport {\n  MemberDialogResult,\n  MemberDialogTab,\n  openUserAddEditDialog,\n} from \"./components/member-dialog\";\nimport { ResetPasswordComponent } from \"./components/reset-password.component\";\n\n@Component({\n  selector: \"app-org-people\",\n  templateUrl: \"people.component.html\",\n})\nexport class PeopleComponent\n  extends BasePeopleComponent<OrganizationUserView>\n  implements OnInit, OnDestroy\n{\n  @ViewChild(\"groupsTemplate\", { read: ViewContainerRef, static: true })\n  groupsModalRef: ViewContainerRef;\n  @ViewChild(\"confirmTemplate\", { read: ViewContainerRef, static: true })\n  confirmModalRef: ViewContainerRef;\n  @ViewChild(\"resetPasswordTemplate\", { read: ViewContainerRef, static: true })\n  resetPasswordModalRef: ViewContainerRef;\n  @ViewChild(\"bulkStatusTemplate\", { read: ViewContainerRef, static: true })\n  bulkStatusModalRef: ViewContainerRef;\n  @ViewChild(\"bulkConfirmTemplate\", { read: ViewContainerRef, static: true })\n  bulkConfirmModalRef: ViewContainerRef;\n  @ViewChild(\"bulkRemoveTemplate\", { read: ViewContainerRef, static: true })\n  bulkRemoveModalRef: ViewContainerRef;\n\n  userType = OrganizationUserType;\n  userStatusType = OrganizationUserStatusType;\n  memberTab = MemberDialogTab;\n\n  organization: Organization;\n  status: OrganizationUserStatusType = null;\n  orgResetPasswordPolicyEnabled = false;\n\n  protected canUseSecretsManager$: Observable<boolean>;\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    apiService: ApiService,\n    private route: ActivatedRoute,\n    i18nService: I18nService,\n    modalService: ModalService,\n    platformUtilsService: PlatformUtilsService,\n    cryptoService: CryptoService,\n    searchService: SearchService,\n    validationService: ValidationService,\n    private policyService: PolicyService,\n    private policyApiService: PolicyApiService,\n    logService: LogService,\n    searchPipe: SearchPipe,\n    userNamePipe: UserNamePipe,\n    private syncService: SyncService,\n    stateService: StateService,\n    private organizationService: OrganizationService,\n    private organizationApiService: OrganizationApiServiceAbstraction,\n    private organizationUserService: OrganizationUserService,\n    dialogService: DialogService,\n    private router: Router,\n    private groupService: GroupService,\n    private collectionService: CollectionService\n  ) {\n    super(\n      apiService,\n      searchService,\n      i18nService,\n      platformUtilsService,\n      cryptoService,\n      validationService,\n      modalService,\n      logService,\n      searchPipe,\n      userNamePipe,\n      stateService,\n      dialogService\n    );\n  }\n\n  async ngOnInit() {\n    const organization$ = this.route.params.pipe(\n      map((params) => this.organizationService.get(params.organizationId)),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    this.canUseSecretsManager$ = organization$.pipe(\n      map((org) => org.useSecretsManager && flagEnabled(\"secretsManager\"))\n    );\n\n    const policies$ = organization$.pipe(\n      switchMap((organization) => {\n        if (organization.isProviderUser) {\n          return from(this.policyApiService.getPolicies(organization.id)).pipe(\n            map((response) => this.policyService.mapPoliciesFromToken(response))\n          );\n        }\n\n        return this.policyService.policies$;\n      })\n    );\n\n    combineLatest([this.route.queryParams, policies$, organization$])\n      .pipe(\n        concatMap(async ([qParams, policies, organization]) => {\n          this.organization = organization;\n\n          // Backfill pub/priv key if necessary\n          if (\n            this.organization.canManageUsersPassword &&\n            !this.organization.hasPublicAndPrivateKeys\n          ) {\n            const orgShareKey = await this.cryptoService.getOrgKey(this.organization.id);\n            const orgKeys = await this.cryptoService.makeKeyPair(orgShareKey);\n            const request = new OrganizationKeysRequest(orgKeys[0], orgKeys[1].encryptedString);\n            const response = await this.organizationApiService.updateKeys(\n              this.organization.id,\n              request\n            );\n            if (response != null) {\n              this.organization.hasPublicAndPrivateKeys =\n                response.publicKey != null && response.privateKey != null;\n              await this.syncService.fullSync(true); // Replace organizations with new data\n            } else {\n              throw new Error(this.i18nService.t(\"resetPasswordOrgKeysError\"));\n            }\n          }\n\n          const resetPasswordPolicy = policies\n            .filter((policy) => policy.type === PolicyType.ResetPassword)\n            .find((p) => p.organizationId === this.organization.id);\n          this.orgResetPasswordPolicyEnabled = resetPasswordPolicy?.enabled;\n\n          await this.load();\n\n          this.searchText = qParams.search;\n          if (qParams.viewEvents != null) {\n            const user = this.users.filter((u) => u.id === qParams.viewEvents);\n            if (user.length > 0 && user[0].status === OrganizationUserStatusType.Confirmed) {\n              this.events(user[0]);\n            }\n          }\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async load() {\n    await super.load();\n  }\n\n  async getUsers(): Promise<OrganizationUserView[]> {\n    let groupsPromise: Promise<Map<string, string>>;\n    let collectionsPromise: Promise<Map<string, string>>;\n\n    // We don't need both groups and collections for the table, so only load one\n    const userPromise = this.organizationUserService.getAllUsers(this.organization.id, {\n      includeGroups: this.organization.useGroups,\n      includeCollections: !this.organization.useGroups,\n    });\n\n    // Depending on which column is displayed, we need to load the group/collection names\n    if (this.organization.useGroups) {\n      groupsPromise = this.getGroupNameMap();\n    } else {\n      collectionsPromise = this.getCollectionNameMap();\n    }\n\n    const [usersResponse, groupNamesMap, collectionNamesMap] = await Promise.all([\n      userPromise,\n      groupsPromise,\n      collectionsPromise,\n    ]);\n\n    return usersResponse.data?.map<OrganizationUserView>((r) => {\n      const userView = OrganizationUserView.fromResponse(r);\n\n      userView.groupNames = userView.groups\n        .map((g) => groupNamesMap.get(g))\n        .sort(this.i18nService.collator?.compare);\n      userView.collectionNames = userView.collections\n        .map((c) => collectionNamesMap.get(c.id))\n        .sort(this.i18nService.collator?.compare);\n\n      return userView;\n    });\n  }\n\n  async getGroupNameMap(): Promise<Map<string, string>> {\n    const groups = await this.groupService.getAll(this.organization.id);\n    const groupNameMap = new Map<string, string>();\n    groups.forEach((g) => groupNameMap.set(g.id, g.name));\n    return groupNameMap;\n  }\n\n  /**\n   * Retrieve a map of all collection IDs <-> names for the organization.\n   */\n  async getCollectionNameMap() {\n    const collectionMap = new Map<string, string>();\n    const response = await this.apiService.getCollections(this.organization.id);\n\n    const collections = response.data.map(\n      (r) => new Collection(new CollectionData(r as CollectionDetailsResponse))\n    );\n    const decryptedCollections = await this.collectionService.decryptMany(collections);\n\n    decryptedCollections.forEach((c) => collectionMap.set(c.id, c.name));\n\n    return collectionMap;\n  }\n\n  deleteUser(id: string): Promise<void> {\n    return this.organizationUserService.deleteOrganizationUser(this.organization.id, id);\n  }\n\n  revokeUser(id: string): Promise<void> {\n    return this.organizationUserService.revokeOrganizationUser(this.organization.id, id);\n  }\n\n  restoreUser(id: string): Promise<void> {\n    return this.organizationUserService.restoreOrganizationUser(this.organization.id, id);\n  }\n\n  reinviteUser(id: string): Promise<void> {\n    return this.organizationUserService.postOrganizationUserReinvite(this.organization.id, id);\n  }\n\n  async confirmUser(user: OrganizationUserView, publicKey: Uint8Array): Promise<void> {\n    const orgKey = await this.cryptoService.getOrgKey(this.organization.id);\n    const key = await this.cryptoService.rsaEncrypt(orgKey.key, publicKey);\n    const request = new OrganizationUserConfirmRequest();\n    request.key = key.encryptedString;\n    await this.organizationUserService.postOrganizationUserConfirm(\n      this.organization.id,\n      user.id,\n      request\n    );\n  }\n\n  allowResetPassword(orgUser: OrganizationUserView): boolean {\n    // Hierarchy check\n    let callingUserHasPermission = false;\n\n    switch (this.organization.type) {\n      case OrganizationUserType.Owner:\n        callingUserHasPermission = true;\n        break;\n      case OrganizationUserType.Admin:\n        callingUserHasPermission = orgUser.type !== OrganizationUserType.Owner;\n        break;\n      case OrganizationUserType.Custom:\n        callingUserHasPermission =\n          orgUser.type !== OrganizationUserType.Owner &&\n          orgUser.type !== OrganizationUserType.Admin;\n        break;\n    }\n\n    // Final\n    return (\n      this.organization.canManageUsersPassword &&\n      callingUserHasPermission &&\n      this.organization.useResetPassword &&\n      this.organization.hasPublicAndPrivateKeys &&\n      orgUser.resetPasswordEnrolled &&\n      this.orgResetPasswordPolicyEnabled &&\n      orgUser.status === OrganizationUserStatusType.Confirmed\n    );\n  }\n\n  showEnrolledStatus(orgUser: OrganizationUserUserDetailsResponse): boolean {\n    return (\n      this.organization.useResetPassword &&\n      orgUser.resetPasswordEnrolled &&\n      this.orgResetPasswordPolicyEnabled\n    );\n  }\n\n  private async showFreeOrgUpgradeDialog(): Promise<void> {\n    const orgUpgradeSimpleDialogOpts: SimpleDialogOptions = {\n      title: this.i18nService.t(\"upgradeOrganization\"),\n      content: this.i18nService.t(\n        this.organization.canEditSubscription\n          ? \"freeOrgInvLimitReachedManageBilling\"\n          : \"freeOrgInvLimitReachedNoManageBilling\",\n        this.organization.seats\n      ),\n      type: \"primary\",\n    };\n\n    if (this.organization.canEditSubscription) {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"upgrade\");\n    } else {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"ok\");\n      orgUpgradeSimpleDialogOpts.cancelButtonText = null; // hide secondary btn\n    }\n\n    const simpleDialog = this.dialogService.openSimpleDialogRef(orgUpgradeSimpleDialogOpts);\n\n    firstValueFrom(simpleDialog.closed).then((result: boolean | undefined) => {\n      if (!result) {\n        return;\n      }\n\n      if (result && this.organization.canEditSubscription) {\n        this.router.navigate([\"/organizations\", this.organization.id, \"billing\", \"subscription\"], {\n          queryParams: { upgrade: true },\n        });\n      }\n    });\n  }\n\n  async edit(user: OrganizationUserView, initialTab: MemberDialogTab = MemberDialogTab.Role) {\n    // Invite User: Add Flow\n    // Click on user email: Edit Flow\n\n    // User attempting to invite new users in a free org with max users\n    if (\n      !user &&\n      this.organization.planProductType === ProductType.Free &&\n      this.allUsers.length === this.organization.seats\n    ) {\n      // Show org upgrade modal\n      await this.showFreeOrgUpgradeDialog();\n      return;\n    }\n\n    const dialog = openUserAddEditDialog(this.dialogService, {\n      data: {\n        name: this.userNamePipe.transform(user),\n        organizationId: this.organization.id,\n        organizationUserId: user != null ? user.id : null,\n        allOrganizationUserEmails: this.allUsers?.map((user) => user.email) ?? [],\n        usesKeyConnector: user?.usesKeyConnector,\n        initialTab: initialTab,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    switch (result) {\n      case MemberDialogResult.Deleted:\n        this.removeUser(user);\n        break;\n      case MemberDialogResult.Saved:\n      case MemberDialogResult.Revoked:\n      case MemberDialogResult.Restored:\n        this.load();\n        break;\n    }\n  }\n\n  async bulkRemove() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const [modal] = await this.modalService.openViewRef(\n      BulkRemoveComponent,\n      this.bulkRemoveModalRef,\n      (comp) => {\n        comp.organizationId = this.organization.id;\n        comp.users = this.getCheckedUsers();\n      }\n    );\n\n    await modal.onClosedPromise();\n    await this.load();\n  }\n\n  async bulkRevoke() {\n    await this.bulkRevokeOrRestore(true);\n  }\n\n  async bulkRestore() {\n    await this.bulkRevokeOrRestore(false);\n  }\n\n  async bulkRevokeOrRestore(isRevoking: boolean) {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const ref = this.modalService.open(BulkRestoreRevokeComponent, {\n      allowMultipleModals: true,\n      data: {\n        organizationId: this.organization.id,\n        users: this.getCheckedUsers(),\n        isRevoking: isRevoking,\n      },\n    });\n\n    await ref.onClosedPromise();\n    await this.load();\n  }\n\n  async bulkReinvite() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const users = this.getCheckedUsers();\n    const filteredUsers = users.filter((u) => u.status === OrganizationUserStatusType.Invited);\n\n    if (filteredUsers.length <= 0) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"noSelectedUsersApplicable\")\n      );\n      return;\n    }\n\n    try {\n      const response = this.organizationUserService.postManyOrganizationUserReinvite(\n        this.organization.id,\n        filteredUsers.map((user) => user.id)\n      );\n      this.showBulkStatus(\n        users,\n        filteredUsers,\n        response,\n        this.i18nService.t(\"bulkReinviteMessage\")\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async bulkConfirm() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const [modal] = await this.modalService.openViewRef(\n      BulkConfirmComponent,\n      this.bulkConfirmModalRef,\n      (comp) => {\n        comp.organizationId = this.organization.id;\n        comp.users = this.getCheckedUsers();\n      }\n    );\n\n    await modal.onClosedPromise();\n    await this.load();\n  }\n\n  async bulkEnableSM() {\n    const users = this.getCheckedUsers();\n    if (users.length === 0) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"noSelectedUsersApplicable\")\n      );\n      return;\n    }\n\n    const dialogRef = BulkEnableSecretsManagerDialogComponent.open(this.dialogService, {\n      orgId: this.organization.id,\n      users,\n    });\n\n    await lastValueFrom(dialogRef.closed);\n    this.selectAll(false);\n  }\n\n  async events(user: OrganizationUserView) {\n    await openEntityEventsDialog(this.dialogService, {\n      data: {\n        name: this.userNamePipe.transform(user),\n        organizationId: this.organization.id,\n        entityId: user.id,\n        showUser: false,\n        entity: \"user\",\n      },\n    });\n  }\n\n  async resetPassword(user: OrganizationUserView) {\n    const [modal] = await this.modalService.openViewRef(\n      ResetPasswordComponent,\n      this.resetPasswordModalRef,\n      (comp) => {\n        comp.name = this.userNamePipe.transform(user);\n        comp.email = user != null ? user.email : null;\n        comp.organizationId = this.organization.id;\n        comp.id = user != null ? user.id : null;\n\n        // eslint-disable-next-line rxjs-angular/prefer-takeuntil\n        comp.onPasswordReset.subscribe(() => {\n          modal.close();\n          this.load();\n        });\n      }\n    );\n  }\n\n  protected async removeUserConfirmationDialog(user: OrganizationUserView) {\n    const content = user.usesKeyConnector\n      ? \"removeUserConfirmationKeyConnector\"\n      : \"removeOrgUserConfirmation\";\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: {\n        key: \"removeUserIdAccess\",\n        placeholders: [this.userNamePipe.transform(user)],\n      },\n      content: { key: content },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (user.status > OrganizationUserStatusType.Invited && user.hasMasterPassword === false) {\n      return await this.noMasterPasswordConfirmationDialog(user);\n    }\n\n    return true;\n  }\n\n  protected async revokeUserConfirmationDialog(user: OrganizationUserView) {\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"revokeAccess\", placeholders: [this.userNamePipe.transform(user)] },\n      content: this.revokeWarningMessage(),\n      acceptButtonText: { key: \"revokeAccess\" },\n      type: \"warning\",\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    if (user.status > OrganizationUserStatusType.Invited && user.hasMasterPassword === false) {\n      return await this.noMasterPasswordConfirmationDialog(user);\n    }\n\n    return true;\n  }\n\n  private async showBulkStatus(\n    users: OrganizationUserView[],\n    filteredUsers: OrganizationUserView[],\n    request: Promise<ListResponse<OrganizationUserBulkResponse>>,\n    successfullMessage: string\n  ) {\n    const [modal, childComponent] = await this.modalService.openViewRef(\n      BulkStatusComponent,\n      this.bulkStatusModalRef,\n      (comp) => {\n        comp.loading = true;\n      }\n    );\n\n    // Workaround to handle closing the modal shortly after it has been opened\n    let close = false;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil\n    modal.onShown.subscribe(() => {\n      if (close) {\n        modal.close();\n      }\n    });\n\n    try {\n      const response = await request;\n\n      if (modal) {\n        const keyedErrors: any = response.data\n          .filter((r) => r.error !== \"\")\n          .reduce((a, x) => ({ ...a, [x.id]: x.error }), {});\n        const keyedFilteredUsers: any = filteredUsers.reduce((a, x) => ({ ...a, [x.id]: x }), {});\n\n        childComponent.users = users.map((user) => {\n          let message = keyedErrors[user.id] ?? successfullMessage;\n          // eslint-disable-next-line\n          if (!keyedFilteredUsers.hasOwnProperty(user.id)) {\n            message = this.i18nService.t(\"bulkFilteredMessage\");\n          }\n\n          return {\n            user: user,\n            error: keyedErrors.hasOwnProperty(user.id), // eslint-disable-line\n            message: message,\n          };\n        });\n        childComponent.loading = false;\n      }\n    } catch {\n      close = true;\n      modal.close();\n    }\n  }\n\n  private async noMasterPasswordConfirmationDialog(user: OrganizationUserView) {\n    return this.dialogService.openSimpleDialog({\n      title: {\n        key: \"removeOrgUserNoMasterPasswordTitle\",\n      },\n      content: {\n        key: \"removeOrgUserNoMasterPasswordDesc\",\n        placeholders: [this.userNamePipe.transform(user)],\n      },\n      type: \"warning\",\n    });\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { canAccessMembersTab } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\nimport { OrganizationPermissionsGuard } from \"../guards/org-permissions.guard\";\n\nimport { PeopleComponent } from \"./people.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: PeopleComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"members\",\n      organizationPermissions: canAccessMembersTab,\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MembersRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { PasswordCalloutComponent } from \"@bitwarden/auth\";\n\nimport { LooseComponentsModule } from \"../../../shared\";\nimport { SharedOrganizationModule } from \"../shared\";\n\nimport { BulkConfirmComponent } from \"./components/bulk/bulk-confirm.component\";\nimport { BulkEnableSecretsManagerDialogComponent } from \"./components/bulk/bulk-enable-sm-dialog.component\";\nimport { BulkRemoveComponent } from \"./components/bulk/bulk-remove.component\";\nimport { BulkRestoreRevokeComponent } from \"./components/bulk/bulk-restore-revoke.component\";\nimport { BulkStatusComponent } from \"./components/bulk/bulk-status.component\";\nimport { UserDialogModule } from \"./components/member-dialog\";\nimport { ResetPasswordComponent } from \"./components/reset-password.component\";\nimport { MembersRoutingModule } from \"./members-routing.module\";\nimport { PeopleComponent } from \"./people.component\";\n\n@NgModule({\n  imports: [\n    SharedOrganizationModule,\n    LooseComponentsModule,\n    MembersRoutingModule,\n    UserDialogModule,\n    PasswordCalloutComponent,\n  ],\n  declarations: [\n    BulkConfirmComponent,\n    BulkEnableSecretsManagerDialogComponent,\n    BulkRemoveComponent,\n    BulkRestoreRevokeComponent,\n    BulkStatusComponent,\n    PeopleComponent,\n    ResetPasswordComponent,\n  ],\n})\nexport class MembersModule {}\n"],"names":["commaSeparatedEmails","control","value","undefined","split","map","email","trim","find","_","multipleEmails","message","freeOrgSeatLimitReachedValidator","organization","allOrganizationUserEmails","errorMessage","newEmailsToAdd","filter","newEmailToAdd","some","existingEmail","planProductType","Free","length","seats","freePlanLimitReached","onChildCheck","NestedCheckboxComponent","destroy$","Subject","onSavedUser","onDeletedUser","parentIndeterminate","this","children","key","every","ngOnInit","checkboxes","controls","parentId","valueChanges","pipe","takeUntil","subscribe","Object","values","forEach","setValue","emitEvent","parentCheckbox","entries","parentChecked","index","item","ngOnDestroy","next","complete","pascalize","s","camelToPascalCase","MemberDialogTab","MemberDialogResult","handleDependentPermissions","MemberDialogComponent","customUserTypeSelected","formGroup","type","Custom","accessAllCollections","constructor","params","dialogRef","i18nService","platformUtilsService","organizationService","formBuilder","collectionAdminService","groupService","userService","organizationUserService","dialogService","loading","editMode","isRevoked","access","collections","organizationUserType","PermissionMode","showNoMasterPasswordWarning","collectionAccessItems","groupAccessItems","group","emails","updateOn","User","externalId","disabled","accessSecretsManager","groups","permissionsGroup","manageAssignedCollectionsGroup","manageAssignedCollections","editAssignedCollections","deleteAssignedCollections","manageAllCollectionsGroup","manageAllCollections","createNewCollections","editAnyCollection","deleteAnyCollection","accessEventLogs","accessImportExport","accessReports","manageGroups","manageSso","managePolicies","manageUsers","manageResetPassword","submit","markAllAsTouched","invalid","tabIndex","Role","showToast","t","canUseCustomPermissions","userView","id","organizationUserId","organizationId","accessAll","permissions","setRequestPermissions","v","Collection","m","save","Set","setErrors","tooManyEmails","invite","name","close","Saved","delete","usesKeyConnector","confirmed","openSimpleDialog","title","placeholders","content","noMasterPasswordConfirmationDialog","deleteOrganizationUser","Deleted","revoke","acceptButtonText","revokeOrganizationUser","Revoked","restore","restoreOrganizationUser","Restored","initialTab","organization$","of","get","shareReplay","refCount","bufferSize","groups$","switchMap","useGroups","getAll","combineLatest","userDetails","useCustomPermissions","canUseSecretsManager","useSecretsManager","emailsControlValidators","required","emailsControl","setValidators","updateValueAndValidity","concat","c","mapCollectionToAccessItemView","g","mapGroupToAccessItemView","Group","labelName","listName","Error","status","Invited","hasMasterPassword","assignedCollectionsPermissions","allCollectionsPermissions","patchValue","collectionsFromGroups","includes","flatMap","accessSelection","collection","accessSelections","user","selection","permission","mapToAccessSelections","groupAccessSelections","groupId","mapToGroupAccessSelections","removeControl","check","select","checked","readOnly","selectAll","p","clearPermissions","partialPermissions","assign","document","getElementById","cancel","Canceled","result","readonly","readonlyPermission","viaGroupName","UserDialogModule","OrganizationUserConfirmRequest","OrganizationUserView","groupNames","collectionNames","static","response","view","BulkEnableSecretsManagerDialogComponent","data","dataSource","putOrganizationUserBulkEnableSecretsManager","orgId","u","users","open","BulkRestoreRevokeComponent","config","statuses","Map","done","isRevoking","bulkTitle","titleKey","performBulkUserAction","bulkMessage","entry","error","set","e","userIds","revokeManyOrganizationUsers","restoreManyOrganizationUsers","ResetPasswordComponent","passwordGenerationService","policyService","cryptoService","logService","onPasswordReset","newPassword","showPassword","masterPasswordPolicyOptions$","enforcedPasswordPolicyOptions","enforcedPolicyOptions","loggedOutWarningName","generatePassword","options","getOptions","passwordStrengthComponent","updatePasswordStrength","togglePassword","focus","copy","copyToClipboard","window","minimumPasswordLength","evaluateMasterPassword","passwordStrengthResult","score","formPromise","getOrganizationUserResetPasswordDetails","then","kdfType","kdf","kdfIterations","kdfMemory","kdfParallelism","resetPasswordKey","encryptedPrivateKey","orgSymKey","getOrgKey","decPrivateKey","decryptToBytes","decValue","rsaDecrypt","existingUserKey","newMasterKey","makeMasterKey","toLowerCase","newMasterKeyHash","hashMasterKey","newUserKey","encryptUserKeyWithMasterKey","request","encryptedString","newMasterPasswordHash","putOrganizationUserResetPassword","emit","getStrengthResult","bulkEnableSM","bulkConfirm","reinvite","confirm","edit","events","resetPassword","checkUser","remove","loadMore","bulkReinvite","bulkRestore","bulkRevoke","bulkRemove","PeopleComponent","apiService","route","modalService","searchService","validationService","policyApiService","searchPipe","userNamePipe","syncService","stateService","organizationApiService","router","collectionService","super","userType","userStatusType","memberTab","orgResetPasswordPolicyEnabled","canUseSecretsManager$","org","policies$","isProviderUser","from","getPolicies","mapPoliciesFromToken","queryParams","concatMap","qParams","policies","canManageUsersPassword","hasPublicAndPrivateKeys","orgShareKey","orgKeys","makeKeyPair","updateKeys","publicKey","privateKey","fullSync","resetPasswordPolicy","policy","ResetPassword","enabled","load","searchText","search","viewEvents","Confirmed","getUsers","groupsPromise","collectionsPromise","userPromise","getAllUsers","includeGroups","includeCollections","getGroupNameMap","getCollectionNameMap","usersResponse","groupNamesMap","collectionNamesMap","Promise","all","r","fromResponse","sort","collator","compare","groupNameMap","collectionMap","getCollections","decryptMany","deleteUser","revokeUser","restoreUser","reinviteUser","postOrganizationUserReinvite","confirmUser","orgKey","rsaEncrypt","postOrganizationUserConfirm","allowResetPassword","orgUser","callingUserHasPermission","Owner","Admin","useResetPassword","resetPasswordEnrolled","showEnrolledStatus","showFreeOrgUpgradeDialog","orgUpgradeSimpleDialogOpts","canEditSubscription","cancelButtonText","simpleDialog","openSimpleDialogRef","firstValueFrom","closed","navigate","upgrade","allUsers","dialog","transform","lastValueFrom","removeUser","actionPromise","modal","openViewRef","bulkRemoveModalRef","comp","getCheckedUsers","onClosedPromise","bulkRevokeOrRestore","ref","allowMultipleModals","filteredUsers","postManyOrganizationUserReinvite","showBulkStatus","showError","bulkConfirmModalRef","entityId","showUser","entity","resetPasswordModalRef","removeUserConfirmationDialog","revokeUserConfirmationDialog","revokeWarningMessage","successfullMessage","childComponent","bulkStatusModalRef","onShown","keyedErrors","reduce","a","x","keyedFilteredUsers","hasOwnProperty","routes","path","component","canActivate","titleId","organizationPermissions","MembersRoutingModule","forChild","MembersModule"],"sourceRoot":""}