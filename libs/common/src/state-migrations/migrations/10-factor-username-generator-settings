import { MigrationHelper } from "../migration-helper";
import { IRREVERSIBLE, Migrator } from "../migrator";

type LegacyAccountType = {
  settings?: {
    usernameGenerationOptions?: {
      type?: "word" | "subaddress" | "catchall" | "forwarded";
      wordCapitalize?: boolean;
      wordIncludeNumber?: boolean;
      subaddressType?: "random" | "website-name";
      subaddressEmail?: string;
      catchallType?: "random" | "website-name";
      catchallDomain?: string;
      website?: string;
      forwardedService?: string;
      forwardedAnonAddyApiToken?: string;
      forwardedAnonAddyDomain?: string;
      forwardedAnonAddyBaseUrl?: string;
      forwardedDuckDuckGoToken?: string;
      forwardedFirefoxApiToken?: string;
      forwardedFastmailApiToken?: string;
      forwardedForwardEmailApiToken?: string;
      forwardedForwardEmailDomain?: string;
      forwardedSimpleLoginApiKey?: string;
      forwardedSimpleLoginBaseUrl?: string;
    }
  }
};

type NewAccountType = {
  settings?: {
    usernameGenerationOptions?: {
      type: "word" | "subaddress" | "catchall" | "forwarded";
      word: {
        capitalize: boolean;
        includeNumber: boolean;
      };
      subaddress: {
        algorithm: "random" | "website-name";
        email: string;
      };
      catchall: {
        algorithm: "random" | "website-name";
        domain: string;
      };
      website?: string;
      forwarders: {
        service: "fastmail" | "anonaddy" | "forwardemail" | "simplelogin" | "duckduckgo" | "firefoxrelay";
        fastMail?: {
          domain: string;
          prefix: string;
          token: string;
          wasPlainText: boolean;
        };
        addyIo?: {
          token: string;
          wasPlainText: boolean;
          domain: string;
          baseUrl: string;
        };
        forwardEmail?: {
          token: string;
          wasPlainText: boolean;
          domain: string;
        };
        simpleLogin?: {
          token: string;
          wasPlainText: boolean;
          baseUrl: string;
        };
        duckDuckGo?: {
          token: string;
          wasPlainText: boolean;
        };
        firefoxRelay?: {
          token: string;
          wasPlainText: boolean;
        };
      };
    };
  };
};

export class FactorUsernameGeneratorSettingsMigrator extends Migrator<9, 10> {
  async migrate(helper: MigrationHelper): Promise<void> {
    const accounts = await helper.getAccounts<LegacyAccountType>();

    await Promise.all([
      ...accounts.map(({ userId, account }) => {
        const newAccount = mapAccount(account);
        helper.set(userId, newAccount);
      }),
    ]);
  }

  async rollback(helper: MigrationHelper): Promise<void> {
    // old settings aren't compatible with the new UI, so we can't rollback
    throw IRREVERSIBLE;
  }
}

// exported for unit testing only
export async function mapAccount(account: LegacyAccountType) {
  const oldOptions = account.settings?.usernameGenerationOptions;
  if (!oldOptions) {
    return;
  }

  // if oldOptions exists, then we know that account.settings exists; replace it
  return {
    type: "word",
    word: {
      capitalize: oldOptions.wordCapitalize,
      includeNumber: oldOptions.wordIncludeNumber,
    },
    subaddress: {
      algorithm: oldOptions.subaddressType,
      email: oldOptions.subaddressEmail,
    },
    catchall: {
      algorithm: oldOptions.catchallType,
      domain: oldOptions.catchallDomain,
    },
    website: oldOptions.website,
    forwarders: Object.freeze({
      service: "fastmail",
      fastMail: {
        domain: "",
        prefix: "",
        token: oldOptions.forwardedFastmailApiToken,
        wasPlainText: true,
      },
      addyIo: {
        token: oldOptions.forwardedAnonAddyApiToken,
        wasPlainText: true,
        domain: oldOptions.forwardedAnonAddyDomain,
        baseUrl: oldOptions.forwardedAnonAddyBaseUrl,
      },
      forwardEmail: {
        token: oldOptions.forwardedForwardEmailApiToken,
        wasPlainText: true,
        domain: oldOptions.forwardedForwardEmailDomain,
      },
      simpleLogin: {
        token: oldOptions.forwardedSimpleLoginApiKey,
        wasPlainText: true,
        baseUrl: oldOptions.forwardedSimpleLoginBaseUrl,
      },
      duckDuckGo: {
        token: oldOptions.forwardedDuckDuckGoToken,
        wasPlainText: true,
      },
      firefoxRelay: {
        token: oldOptions.forwardedFirefoxApiToken,
        wasPlainText: true,
      },
    }),
  } as NewAccountType;
}
