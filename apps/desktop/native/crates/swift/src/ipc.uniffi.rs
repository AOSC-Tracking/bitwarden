// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// Check for compatibility between `uniffi` and `uniffi_bindgen` versions.
// Note that we have an error message on the same line as the assertion.
// This is important, because if the assertion fails, the compiler only
// seems to show that single line as context for the user.
uniffi::assert_compatible_version!("0.22.0"); // Please check that you depend on version 0.22.0 of the `uniffi` crate.

// Everybody gets basic buffer support, since it's needed for passing complex types over the FFI.
//
// See `uniffi/src/ffi/rustbuffer.rs` for documentation on these functions

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub extern "C" fn ffi_ipc_1559_rustbuffer_alloc(
    size: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::ffi::uniffi_rustbuffer_alloc(size, call_status)
}

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub unsafe extern "C" fn ffi_ipc_1559_rustbuffer_from_bytes(
    bytes: uniffi::ForeignBytes,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::ffi::uniffi_rustbuffer_from_bytes(bytes, call_status)
}

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub unsafe extern "C" fn ffi_ipc_1559_rustbuffer_free(
    buf: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::ffi::uniffi_rustbuffer_free(buf, call_status)
}

#[allow(clippy::missing_safety_doc)]
#[no_mangle]
pub unsafe extern "C" fn ffi_ipc_1559_rustbuffer_reserve(
    buf: uniffi::RustBuffer,
    additional: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::ffi::uniffi_rustbuffer_reserve(buf, additional, call_status)
}

// Error definitions, corresponding to `error` in the UDL.

#[doc(hidden)]
pub struct FfiConverterTypeIpcError;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeIpcError {
    type RustType = r#IpcError;

    // For "flat" error enums, we stringify the error on the Rust side and surface that
    // as the error message in the foreign language.

    fn write(obj: r#IpcError, buf: &mut std::vec::Vec<u8>) {
        use uniffi::deps::bytes::BufMut;
        let msg = obj.to_string();
        match obj {
            r#IpcError::r#Test { .. } => {
                buf.put_i32(1);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
        };
    }
    fn try_read(_buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<r#IpcError> {
        panic!("try_read not supported for flat errors");
    }
}

impl uniffi::FfiError for FfiConverterTypeIpcError {}

// Enum defitions, corresponding to `enum` in UDL.

// Record definitions, implemented as method-less structs, corresponding to `dictionary` objects.

// Top level functions, corresponding to UDL `namespace` functions.// Object definitions, corresponding to UDL `interface` definitions.

// For each Object definition, we assume the caller has provided an appropriately-shaped `struct T`
// with an `impl` for each method on the object. We create an `Arc<T>` for "safely" handing out
// references to these structs to foreign language code, and we provide a `pub extern "C"` function
// corresponding to each method.
//
// (Note that "safely" is in "scare quotes" - that's because we use functions on an `Arc` that
// that are inherently unsafe, but the code we generate is safe in practice.)
//
// If the caller's implementation of the struct does not match with the methods or types specified
// in the UDL, then the rust compiler will complain with a (hopefully at least somewhat helpful!)
// error message when processing this generated code.

// All Object structs must be `Sync + Send`. The generated scaffolding will fail to compile
// if they are not, but unfortunately it fails with an unactionably obscure error message.
// By asserting the requirement explicitly, we help Rust produce a more scrutable error message
// and thus help the user debug why the requirement isn't being met.
uniffi::deps::static_assertions::assert_impl_all!(r#IpcClient: Sync, Send);

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn ffi_ipc_1559_IpcClient_object_free(
    ptr: *const std::os::raw::c_void,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::call_with_output(call_status, || {
        assert!(!ptr.is_null());
        drop(unsafe { std::sync::Arc::from_raw(ptr as *const r#IpcClient) })
    })
}
#[doc(hidden)]
#[no_mangle]
pub extern "C" fn r#ipc_1559_IpcClient_new(
    call_status: &mut uniffi::RustCallStatus,
) -> *const std::os::raw::c_void /* *const IpcClient */ {
    uniffi::deps::log::debug!("ipc_1559_IpcClient_new");

    // If the constructor does not have the same signature as declared in the UDL, then
    // this attempt to call it will fail with a (somewhat) helpful compiler error.

    uniffi::call_with_output(call_status, || {
        let _new = r#IpcClient::r#new();
        let _arc = std::sync::Arc::new(_new);
        <std::sync::Arc<r#IpcClient> as uniffi::FfiConverter>::lower(_arc)
    })
}
#[doc(hidden)]
#[no_mangle]
#[allow(clippy::let_unit_value)] // Sometimes we generate code that binds `_retval` to `()`.
pub extern "C" fn r#ipc_1559_IpcClient_start(
    r#ptr: *const std::os::raw::c_void,
    r#callback: u64,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::deps::log::debug!("ipc_1559_IpcClient_start");
    // If the method does not have the same signature as declared in the UDL, then
    // this attempt to call it will fail with a (somewhat) helpful compiler error.

    uniffi::call_with_output(call_status, || {
        r#IpcClient::r#start(
            match <std::sync::Arc<r#IpcClient> as uniffi::FfiConverter>::try_lift(r#ptr) {
                Ok(ref val) => val,
                Err(err) => panic!("Failed to convert arg '{}': {}", "ptr", err),
            },
            match <FfiConverterCallbackInterfaceMessageCallback as uniffi::FfiConverter>::try_lift(
                r#callback,
            ) {
                Ok(val) => val,
                Err(err) => panic!("Failed to convert arg '{}': {}", "callback", err),
            },
        )
    })
}

#[doc(hidden)]
#[no_mangle]
#[allow(clippy::let_unit_value)] // Sometimes we generate code that binds `_retval` to `()`.
pub extern "C" fn r#ipc_1559_IpcClient_send(
    r#ptr: *const std::os::raw::c_void,
    r#message: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::deps::log::debug!("ipc_1559_IpcClient_send");
    // If the method does not have the same signature as declared in the UDL, then
    // this attempt to call it will fail with a (somewhat) helpful compiler error.

    uniffi::call_with_output(call_status, || {
        r#IpcClient::r#send(
            match <std::sync::Arc<r#IpcClient> as uniffi::FfiConverter>::try_lift(r#ptr) {
                Ok(ref val) => val,
                Err(err) => panic!("Failed to convert arg '{}': {}", "ptr", err),
            },
            match <String as uniffi::FfiConverter>::try_lift(r#message) {
                Ok(val) => val,
                Err(err) => panic!("Failed to convert arg '{}': {}", "message", err),
            },
        )
    })
}

// Callback Interface definitions, corresponding to UDL `callback interface` definitions.

// Register a foreign callback for getting across the FFI.
#[doc(hidden)]
static FOREIGN_CALLBACK_MESSAGECALLBACK_INTERNALS: uniffi::ForeignCallbackInternals =
    uniffi::ForeignCallbackInternals::new();

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn ffi_ipc_1559_MessageCallback_init_callback(
    callback: uniffi::ForeignCallback,
    _: &mut uniffi::RustCallStatus,
) {
    FOREIGN_CALLBACK_MESSAGECALLBACK_INTERNALS.set_callback(callback);
    // The call status should be initialized to CALL_SUCCESS, so no need to modify it.
}

// Make an implementation which will shell out to the foreign language.
#[doc(hidden)]
#[derive(Debug)]
struct FfiConverterCallbackInterfaceMessageCallback {
    handle: u64,
}

impl Drop for FfiConverterCallbackInterfaceMessageCallback {
    fn drop(&mut self) {
        let callback = FOREIGN_CALLBACK_MESSAGECALLBACK_INTERNALS
            .get_callback()
            .unwrap();
        let mut rbuf = uniffi::RustBuffer::new();
        unsafe {
            callback(
                self.handle,
                uniffi::IDX_CALLBACK_FREE,
                Default::default(),
                &mut rbuf,
            )
        };
    }
}

uniffi::deps::static_assertions::assert_impl_all!(
    FfiConverterCallbackInterfaceMessageCallback: Send
);

impl r#MessageCallback for FfiConverterCallbackInterfaceMessageCallback {
    fn r#message(&self, r#message: String) {
        uniffi::deps::log::debug!("MessageCallback.message");
        let mut args_buf = Vec::new();

        <String as uniffi::FfiConverter>::write(r#message, &mut args_buf);
        let args_rbuf = uniffi::RustBuffer::from_vec(args_buf);
        let callback = FOREIGN_CALLBACK_MESSAGECALLBACK_INTERNALS
            .get_callback()
            .unwrap();

        unsafe {
            // SAFETY:
            // * We're passing in a pointer to an empty buffer.
            //   * Nothing allocated, so nothing to drop.
            // * We expect the callback to write into that a valid allocated instance of a
            //   RustBuffer.
            let mut ret_rbuf = uniffi::RustBuffer::new();
            let ret = callback(self.handle, 1, args_rbuf, &mut ret_rbuf);
            #[allow(clippy::let_and_return, clippy::let_unit_value)]
            match ret {
                1 => {
                    // 1 indicates success with the return value written to the RustBuffer for
                    //   non-void calls.
                    let result = {
                        uniffi::RustBuffer::destroy(ret_rbuf);
                    };
                    result
                }
                -2 => {
                    // -2 indicates an error written to the RustBuffer
                    panic!("Callback return -2, but throws_type() is None");
                }
                // 0 is a deprecated method to indicates success for void returns
                0 => {
                    uniffi::deps::log::error!("UniFFI: Callback interface returned 0. Please update the bindings code to return 1 for all successfull calls");
                }
                // -1 indicates an unexpected error
                -1 => {
                    if !ret_rbuf.is_empty() {
                        let reason = match <String as uniffi::FfiConverter>::try_lift(ret_rbuf) {
                            Ok(s) => s,
                            Err(_) => String::from("[Error reading reason]"),
                        };
                        panic!("callback failed. Reason: {}", reason);
                    } else {
                        panic!("Callback failed")
                    }
                }
                // Other values should never be returned
                _ => panic!("Callback failed with unexpected return code"),
            }
        }
    }
}

unsafe impl uniffi::FfiConverter for FfiConverterCallbackInterfaceMessageCallback {
    // This RustType allows for rust code that inputs this type as a Box<dyn CallbackInterfaceTrait> param
    type RustType = Box<dyn r#MessageCallback>;
    type FfiType = u64;

    // Lower and write are tricky to implement because we have a dyn trait as our type.  There's
    // probably a way to, but this carries lots of thread safety risks, down to impedence
    // mismatches between Rust and foreign languages, and our uncertainty around implementations of
    // concurrent handlemaps.
    //
    // The use case for them is also quite exotic: it's passing a foreign callback back to the foreign
    // language.
    //
    // Until we have some certainty, and use cases, we shouldn't use them.
    fn lower(_obj: Self::RustType) -> Self::FfiType {
        panic!("Lowering CallbackInterface not supported")
    }

    fn write(_obj: Self::RustType, _buf: &mut std::vec::Vec<u8>) {
        panic!("Writing CallbackInterface not supported")
    }

    fn try_lift(v: Self::FfiType) -> uniffi::deps::anyhow::Result<Self::RustType> {
        Ok(Box::new(Self { handle: v }))
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<Self::RustType> {
        use uniffi::deps::bytes::Buf;
        uniffi::check_remaining(buf, 8)?;
        <Self as uniffi::FfiConverter>::try_lift(buf.get_u64())
    }
}

// External and Wrapped types
// Support for external types.

// Types with an external `FfiConverter`...

// For custom scaffolding types we need to generate an FfiConverterType based on the
// UniffiCustomTypeConverter implementation that the library supplies

// The `reexport_uniffi_scaffolding` macro
// Code to re-export the UniFFI scaffolding functions.
//
// Rust won't always re-export the functions from dependencies
// ([rust-lang#50007](https://github.com/rust-lang/rust/issues/50007))
//
// A workaround for this is to have the dependent crate reference a function from its dependency in
// an extern "C" function. This is clearly hacky and brittle, but at least we have some unittests
// that check if this works (fixtures/reexport-scaffolding-macro).
//
// The main way we use this macro is for that contain multiple UniFFI components (libxul,
// megazord).  The combined library has a cargo dependency for each component and calls
// uniffi_reexport_scaffolding!() for each one.

#[doc(hidden)]
pub fn uniffi_reexport_hack() {}

#[macro_export]
macro_rules! uniffi_reexport_scaffolding {
    () => {
        #[doc(hidden)]
        #[no_mangle]
        pub extern "C" fn ipc_uniffi_reexport_hack() {
            $crate::uniffi_reexport_hack()
        }
    };
}
