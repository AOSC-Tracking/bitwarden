{"version":3,"file":"837.1abfb116b6ef0a0f4c86.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/import-error-dialog.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/import-error-dialog.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/import-success-dialog.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/import-success-dialog.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/components/dialog/file-password-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/components/import.component.html","webpack://@bitwarden/web-vault/../../libs/importer/src/components/import.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import/import-web.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import/import-web.component.html"],"sourcesContent":["<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importError\" | i18n }}\n  </span>\n\n  <span bitDialogContent>\n    <div>{{ \"resolveTheErrorsBelowAndTryAgain\" | i18n }}</div>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>{{ r.type }}</td>\n          <td bitCell>{{ r.message }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n\n  <div bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { CommonModule } from \"@angular/common\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { ButtonModule, DialogModule, TableDataSource, TableModule } from \"@bitwarden/components\";\n\nexport interface ErrorListItem {\n  type: string;\n  message: string;\n}\n\n@Component({\n  templateUrl: \"./import-error-dialog.component.html\",\n  standalone: true,\n  imports: [CommonModule, JslibModule, DialogModule, TableModule, ButtonModule],\n})\nexport class ImportErrorDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ErrorListItem>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: Error) {}\n\n  ngOnInit(): void {\n    const split = this.data.message.split(\"\\n\\n\");\n    if (split.length == 1) {\n      this.dataSource.data = [{ type: \"\", message: this.data.message }];\n      return;\n    }\n\n    const data: ErrorListItem[] = [];\n    split.forEach((line) => {\n      data.push({ type: \"\", message: line });\n    });\n    this.dataSource.data = data;\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importSuccess\" | i18n }}\n  </span>\n\n  <div bitDialogContent>\n    <span>{{ \"importSuccessNumberOfItems\" | i18n : this.data.ciphers.length }}</span>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"type\" | i18n }}</th>\n          <th bitCell>{{ \"total\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>\n            <i class=\"bwi bwi-fw bwi-{{ r.icon }}\" aria-hidden=\"true\"></i>\n            {{ r.type | i18n }}\n          </td>\n          <td bitCell>{{ r.count }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { CommonModule } from \"@angular/common\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { ButtonModule, DialogModule, TableDataSource, TableModule } from \"@bitwarden/components\";\n\nimport { ImportResult } from \"../../models\";\n\nexport interface ResultList {\n  icon: string;\n  type: string;\n  count: number;\n}\n\n@Component({\n  templateUrl: \"./import-success-dialog.component.html\",\n  standalone: true,\n  imports: [CommonModule, JslibModule, DialogModule, TableModule, ButtonModule],\n})\nexport class ImportSuccessDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ResultList>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: ImportResult) {}\n\n  ngOnInit(): void {\n    if (this.data != null) {\n      this.dataSource.data = this.buildResultList();\n    }\n  }\n\n  private buildResultList(): ResultList[] {\n    let logins = 0;\n    let cards = 0;\n    let identities = 0;\n    let secureNotes = 0;\n    this.data.ciphers.map((c) => {\n      switch (c.type) {\n        case CipherType.Login:\n          logins++;\n          break;\n        case CipherType.Card:\n          cards++;\n          break;\n        case CipherType.SecureNote:\n          secureNotes++;\n          break;\n        case CipherType.Identity:\n          identities++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    const list: ResultList[] = [];\n    if (logins > 0) {\n      list.push({ icon: \"globe\", type: \"typeLogin\", count: logins });\n    }\n    if (cards > 0) {\n      list.push({ icon: \"credit-card\", type: \"typeCard\", count: cards });\n    }\n    if (identities > 0) {\n      list.push({ icon: \"id-card\", type: \"typeIdentity\", count: identities });\n    }\n    if (secureNotes > 0) {\n      list.push({ icon: \"sticky-note\", type: \"typeSecureNote\", count: secureNotes });\n    }\n    if (this.data.folders.length > 0) {\n      list.push({ icon: \"folder\", type: \"folders\", count: this.data.folders.length });\n    }\n    if (this.data.collections.length > 0) {\n      list.push({\n        icon: \"collection\",\n        type: \"collections\",\n        count: this.data.collections.length,\n      });\n    }\n    return list;\n  }\n}\n","import { DialogRef } from \"@angular/cdk/dialog\";\nimport { CommonModule } from \"@angular/common\";\nimport { Component } from \"@angular/core\";\nimport { FormBuilder, ReactiveFormsModule, Validators } from \"@angular/forms\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport {\n  AsyncActionsModule,\n  ButtonModule,\n  DialogModule,\n  FormFieldModule,\n  IconButtonModule,\n} from \"@bitwarden/components\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    JslibModule,\n    DialogModule,\n    FormFieldModule,\n    AsyncActionsModule,\n    ButtonModule,\n    IconButtonModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class FilePasswordPromptComponent {\n  formGroup = this.formBuilder.group({\n    filePassword: [\"\", Validators.required],\n  });\n\n  constructor(public dialogRef: DialogRef, protected formBuilder: FormBuilder) {}\n\n  submit = () => {\n    this.formGroup.markAsTouched();\n    if (!this.formGroup.valid) {\n      return;\n    }\n    this.dialogRef.close(this.formGroup.value.filePassword);\n  };\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog>\n    <span bitDialogTitle>\n      {{ \"confirmVaultImport\" | i18n }}\n    </span>\n\n    <div bitDialogContent>\n      {{ \"confirmVaultImportDesc\" | i18n }}\n      <bit-form-field class=\"tw-mt-6\">\n        <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n        <input\n          bitInput\n          type=\"password\"\n          name=\"filePassword\"\n          formControlName=\"filePassword\"\n          appAutofocus\n          appInputVerbatim\n        />\n        <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" type=\"submit\">\n        <span>{{ \"importData\" | i18n }}</span>\n      </button>\n      <button bitButton bitDialogClose buttonType=\"secondary\" type=\"button\">\n        <span>{{ \"cancel\" | i18n }}</span>\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<bit-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</bit-callout>\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" id=\"importForm\">\n  <bit-form-field>\n    <bit-label\n      >{{ \"importDestination\" | i18n }}\n      <a\n        target=\"_blank\"\n        rel=\"noopener\"\n        appA11yTitle=\"{{ 'learnAboutImportOptions' | i18n }}\"\n        href=\"https://bitwarden.com/help/import-data/\"\n      >\n        <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n      </a>\n    </bit-label>\n    <bit-select formControlName=\"vaultSelector\">\n      <bit-option\n        *ngIf=\"!importBlockedByPolicy\"\n        [label]=\"'myVault' | i18n\"\n        value=\"myVault\"\n        icon=\"bwi-user\"\n      />\n      <bit-option\n        *ngFor=\"let o of organizations$ | async\"\n        [value]=\"o.id\"\n        [label]=\"o.name\"\n        icon=\"bwi-business\"\n      />\n    </bit-select>\n  </bit-form-field>\n\n  <bit-form-field>\n    <bit-label>{{ organizationId ? (\"collection\" | i18n) : (\"folder\" | i18n) }}</bit-label>\n    <bit-select formControlName=\"targetSelector\">\n      <ng-container *ngIf=\"!organizationId\">\n        <bit-option [value]=\"null\" label=\"-- {{ 'selectImportFolder' | i18n }} --\" />\n        <bit-option\n          *ngFor=\"let f of folders$ | async\"\n          [value]=\"f.id\"\n          [label]=\"f.name\"\n          icon=\"bwi-folder\"\n        />\n      </ng-container>\n      <ng-container *ngIf=\"organizationId\">\n        <bit-option [value]=\"null\" label=\"-- {{ 'selectImportCollection' | i18n }} --\" />\n        <bit-option\n          *ngFor=\"let c of collections$ | async\"\n          [value]=\"c.id\"\n          [label]=\"c.name\"\n          icon=\"bwi-collection\"\n        />\n      </ng-container>\n    </bit-select>\n    <bit-hint>{{\n      \"importTargetHint\"\n        | i18n\n          : (organizationId ? (\"collection\" | i18n | lowercase) : (\"folder\" | i18n | lowercase))\n    }}</bit-hint>\n  </bit-form-field>\n\n  <bit-form-field class=\"tw-w-1/2\">\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <bit-select formControlName=\"format\">\n      <bit-option *ngFor=\"let o of featuredImportOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      <ng-container *ngIf=\"importOptions && importOptions.length\">\n        <bit-option value=\"-\" disabled />\n        <bit-option *ngFor=\"let o of importOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      </ng-container>\n    </bit-select>\n  </bit-form-field>\n  <bit-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n    <ng-container *ngIf=\"format === 'protonpass'\">\n      In the ProtonPass browser extension, go to Settings > Export. Export without PGP encryption\n      and save the zip file.\n    </ng-container>\n  </bit-callout>\n  <bit-form-field *ngIf=\"!hideFileSelector\">\n    <bit-label>{{ \"selectImportFile\" | i18n }}</bit-label>\n    <div class=\"file-selector\">\n      <button bitButton type=\"button\" buttonType=\"secondary\" (click)=\"fileSelector.click()\">\n        {{ \"chooseFile\" | i18n }}\n      </button>\n      {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n    </div>\n    <input\n      bitInput\n      #fileSelector\n      type=\"file\"\n      id=\"file\"\n      class=\"form-control-file\"\n      name=\"file\"\n      formControlName=\"file\"\n      (change)=\"setSelectedFile($event)\"\n      hidden\n    />\n  </bit-form-field>\n  <bit-form-field>\n    <bit-label>{{ \"orCopyPasteFileContents\" | i18n }}</bit-label>\n    <textarea\n      id=\"fileContents\"\n      bitInput\n      name=\"FileContents\"\n      formControlName=\"fileContents\"\n    ></textarea>\n  </bit-form-field>\n</form>\n","import { CommonModule } from \"@angular/common\";\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from \"@angular/core\";\nimport { FormBuilder, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport * as JSZip from \"jszip\";\nimport { concat, Observable, Subject, lastValueFrom, combineLatest } from \"rxjs\";\nimport { map, takeUntil } from \"rxjs/operators\";\n\nimport { JslibModule } from \"@bitwarden/angular/jslib.module\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport {\n  canAccessImportExport,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport {\n  AsyncActionsModule,\n  BitSubmitDirective,\n  ButtonModule,\n  CalloutModule,\n  DialogService,\n  FormFieldModule,\n  IconButtonModule,\n  SelectModule,\n} from \"@bitwarden/components\";\n\nimport { ImportOption, ImportResult, ImportType } from \"../models\";\nimport {\n  ImportApiService,\n  ImportApiServiceAbstraction,\n  ImportService,\n  ImportServiceAbstraction,\n} from \"../services\";\n\nimport {\n  FilePasswordPromptComponent,\n  ImportErrorDialogComponent,\n  ImportSuccessDialogComponent,\n} from \"./dialog\";\n\n@Component({\n  selector: \"tools-import\",\n  templateUrl: \"import.component.html\",\n  standalone: true,\n  imports: [\n    CommonModule,\n    JslibModule,\n    FormFieldModule,\n    AsyncActionsModule,\n    ButtonModule,\n    IconButtonModule,\n    SelectModule,\n    CalloutModule,\n    ReactiveFormsModule,\n  ],\n  providers: [\n    {\n      provide: ImportApiServiceAbstraction,\n      useClass: ImportApiService,\n      deps: [ApiService],\n    },\n    {\n      provide: ImportServiceAbstraction,\n      useClass: ImportService,\n      deps: [\n        CipherService,\n        FolderService,\n        ImportApiServiceAbstraction,\n        I18nService,\n        CollectionService,\n        CryptoService,\n      ],\n    },\n  ],\n})\nexport class ImportComponent implements OnInit, OnDestroy {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileSelected: File;\n\n  folders$: Observable<FolderView[]>;\n  collections$: Observable<CollectionView[]>;\n  organizations$: Observable<Organization[]>;\n\n  private _organizationId: string;\n\n  get organizationId(): string {\n    return this._organizationId;\n  }\n\n  @Input() set organizationId(value: string) {\n    this._organizationId = value;\n    this.organizationService\n      .get$(this._organizationId)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((organization) => {\n        this._organizationId = organization?.id;\n        this.organization = organization;\n      });\n  }\n\n  @Input() hideFileSelector: boolean;\n\n  protected organization: Organization;\n  protected destroy$ = new Subject<void>();\n\n  private _importBlockedByPolicy = false;\n\n  formGroup = this.formBuilder.group({\n    vaultSelector: [\n      \"myVault\",\n      {\n        nonNullable: true,\n        validators: [Validators.required],\n      },\n    ],\n    targetSelector: [null],\n    format: [null as ImportType | null, [Validators.required]],\n    fileContents: [],\n    file: [],\n  });\n\n  @ViewChild(BitSubmitDirective)\n  private bitSubmit: BitSubmitDirective;\n\n  @Output()\n  formLoading = new EventEmitter<boolean>();\n\n  @Output()\n  formDisabled = new EventEmitter<boolean>();\n\n  @Output()\n  onSuccessfulImport = new EventEmitter<string>();\n\n  ngAfterViewInit(): void {\n    this.bitSubmit.loading$.pipe(takeUntil(this.destroy$)).subscribe((loading) => {\n      this.formLoading.emit(loading);\n    });\n\n    this.bitSubmit.disabled$.pipe(takeUntil(this.destroy$)).subscribe((disabled) => {\n      this.formDisabled.emit(disabled);\n    });\n  }\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected syncService: SyncService,\n    protected dialogService: DialogService,\n    protected folderService: FolderService,\n    protected collectionService: CollectionService,\n    protected organizationService: OrganizationService,\n    protected formBuilder: FormBuilder\n  ) {}\n\n  protected get importBlockedByPolicy(): boolean {\n    return this._importBlockedByPolicy;\n  }\n\n  ngOnInit() {\n    this.setImportOptions();\n\n    this.organizations$ = concat(\n      this.organizationService.memberOrganizations$.pipe(\n        canAccessImportExport(this.i18nService),\n        map((orgs) => orgs.sort(Utils.getSortFunction(this.i18nService, \"name\")))\n      )\n    );\n\n    combineLatest([\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership),\n      this.organizations$,\n    ])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([policyApplies, orgs]) => {\n        this._importBlockedByPolicy = policyApplies;\n        if (policyApplies && orgs.length == 0) {\n          this.formGroup.disable();\n        }\n      });\n\n    if (this.organizationId) {\n      this.formGroup.controls.vaultSelector.patchValue(this.organizationId);\n      this.formGroup.controls.vaultSelector.disable();\n\n      this.collections$ = Utils.asyncToObservable(() =>\n        this.collectionService\n          .getAllDecrypted()\n          .then((c) => c.filter((c2) => c2.organizationId === this.organizationId))\n      );\n    } else {\n      // Filter out the `no folder`-item from folderViews$\n      this.folders$ = this.folderService.folderViews$.pipe(\n        map((folders) => folders.filter((f) => f.id != null))\n      );\n      this.formGroup.controls.targetSelector.disable();\n\n      this.formGroup.controls.vaultSelector.valueChanges\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((value) => {\n          this.organizationId = value != \"myVault\" ? value : undefined;\n          if (!this._importBlockedByPolicy) {\n            this.formGroup.controls.targetSelector.enable();\n          }\n          if (value) {\n            this.collections$ = Utils.asyncToObservable(() =>\n              this.collectionService\n                .getAllDecrypted()\n                .then((c) => c.filter((c2) => c2.organizationId === value))\n            );\n          }\n        });\n\n      this.formGroup.controls.vaultSelector.setValue(\"myVault\");\n    }\n    this.formGroup.controls.format.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.format = value;\n      });\n  }\n\n  submit = async () => {\n    if (this.formGroup.invalid) {\n      this.formGroup.markAllAsTouched();\n      return;\n    }\n\n    await this.performImport();\n  };\n\n  protected async performImport() {\n    if (this.organization) {\n      const confirmed = await this.dialogService.openSimpleDialog({\n        title: { key: \"warning\" },\n        content: { key: \"importWarning\", placeholders: [this.organization.name] },\n        type: \"warning\",\n      });\n\n      if (!confirmed) {\n        return;\n      }\n    }\n\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    const promptForPassword_callback = async () => {\n      return await this.getFilePassword();\n    };\n\n    const importer = this.importService.getImporter(\n      this.format,\n      promptForPassword_callback,\n      this.organizationId\n    );\n\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    let fileContents = this.formGroup.controls.fileContents.value;\n    if ((files == null || files.length === 0) && (fileContents == null || fileContents === \"\")) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    if (this.organizationId) {\n      await this.organizationService.get(this.organizationId)?.isAdmin;\n    }\n\n    try {\n      const result = await this.importService.import(\n        importer,\n        fileContents,\n        this.organizationId,\n        this.formGroup.controls.targetSelector.value,\n        this.isUserAdmin(this.organizationId)\n      );\n\n      //No errors, display success message\n      this.dialogService.open<unknown, ImportResult>(ImportSuccessDialogComponent, {\n        data: result,\n      });\n\n      this.syncService.fullSync(true);\n      this.onSuccessfulImport.emit(this._organizationId);\n    } catch (e) {\n      this.dialogService.open<unknown, Error>(ImportErrorDialogComponent, {\n        data: e,\n      });\n      this.logService.error(e);\n    }\n  }\n\n  private isUserAdmin(organizationId?: string): boolean {\n    if (!organizationId) {\n      return false;\n    }\n    return this.organizationService.get(this.organizationId)?.isAdmin;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\" && file.name.endsWith(\".1pux\")) {\n      return this.extractZipContent(file, \"export.data\");\n    }\n    if (\n      this.format === \"protonpass\" &&\n      (file.type === \"application/zip\" ||\n        file.type == \"application/x-zip-compressed\" ||\n        file.name.endsWith(\".zip\"))\n    ) {\n      return this.extractZipContent(file, \"Proton Pass/data.json\");\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extractZipContent(zipFile: File, contentFilePath: string): Promise<string> {\n    return new JSZip()\n      .loadAsync(zipFile)\n      .then((zip) => {\n        return zip.file(contentFilePath).async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const dialog = this.dialogService.open<string>(FilePasswordPromptComponent, {\n      ariaModal: true,\n    });\n\n    return await lastValueFrom(dialog.closed);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport {\n  OrganizationService,\n  canAccessVaultTab,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { ImportComponent } from \"@bitwarden/importer/ui\";\n\nimport { SharedModule } from \"../../shared\";\n\n@Component({\n  templateUrl: \"import-web.component.html\",\n  standalone: true,\n  imports: [SharedModule, ImportComponent],\n})\nexport class ImportWebComponent implements OnInit {\n  protected routeOrgId: string = null;\n  protected loading = false;\n  protected disabled = false;\n\n  constructor(\n    private route: ActivatedRoute,\n    private organizationService: OrganizationService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.routeOrgId = this.route.snapshot.paramMap.get(\"organizationId\");\n  }\n\n  /**\n   * Callback that is called after a successful import.\n   */\n  protected async onSuccessfulImport(organizationId: string): Promise<void> {\n    if (!organizationId) {\n      await this.router.navigate([\"vault\"]);\n      return;\n    }\n\n    const organization = await firstValueFrom(this.organizationService.get$(organizationId));\n    if (organization == null) {\n      return;\n    }\n\n    if (canAccessVaultTab(organization)) {\n      await this.router.navigate([\"organizations\", organizationId, \"vault\"]);\n    }\n  }\n}\n","<h1 bitTypography=\"h1\">{{ \"importData\" | i18n }}</h1>\n<tools-import\n  (formDisabled)=\"this.disabled = $event\"\n  (formLoading)=\"this.loading = $event\"\n  (onSuccessfulImport)=\"this.onSuccessfulImport($event)\"\n  organizationId=\"{{ routeOrgId }}\"\n></tools-import>\n<button\n  [disabled]=\"disabled\"\n  [loading]=\"loading\"\n  form=\"importForm\"\n  bitButton\n  type=\"submit\"\n  bitFormButton\n  buttonType=\"primary\"\n>\n  {{ \"importData\" | i18n }}\n</button>\n"],"names":["ImportErrorDialogComponent","constructor","dialogRef","data","dataSource","ngOnInit","split","this","message","length","type","forEach","line","push","ImportSuccessDialogComponent","buildResultList","logins","cards","identities","secureNotes","ciphers","map","c","Login","Card","SecureNote","Identity","list","icon","count","folders","collections","FilePasswordPromptComponent","formBuilder","formGroup","group","filePassword","required","submit","markAsTouched","valid","close","value","setSelectedFile","ImportComponent","organizationId","_organizationId","organizationService","get$","pipe","takeUntil","destroy$","subscribe","organization","id","ngAfterViewInit","bitSubmit","loading$","loading","formLoading","emit","disabled$","disabled","formDisabled","i18nService","importService","platformUtilsService","policyService","logService","syncService","dialogService","folderService","collectionService","format","Subject","_importBlockedByPolicy","vaultSelector","nonNullable","validators","targetSelector","fileContents","file","onSuccessfulImport","invalid","markAllAsTouched","performImport","importBlockedByPolicy","setImportOptions","organizations$","concat","memberOrganizations$","orgs","sort","getSortFunction","combineLatest","policyAppliesToActiveUser$","PersonalOwnership","policyApplies","disable","controls","patchValue","collections$","asyncToObservable","getAllDecrypted","then","filter","c2","folders$","folderViews$","f","valueChanges","undefined","enable","setValue","openSimpleDialog","title","key","content","placeholders","name","showToast","t","importer","getImporter","getFilePassword","files","document","getElementById","getFileContents","e","error","get","isAdmin","result","import","isUserAdmin","open","fullSync","getFormatInstructionTitle","results","featuredImportOptions","importOptions","o","regularImportOptions","a","b","collator","compare","localeCompare","event","fileInputEl","target","fileSelected","endsWith","extractZipContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","querySelector","textContent","onerror","zipFile","contentFilePath","loadAsync","zip","async","dialog","ariaModal","lastValueFrom","closed","ngOnDestroy","next","complete","provide","useClass","deps","ImportWebComponent","route","router","routeOrgId","snapshot","paramMap","navigate","firstValueFrom"],"sourceRoot":""}